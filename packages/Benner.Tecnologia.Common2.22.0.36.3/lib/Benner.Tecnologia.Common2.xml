<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Benner.Tecnologia.Common2</name>
    </assembly>
    <members>
        <!-- Badly formed XML comment ignored for member "T:Benner.Tecnologia.Common.Application.BennerDbContext" -->
        <member name="T:Benner.Tecnologia.Common.Application.BennerDbContextFactory">
            <summary>
            Criação de contextos de acesso ao banco de dados
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Application.BennerDbContextFactory.NewTaskDbContext">
            <summary>
            Cria um novo contexto de acesso a dados na Thread/Task atual utilizando o BennerAppDbConfiguration.Default
            </summary>
            <returns>Instância de IBennerDbContext que deve ser liberado via Dispose</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Application.BennerDbContextFactory.NewTaskDbContext(Benner.Tecnologia.Common.Application.BennerAppDbConfiguration)">
            <summary>
            Cria um novo contexto de acesso a dados na Thread/Task atual
            </summary>
            <param name="dbConfiguration">Configuração de acesso ao banco</param>
            <returns>Instância de IBennerDbContext que deve ser liberado via Dispose</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Application.BennerDbContextFactory.InitializeDefaultDbContext">
            <summary>
            Configura o contexto de acesso a dados padrão para aplicação ou para a Request quando em ambiente Web utilizando o BennerAppDbConfiguration.Default
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Application.BennerDbContextFactory.InitializeDefaultDbContext(Benner.Tecnologia.Common.Application.BennerAppDbConfiguration)">
            <summary>
            Configura o contexto de acesso a dados para aplicação ou para a Request quando em ambiente Web.
            </summary>
            <param name="dbConfiguration">Configuração de acesso ao banco</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Application.BennerDbContextFactory.FinalizeDefaultDbContext">
            <summary>
            Finaliza o contexto de acesso a dados padrão da aplicação ou da request quando em ambiente Web.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Application.IBennerDbContext">
            <summary>
            Contexto de acesso a dados. Deve ser liberado via Dispose ao final do uso.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Application.IBennerDbContextFactory">
            <summary>
            Criação de contextos de acesso ao banco de dados
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Application.IBennerDbContextFactory.NewTaskDbContext">
            <summary>
            Cria um novo contexto de acesso a dados na Thread/Task atual utilizando o BennerAppDbConfiguration.Default
            </summary>
            <returns>Instância de IBennerDbContext que deve ser liberado via Dispose</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Application.IBennerDbContextFactory.NewTaskDbContext(Benner.Tecnologia.Common.Application.BennerAppDbConfiguration)">
            <summary>
            Cria um novo contexto de acesso a dados na Thread/Task atual
            </summary>
            <param name="dbConfiguration">Configuração de acesso ao banco</param>
            <returns>Instância de IBennerDbContext que deve ser liberado via Dispose</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Application.IBennerDbContextFactory.InitializeDefaultDbContext">
            <summary>
            Configura o contexto de acesso a dados padrão para aplicação ou para a Request quando em ambiente Web utilizando o BennerAppDbConfiguration.Default
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Application.IBennerDbContextFactory.InitializeDefaultDbContext(Benner.Tecnologia.Common.Application.BennerAppDbConfiguration)">
            <summary>
            Configura o contexto de acesso a dados para aplicação ou para a Request quando em ambiente Web.
            </summary>
            <param name="dbConfiguration">Configuração de acesso ao banco</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Application.IBennerDbContextFactory.FinalizeDefaultDbContext">
            <summary>
            Finaliza o contexto de acesso a dados padrão da aplicação ou da request quando em ambiente Web.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Application.BennerAppInfraServices">
            <summary>
            Serviços essenciais para o funcionamento de qualquer aplicação BEF Anywhere
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Application.BennerAppDbConfiguration">
            <summary>
            Informações de acesso ao banco de dados utilizadas por uma aplicação BEF Anywhere
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Authorization.TaskFieldVisibility.Level">
            <summary>
            Camada de customização
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Authorization.Operation">
            <summary>
            A operação é por sistema
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Authorization.Operation.ViewAction">
            <summary>
            Representa o identificador da operação padrão de visualização de registros. (VIEW)
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Authorization.Operation.InsertAction">
            <summary>
            Representa o identificador da operação padrão de inserção de registros. (INSERT)
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Authorization.Operation.UpdateAction">
            <summary>
            Representa o identificador da operação padrão de atualização de registros. (UPDATE)
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Authorization.Operation.DeleteAction">
            <summary>
            Representa o identificador da operação padrão de exclusão de registros. (DELETE)
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Authorization.Operation.Level">
            <summary>
            Camada de customização
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Authorization.Operation.EntityName">
            <summary>
            Refere-se à entidade conceitual a qual a ação pertence.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Authorization.Operation.Entity">
            <summary>
            Refere-se à entidade conceitual a qual a ação pertence.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.Operation.GenerateDefaultOperations(Benner.Tecnologia.Common.EntityDefinition)">
            <summary>
            Gera as operações padrão para uma determinada definição de entidade.
            </summary>
            <param name="entityDefinition">Definição de entidade para qual serão geradas as operações.</param>
            <remarks>
            Serão geradas as operações VIEW, INSERT, UPDATE e DELETE, além das operações para as funçoes cadastradas no builder.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.Operation.GenerateFunctionOperations(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.Entities{Benner.Tecnologia.Common.Authorization.Operation})">
            <summary>
            Gera as operações para as funções cadastradas no builder da entidade passada por parametro.
            </summary>
            <param name="entityDefinition">Entidade da qual serão lidas as funções e geradas as operações.</param>
            <param name="operations">Lista de operações desta entidade que já constam na base de dados.</param>
            <remarks>
            É varrida a lista de funções existentes na definição de entidade. São salvas na base de dados as operações das funçoes 
               que estão na definição de entidade, mas ainda não possuem operação cadastrada no banco.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.Operation.DeleteManyCascade(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.Criteria)">
            <summary>
            Exclui da base de dados uma lista de operações (Z_OPERACOES) e suas ligações com Z_TAREFAOPERACOES.
            </summary>
            <param name="operationDefinition">Definição de entidade de Z_OPERACOES</param>
            <param name="operationCriteria">Critério de seleção que define a lista de operações que será excluida.</param>
        </member>
        <member name="P:Benner.Tecnologia.Common.Authorization.Operation.Identifier">
            <summary>
            Identificador da operação composto de [NOME DO SISTEMA].[NOME DA ENTIDADE].[ACAO]
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.Operation.GetDefinition(System.String)">
            <summary>
            Recupera a definição dinâmica desta entidade (Z_OPERACOES).
            </summary>
            <param name="systemInstanceName">Identificador do sistema.</param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.OperationCollection.GetIdentifiers">
            <summary>
            Retorna uma lista com os nomes das operações.
            </summary>
            <returns>Uma lista contendo os nomes das operações desta coleção.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.OperationRepository.#ctor">
            <summary>
            O construtor não deve ser utilizado diretamente.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Authorization.OperationRepository.Instance">
            <summary>
            A instância única do repositório.
            </summary>
            <remarks>
            O repositório é criado sob demanda na primeira vez que esta propriedade é utilizada.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.OperationRepository.Get(System.String)">
            <summary>
            Recupera uma operação.
            </summary>
            <param name="systemInstanceName"></param>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.OperationRepository.LoadOperationsByEntityName(System.String,System.String)">
            <summary>
            Carrega todas as operações de uma entidade em um determinado sistema
            </summary>
            <param name="systemInstanceName"></param>
            <param name="entityName"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.OperationRepository.GetTaskOperationList(System.String,Benner.Tecnologia.Common.Authorization.Task)">
            <summary>
            Recupera todos as tarefas atribuídas ao papel.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Authorization.Role.Level">
            <summary>
            Camada de customização
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Authorization.Role.IncludedRoles">
            <summary>
            Coleção de papéis incluídos.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Authorization.Role.TaskNames">
            <summary>
            Lista contendo o identificador de todas as tarefas que este papel pode executar(independente do usuário), considerando todos os papéis incluídos e tarefas incluídas.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.Role.GetDefinition(System.String)">
            <summary>
            Recupera a definição dinâmica desta entidade (Z_PAPEIS).
            </summary>
            <param name="systemInstanceName">Identificador do sistema.</param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.RoleAssignment.GetDefinition(System.String)">
            <summary>
            Recupera a definição dinâmica desta entidade (Z_PAPELATRIBUICOES).
            </summary>
            <param name="systemInstanceName">Identificador do sistema.</param>
            <returns></returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.Authorization.RoleInclusion.Level">
            <summary>
            Camada de customização
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.RoleInclusion.GetDefinition(System.String)">
            <summary>
            Recupera a definição dinâmica desta entidade (Z_PAPELPAPEIS).
            </summary>
            <param name="systemInstanceName">Identificador do sistema.</param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.RoleRepository.#ctor">
            <summary>
            O construtor não deve ser utilizado diretamente.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Authorization.RoleRepository.Instance">
            <summary>
            A instância única do repositório.
            </summary>
            <remarks>
            O repositório é criado sob demanda na primeira vez que esta propriedade é utilizada.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.RoleRepository.ProcessAllItems(System.String)">
            <summary>
            Recupera todos os papéis, com seus respectivos papéis incluídos
            </summary>
            <param name="systemInstanceName"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.RoleRepository.Get(System.String,Benner.Tecnologia.Common.Handle)">
            <summary>
            Recupera um Role.
            </summary>
            <param name="systemInstanceName"></param>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.RoleRepository.Get(System.String,System.String)">
            <summary>
            Recupera um Role.
            </summary>
            <param name="systemInstanceName"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.RoleRepository.GetAllUserGroupAssignmentList(System.String)">
            <summary>
            Recupera todos as atribuições de grupo de usuário.
            </summary>
            <param name="systemInstanceName"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.RoleRepository.GetUserGroupAssignmentList(System.String,Benner.Tecnologia.Common.Handle)">
            <summary>
            Recupera todos as atribuições de grupo de usuário.
            </summary>
            <param name="systemInstanceName"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.RoleRepository.ProcessUserRoles(System.String,Benner.Tecnologia.Common.Authorization.User)">
            <summary>
            Vincula papéis (negados e atribuídos) à um usuário.
            </summary>
            <param name="systemInstanceName"></param>
            <param name="user"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.RoleRepository.GetAllItems(System.String)">
            <summary>
            Carrega todos os Role e armazenar em cache.
            </summary>
            <param name="systemInstanceName"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.RoleRepository.GetAllInclusions(System.String)">
            <summary>
            Carrega todos os UserGroupInclusion.
            </summary>
            <param name="systemInstanceName"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.RoleRepository.BindIncludedRoles(System.Collections.Generic.List{Benner.Tecnologia.Common.Authorization.Role},Benner.Tecnologia.Common.Entities{Benner.Tecnologia.Common.Authorization.RoleInclusion})">
            <summary>
            Faz atribuição dos papéis incluídos.
            </summary>
            <param name="groupList"></param>
            <param name="inclusionList"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.RoleRepository.GetUserAssignmentList(System.String,Benner.Tecnologia.Common.Handle)">
            <summary>
            Recupera todos as atribuições de usuário.
            </summary>
            <param name="systemInstanceName"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.RoleRepository.ProcessRoleAssignment(System.String,System.Collections.Generic.List{Benner.Tecnologia.Common.Authorization.RoleAssignment},Benner.Tecnologia.Common.Authorization.User,System.Collections.Generic.List{Benner.Tecnologia.Common.Handle})">
            <summary>
            Efetua operações de conjunto e vincula papéis (atribuídos e negados) ao usuáio.
            ver lógica de atribuição em:
            http://www.benner.com.br/wiki/index.php?title=Autoriza%C3%A7%C3%A3o_(Design_-_WES_2008)/Interpreta%C3%A7%C3%A3o_de_atribui%C3%A7%C3%B5es_de_pap%C3%A9is
            </summary>
            <param name="systemInstanceName"></param>
            <param name="assignmentList"></param>
            <param name="assignee"></param>
            <param name="fullUnassignedRoleHandles">o fullUnassignedRoleHandles deve representar todos roles do antecessor e os incluídos e isso vai recursivamente.</param>
            <param name="predecessor"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.RoleRepository.JoinRoleHandleList(System.String,System.Collections.Generic.List{Benner.Tecnologia.Common.Handle},System.Collections.Generic.List{Benner.Tecnologia.Common.Handle})">
            <summary>
            Faz união da lista principal com a parcial e respectivos papéis incluídos.
            </summary>
            <param name="systemInstanceName"></param>
            <param name="fullHandleList"></param>
            <param name="partialHandleList"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.RoleRepository.GetRolesByTask(System.String)">
            <summary>
            Recupera lista de nome de papeis que podem executar determinada tarefa.
            Esta lista não contém os papéis incluídos, apenas os antecessores
            </summary>
            <param name="taskId"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.RoleRepository.GetPredecessorRoles(Benner.Tecnologia.Common.Authorization.Role)">
            <summary>
            Descobre todos os antecessores de determinada tarefa, e de seus antecessores, ou seja, busca recursivamente.
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.RoleRepository.GetAllIncludedRoles(System.String,System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Retorna uma coleção com os nomes dos papéis, de todos os conjuntos de papéis. e respectivos papéis incluídos
            </summary>
            <returns></returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Authorization.RoleSet">
            <summary>
            Classe que define um conjunto de Papéis.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.RoleSet.GetHandles">
            <summary>
            Retorna uma coleção com os handles dos papéis.
            </summary>
            <returns>Uma lista contendo os handles dos papéis desta coleção.</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Authorization.RoleSetOwner">
            <summary>
            Enumerador que indica o tipo de objeto que um RoleSet compõe.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Authorization.RoleSetCollection">
            <summary>
            Coleção de conjunto de papéis.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.RoleSetCollection.GetRoleHandles">
            <summary>
            Retorna uma coleção com os handles dos papéis, de todos os conjuntos de papéis.
            </summary>
            <returns>Uma lista contendo os handles dos papéis desta coleção de conjunto de papéis.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.RoleSetCollection.GetRoleNames">
            <summary>
            Retorna uma coleção com os nomes dos papéis, de todos os conjuntos de papéis.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.Authorization.RoleTask.Level">
            <summary>
            Camada de customização
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.RoleTask.GetDefinition(System.String)">
            <summary>
            Recupera a definição dinâmica desta entidade (Z_PAPELTAREFAS).
            </summary>
            <param name="systemInstanceName">Identificador do sistema.</param>
            <returns></returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Authorization.Task">
            <summary>
            A tarefa é por sistema
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Authorization.Task.OperationCollection">
            <summary>
            Coleção de operações atribuídas a tarefa.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Authorization.Task.IncludedTasks">
            <summary>
            Coleção de tarefas incluídas.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Authorization.Task.Identifier">
            <summary>
            Identificador da tarefa composto de [NOME DO SISTEMA]\[NOME DA TAREFA]
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Authorization.Task.Level">
            <summary>
            Camada de customização
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.Task.GetDefinition(System.String)">
            <summary>
            Recupera a definição dinâmica desta entidade (Z_TAREFAS).
            </summary>
            <param name="systemInstanceName">Identificador do sistema.</param>
            <returns></returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.Authorization.TaskInclusion.Level">
            <summary>
            Camada de customização
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.TaskInclusion.GetDefinition(System.String)">
            <summary>
            Recupera a definição dinâmica desta entidade (Z_TAREFATAREFAS).
            </summary>
            <param name="systemInstanceName">Identificador do sistema.</param>
            <returns></returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.Authorization.TaskOperation.Level">
            <summary>
            Camada de customização
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.TaskOperation.GetDefinition(System.String)">
            <summary>
            Recupera a definição dinâmica desta entidade (Z_TAREFAOPERACOES).
            </summary>
            <param name="systemInstanceName">Identificador do sistema.</param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.TaskRepository.#ctor">
            <summary>
            O construtor não deve ser utilizado diretamente.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Authorization.TaskRepository.Instance">
            <summary>
            A instância única do repositório.
            </summary>
            <remarks>
            O repositório é criado sob demanda na primeira vez que esta propriedade é utilizada.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.TaskRepository.Get(System.String)">
            <summary>
            Recupera uma Task.
            </summary>
            <param name="systemInstanceName"></param>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.TaskRepository.GetTasksByOperation(Benner.Tecnologia.Common.Authorization.Operation)">
            <summary>
            Recupera uma lista de tarefas que podem executar determinada operação.
            </summary>
            <param name="operation"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.TaskRepository.GetPredecessorTasks(Benner.Tecnologia.Common.Authorization.Task)">
            <summary>
            Descobre todos os antecessores de determinada tarefa, e de seus antecessores, ou seja, busca recursivamente.
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.TaskRepository.GetPredecessorTasksHandle(Benner.Tecnologia.Common.Authorization.Task)">
            <summary>
            Descobre todos os antecessores de determinada tarefa, e de seus antecessores, ou seja, busca recursivamente.
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.TaskRepository.GetPredecessorTask(Benner.Tecnologia.Common.Authorization.Task)">
            <summary>
            Descobre todos os antecessores de determinada tarefa, e de seus antecessores, ou seja, busca recursivamente.
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.TaskRepository.GetTasksByBusinessOperation(System.String,System.String)">
            <summary>
            Recupera uma lista de tarefas que podem executar determinado método de um BusinessComponent.
            </summary>
            <param name="businessComponent"></param>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.TaskRepository.GetTasksByReport(System.String)">
            <summary>
            Recupera uma lista de tarefas que podem executar determinado relatório.
            </summary>
            <param name="businessComponent"></param>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.Authorization.User.UnassignedRoleCollection">
            <summary>
            Coleção de papéis atribuídos.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Authorization.User.AssignedRoleCollection">
            <summary>
            Coleção de papéis negados.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.User.GetAllAssignedUserRoles">
            <summary>
            Recupera os papéis atribuídos a este usuário e os respectivos subpapéis
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.User.GetAllUnassignedUserRoles">
            <summary>
            Recupera os papéis negados a este usuário e os respectivos subpapéis
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.User.BindAllRoles">
            <summary>
            Vincula todos os papéis (atribuídos e negados) a este usuário.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.User.AuthorizeOperation(System.Collections.Generic.IReadOnlyList{System.String},System.String)">
            <summary>
            Verifica/valida se a operação está autorizada em algum dos papéis informados.
            </summary>
            <param name="roles"></param>
            <param name="operationName"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.User.CanExecuteOperation(System.Collections.Generic.IReadOnlyList{System.String},System.String)">
            <summary>
            Consulta se a operação está autorizada em algum dos papéis informados.
            </summary>
            <param name="roles"></param>
            <param name="operationName"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.User.CanExecuteBusinessComponentMethod(System.String,System.String)">
            <summary>
            Indica se este usuário pode ou não executar determinado método de um componente de negócio
            </summary>
            <param name="businessComponent">Nome do componente de negócio</param>
            <param name="methodName">Nome do método</param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.User.GetHandle(System.String,System.String)">
            <summary>
            Obtem o handle do usuário através do apelido
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.User.GetDefinition(System.String)">
            <summary>
            Recupera a definição dinâmica desta entidade (Z_GRUPOUSUARIOS).
            </summary>
            <param name="systemInstanceName">Identificador do sistema.</param>
            <returns></returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.Authorization.UserGroup.IncludedUserGroups">
            <summary>
            Coleção de grupos de usuário incluídos.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Authorization.UserGroup.AssignedRoleCollection">
            <summary>
            Coleção de papéis atribuídos - Esta coleção desconsidera os papéis incluídos.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Authorization.UserGroup.UnassignedRoleCollection">
            <summary>
            Coleção de papéis negados - Esta coleção desconsidera os papéis incluídos.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.UserGroup.GetDefinition(System.String)">
            <summary>
            Recupera a definição dinâmica desta entidade (Z_GRUPOS).
            </summary>
            <param name="systemInstanceName">Identificador do sistema.</param>
            <returns></returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.Authorization.UserGroupInclusion.UserGroupHandle">
            <summary>
            Recupera o handle do grupo de usuário através da StubInstance, sem a carga de toda instância.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Authorization.UserGroupInclusion.IncludedUserGroupHandle">
            <summary>
            Recupera o handle do grupo de usuário incluso através da StubInstance, sem a carga de toda instância.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.UserGroupInclusion.GetDefinition(System.String)">
            <summary>
            Recupera a definição dinâmica desta entidade (Z_GRUPOGRUPOS).
            </summary>
            <param name="systemInstanceName">Identificador do sistema.</param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.UserGroupMembership.GetDefinition(System.String)">
            <summary>
            Recupera a definição dinâmica desta entidade (Z_GRUPOUSUARIOGRUPOS).
            </summary>
            <param name="systemInstanceName">Identificador do sistema.</param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.UserGroupRepository.#ctor">
            <summary>
            O construtor não deve ser utilizado diretamente.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Authorization.UserGroupRepository.Instance">
            <summary>
            A instância única do repositório.
            </summary>
            <remarks>
            O repositório é criado sob demanda na primeira vez que esta propriedade é utilizada.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.UserGroupRepository.ProcessAllItems(System.String)">
            <summary>
            Faz processamento inicial de todos os grupos e papéis atribuídos, mantendo o resultado do processamento em cache.
            </summary>
            <param name="systemInstanceName"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.UserGroupRepository.Get(System.String,System.String)">
            <summary>
            Recupera um UserGroup.
            </summary>
            <param name="systemInstanceName"></param>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.UserGroupRepository.GetUserGroupsByUser(System.String,Benner.Tecnologia.Common.Authorization.User)">
            <summary>
            Recupera todos os grupos (já com os papéis atribuídos) cujo usuário está filiado.
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.UserGroupRepository.GetAllItems(System.String)">
            <summary>
            Carrega todos os UserGroup e armazenar em cache.
            </summary>
            <param name="systemInstanceName"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.UserGroupRepository.GetAllInclusions(System.String)">
            <summary>
            Carrega todos os UserGroupInclusion.
            </summary>
            <param name="systemInstanceName"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.UserGroupRepository.BindIncludedUserGroups(System.Collections.Generic.List{Benner.Tecnologia.Common.Authorization.UserGroup},Benner.Tecnologia.Common.Entities{Benner.Tecnologia.Common.Authorization.UserGroupInclusion})">
            <summary>
            Faz atribuição dos grupos incluídos.
            </summary>
            <param name="groupList"></param>
            <param name="inclusionList"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.UserGroupRepository.BindAssignments(System.String,System.Collections.Generic.List{Benner.Tecnologia.Common.Authorization.UserGroup},System.Collections.Generic.List{Benner.Tecnologia.Common.Authorization.RoleAssignment})">
            <summary>
            Faz vínculo entre grupos e papéis (atribuídos e negados).
            </summary>
            <param name="groupList"></param>
            <param name="roleGroupAssignmentList"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.UserGroupRepository.ProcessRoleAssignment(System.String,System.Collections.Generic.List{Benner.Tecnologia.Common.Authorization.RoleAssignment},Benner.Tecnologia.Common.Authorization.UserGroup,Benner.Tecnologia.Common.Authorization.UserGroup,System.Collections.Generic.List{System.Int64})">
            <summary>
            Efetua operações de conjunto e vincula papéis (atribuídos e negados) em todos os grupos, de forma recursiva.
            ver lógica de atribuição em:
            http://www.benner.com.br/wiki/index.php?title=Autoriza%C3%A7%C3%A3o_(Design_-_WES_2008)/Interpreta%C3%A7%C3%A3o_de_atribui%C3%A7%C3%B5es_de_pap%C3%A9is
            </summary>
            <param name="systemInstanceName"></param>
            <param name="assignmentList"></param>
            <param name="assignee"></param>
            <param name="fullUnassignedRoleHandles">o fullUnassignedRoleHandles deve representar todos roles do antecessor e os incluídos e isso vai recursivamente.</param>
            <param name="predecessor"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.TaskPage.GetDefinition(System.String)">
            <summary>
            Recupera a definição dinâmica desta entidade (W_TAREFAPAGINAS).
            </summary>
            <param name="systemInstanceName">Identificador do sistema.</param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.UserRepository.#ctor">
            <summary>
            O construtor não deve ser utilizado diretamente.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Authorization.UserRepository.Instance">
            <summary>
            A instância única do repositório.
            </summary>
            <remarks>
            O repositório é criado sob demanda na primeira vez que esta propriedade é utilizada.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.UserRepository.Get(System.String,System.String)">
            <summary>
            Recupera um usuário
            </summary>
            <param name="systemInstanceName"></param>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.UserRepository.ProcessAnonymousUser(System.String,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Adiciona permissão (caso for necessário) ao usuário anônimo para manipulação de dados de autorização
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Authorization.UserRepository.ProcessAnonymousUser(System.String,Benner.Tecnologia.Common.TransitoryData,System.String)">
            <summary>
            Adiciona permissão (caso for necessário) ao usuário anônimo para manipulação de dados de autorização
            </summary>
            <param name="systemInstanceName"></param>
        </member>
        <member name="T:Benner.Tecnologia.Common.BennerVars">
            <summary>
            Variáveis Benner. Classe estática. Prefira utilizar via injeção ISystemVarsStorage e IUserVarsStorage
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerVars.SystemVars">
            <summary>
            Acesso as variáveis de configuração do sistema. São varíaveis persistentes. Prefira utilizar via injeção ISystemVarsStorage e IUserVarsStorage
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerVars.UserVars">
            <summary>
            Acesso as variáveis de configuração do usuário. São varíaveis persistentes. Prefira utilizar via injeção ISystemVarsStorage e IUserVarsStorage.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerVars.SessionVars">
            <summary>
            Acesso as SessionVars da sessão do usuário.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.SystemVarsIndexer">
            <summary>
            Classe para leitura/escrita de variáveis de Sistema
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.SystemVarsIndexer.Item(System.String)">
            <summary>
            Acessa ao valor de uma variável de configuração
            </summary>
            <param name="name">Nome da variável</param>
            <returns>Valor string da variável. Retorna string vazia se a variável não existir.</returns>
            <remarks>Variáveis nulas ou inexistêntes retoram strings vazias.</remarks>
        </member>
        <member name="T:Benner.Tecnologia.Common.UserVarsIndexer">
            <summary>
            Classe para leitura/escrita de variáveis de usuário
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.UserVarsIndexer.Item(System.String)">
            <summary>
            Acessa ao valor de uma variável de configuração
            </summary>
            <param name="name">Nome da variável</param>
            <returns>Valor string da variável. Retorna string vazia se a variável não existir.</returns>
            <remarks>Variáveis nulas ou inexistêntes retoram strings vazias.</remarks>
        </member>
        <member name="T:Benner.Tecnologia.Common.SessionVarsIndexer">
            <summary>
            Classe para leitura/escrita de variáveis de sessão
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.SessionVarsIndexer.Item(System.String)">
            <summary>
            Acessa ao valor de uma variável de configuração
            </summary>
            <param name="name">Nome da variável</param>
            <returns>Valor string da variável. Retorna string vazia se a variável não existir.</returns>
            <remarks>Variáveis nulas ou inexistêntes retoram strings vazias.</remarks>
        </member>
        <member name="T:Benner.Tecnologia.Common.BennerVariables.BennerVarsImplementation">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.BennerVariables.BennerVarsImplementation.GetSystemVar(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.BennerVariables.BennerVarsImplementation.GetUserVar(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.BennerVariables.BennerVarsImplementation.GetSessionVar(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.BennerVariables.BennerVarsImplementation.SetSystemVar(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.BennerVariables.BennerVarsImplementation.SetUserVar(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.BennerVariables.BennerVarsImplementation.SetSessionVar(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Benner.Tecnologia.Common.BennerVariables.BennerVarsFactory">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.BennerVariables.BennerVarsFactory.CreateSystemVars">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.BennerVariables.BennerVarsFactory.CreateUserVars">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.BennerVariables.BennerVarsFactory.CreateSessionVars">
            <inheritdoc />
        </member>
        <member name="P:Benner.Tecnologia.Common.Cache.BaseCacheProvider`1.Name">
            <summary>
            Nome da área do Cache, o qual é utilizado como prefixo nas chaves utilizadas nos métodos Get e Set.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Cache.BaseCacheProvider`1.Get(System.String)">
            <summary>
            Obtém um item do Cache.
            </summary>
            <param name="key">Chave do item que será obtido do Cache.</param>
            <returns>O objeto obtido do Cache, caso nenhum objeto seja encontrado com a chave informada será retornado null.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Cache.BaseCacheProvider`1.Get``1(System.String)">
            <summary>
            Obtém um item tipado do Cache.
            </summary>
            <param name="key">Chave do item que será obtido do Cache.</param>
            <returns>O objeto obtido do Cache, caso nenhum objeto seja encontrado com a chave informada será retornado null.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Cache.BaseCacheProvider`1.Set(System.String,`0)">
            <summary>
            Armazena um objeto no cache.
            </summary>
            <param name="key">Chave identificadora sob a qual o objeto deverá ser armazenado.</param>
            <param name="value">Objeto a ser armazenado.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Cache.BaseCacheProvider`1.Set(System.String,`0,System.TimeSpan)">
            <summary>
            Armazena um objeto no cache sem dependências e com prioridade GetDefaultCacheItemPriority().
            </summary>
            <param name="key">Chave identificadora sob a qual o objeto deverá ser armazenado.</param>
            <param name="value">Objeto a ser armazenado.</param>
            <param name="slidingExpiration">Tempo de vida do objeto no Cache.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Cache.BaseCacheProvider`1.Set(System.String,`0,System.TimeSpan,System.Web.Caching.CacheItemPriority)">
            <summary>
            Armazena um objeto no cache.
            </summary>
            <param name="key">Chave identificadora sob a qual o objeto deverá ser armazenado.</param>
            <param name="value">Objeto a ser armazenado.</param>
            <param name="slidingExpiration">Tempo de vida do objeto no Cache.</param>
            <param name="priority">Prioridade do item no cache</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Cache.BaseCacheProvider`1.Set(System.String,`0,System.DateTime,System.Web.Caching.CacheItemPriority)">
            <summary>
            Armazena um objeto no cache.
            </summary>
            <param name="key">Chave identificadora sob a qual o objeto deverá ser armazenado.</param>
            <param name="value">Objeto a ser armazenado.</param>
            <param name="absoluteExpiration">Tempo de vida do objeto no Cache.</param>
            <param name="priority">Prioridade do item no cache</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Cache.BaseCacheProvider`1.Contains(System.String)">
            <summary>
            Verifica se um determinado item está no Cache.
            </summary>
            <param name="key">Chave do item que será verificado no Cache.</param>
            <returns>Retorna verdadeiro ou falso indicando se o item está ou não no Cache.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Cache.BaseCacheProvider`1.Clear(System.String)">
            <summary>
            Limpar um determinado item do Cache.
            </summary>
            <param name="key">Chave do item que deverá ser removido do Cache.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Cache.BaseCacheProvider`1.ClearAll">
            <summary>
            Limpar todos os itens do Cache que estão adicionados nesse Cache Provider.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Cache.EntityCacheContextMode">
            <summary>
            Provê opções adicionais para a criação de um contexto de cache de entidades.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Cache.EntityCacheContextMode.All">
            <summary>
            Todas as entidades manipuladas dentro do contexto serão adicionadas no cache.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Cache.EntityCacheContextMode.Default">
            <summary>
            Somente as entidades adicionadas na lista de entidades cacheáveis serão adicionadas no cache.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Cache.CacheProvider`1.#ctor(System.String)">
            <param name="name">Nome da área de cache. Este nome é usado como prefixo em cada chave informada nos métodos Get e Set</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Cache.CacheProvider`1.#ctor(Benner.Tecnologia.Common.CacheCategoryFlags)">
            <param name="category">Categoria na qual os objetos desta instancia de cache irá gerenciar. Isto facilita a limpeza de cache por dependencia de contexto (categoria).</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Cache.CacheProvider`1.#ctor(System.String,Benner.Tecnologia.Common.CacheCategoryFlags)">
            <param name="name">Nome da área de cache. Este nome é usado como prefixo em cada chave informada nos métodos Get e Set</param>
            <param name="category">Categoria na qual os objetos desta instancia de cache irá gerenciar. Isto facilita a limpeza de cache por dependencia de contexto (categoria).</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Cache.AuthorizationCacheProviderManager.ClearAuthorizationCache">
            <summary>
            Este método despeja todos os caches declarados neste classe (CacheCategoryFlags.Authorization)
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Cache.AuthorizationCacheProviderManager.BusinessOperationRoles">
            <summary>
            Este cache armazena os pápeis que podem executar determinado método de um BusinessComponent
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Cache.AuthorizationCacheProviderManager.ReportsRoles">
            <summary>
            Este cache armazena os pápeis que podem executar determinado relatórios
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Cache.EntityCacheContextService.#ctor">
            <summary>
            Construtor privado, garantindo que ninguém mais senão o Singleton possa instanciar esta classe
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Cache.EntityCacheContextService.Instance">
            <summary>
            Instância única do EntityCacheContextService
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Cache.EntityCacheContextService._contextDataByThread">
            <summary>
            Dicionário que mantém um EntityCacheContextData para cada Thread
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Cache.EntityCacheContextService._contextDatalock">
            <summary>
            Locker para instanciar o EntityCacheContextData, ver getter da propriedade ContextData, abaixo
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Cache.EntityCacheContextService.ContextData">
            <summary>
            Recupera o EntityCacheContextData que pertence à Thread atual
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Cache.EntityCacheContextService.CurrentContext">
            <summary>
            Recupera o contexto corrente
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Cache.EntityCacheContextService.InCachedContext">
            <summary>
            Indica se já existe um contexto ativo
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Cache.SimpleCircularBuffer`1">
            <summary>
            Buffer de tamanho fixo onde o elemento mais antigo é substituído por um novo quando a capacidade do buffer chegar no limite.
            </summary>
            <typeparam name="T">Tipo do objeto armazenado no buffer.</typeparam>
        </member>
        <member name="M:Benner.Tecnologia.Common.Cache.SimpleCircularBuffer`1.#ctor(System.Int32)">
            <summary>
            Construtor.
            </summary>
            <param name="maxSize">Número máximo de elementos no buffer.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Cache.SimpleCircularBuffer`1.Enqueue(`0)">
            <summary>
            Adiciona um novo elemento no buffer.
            </summary>
            <param name="item">Elemento que será adicionado.</param>
            <returns>Retorna o elemento que foi substituído pelo novo elemento. Se nenhum elemento foi substituído será retornado nulo.</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.CacheManager">
            <summary>
            Gerenciador de cache.
            </summary>
            <remarks>
            Esta classe será eliminada quando o mecanismo definitivo de cache for implementado.
            Essa classe é de uso da Tecnologia, para o desenvolvimento de sistema deve-se utilizar BusinessCacheProvider.
            </remarks>
        </member>
        <member name="F:Benner.Tecnologia.Common.CacheManager.Active">
            <summary>
            Permite desativar o mecanismo de cache (por exemplo, para testes).
            Essa classe é de uso da Tecnologia, para o desenvolvimento de sistema deve-se utilizar BusinessCacheProvider.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.CacheManager.Clear">
            <summary>
            Limpa o Cache localmente apenas.
            Essa classe é de uso da Tecnologia, para o desenvolvimento de sistema deve-se utilizar BusinessCacheProvider.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Cac.ITableColumnRecord.Visible">
            <summary>
            Essa propriedade nega o atributo INVISIVEL de Z_CAMPOS.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Cac.ITableRecord.IsSpecializedEntity">
            <summary>
            Se este registro em Z_TABELAS está configurado como entidade especializada.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Cac.ITableRecord.IsReadOnlyEntity">
            <summary>
            Se este registro em Z_TABELAS está configurado como somente leitura.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Cac.ITableRecord.Columns">
            <summary>
            Retorna as informações dos campos da tabela. Propriedade é carregada sob demanda.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Cac.ITableRecord.TablePageRecords">
            <summary>
            Retorna as informações dos campos da tabela. Propriedade é carregada sob demanda.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Cac.ITableRecord.Handle">
            <summary>A chave primária da entidade.</summary>
            <remarks>É um handle inválido se não foi definida.</remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.Cac.TableColumnRecord.Visible">
            <summary>
            Essa propriedade nega o atributo INVISIVEL de Z_CAMPOS.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Cac.TablePageRecord.CreateDefinition">
            <summary>
            Cria definição de entidade dinâmica para a tabela Z_PAGINAS
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Cac.TableGridField">
            <summary>
            Entidade especializada de Z_TABELACAMPOSGRID. Representa os "Campos de Grid na Web", configurados na definição da tabela no Builder.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Cac.TableGridField.Table">
            <summary>
            Tabela a quem este campo de grid está configurado.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Cac.TableGridField.Field">
            <summary>
            Campo da tabela Table que está disponível na visão de grid da tabela.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Cac.TableGridField.Order">
            <summary>
            Ordem do campo na visão de grid.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Cac.TableGridField.Visible">
            <summary>
            Define se o campo estará visível na visão de grid.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Cac.TableGridField.Level">
            <summary>
            Nível de customização do campo de grid. (Builder, Benner, Especifico, Cliente, etc.)
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Cac.TableGridField.GetByTableName(System.String,System.String)">
            <summary>
            Busca os campos configurados para exibição em grid na web de uma determinada tabela.
            </summary>
            <param name="tableName">Nome da tabela que se deseja buscar os campos de grid.</param>
            <param name="systemInstanceName">Nome do sistema</param>
            <returns>Lista de campos de grid da tabela informada por parametro.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Cac.TableGridField.CreateDefinition(System.String)">
            <summary>
            Cria a definição de entidade para a tabela Z_TABELACAMPOSGRID.
            </summary>
            <param name="systemInstanceName">Sistema selecionado</param>
            <returns>A definição de entidade para a tabela Z_TABELACAMPOSGRID</returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.Cac.TableRecord.IsSpecializedEntity">
            <summary>
            Se este registro em Z_TABELAS está configurado como entidade especializada.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Cac.TableRecord.IsReadOnlyEntity">
            <summary>
            Se este registro em Z_TABELAS está configurado como somente leitura.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Cac.TableRecord.RetornaListaTabelaQueNaoContemDefinicaoEntidade">
            <summary>
            Obtém uma lista com os nomes de estruturas de dados que não possuem definição de entidade.
            </summary>
            <returns>Retorna a lista com os nomes selecionados.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Cac.TableRecord.CreateDefinition(System.String)">
            <summary>
            Cria definição de entidade dinâmica para a tabela Z_TABELAS
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Cac.TableRecord.Columns">
            <summary>
            Retorna as informações dos campos da tabela. Propriedade é carregada sob demanda.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Cac.TableRecord.TablePageRecords">
            <summary>
            Retorna as informações dos campos da tabela. Propriedade é carregada sob demanda.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Cac.ColumnClass">
            <summary>
            Classes de Campos
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Cac.TMemFieldValuesUtils.GetFieldsAndValues(Benner.Tecnologia.Common.Cac.ColumnClass,System.String)">
            <summary>Responsável por recuperar os itens dos campos de classe rádio, lista ou grid</summary>
            <param name="fieldClass">Tipo da classe do campo</param>
            <param name="fieldText">Texto do campo</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Cac.TMemFieldValuesUtils.GetFieldsGroupValues(System.String)">
            <summary>Responsável por recuperar os itens dos campos de classe grupo</summary>
            <param name="fieldClass">Tipo da classe do campo</param>
            <param name="fieldText">Texto do campo</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Cac.TMemFieldValuesUtils.GetFieldTabValues(System.String)">
            <summary>Responsável por recuperar os itens dos campos de classe tab</summary>
            <param name="fieldText">Texto do campo</param>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.FileLinkDefinition.EntityDefinitionName">
            <summary>Identifica o nome da definição de entidade</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.FileLinkDefinition.EntityHandle">
            <summary>Identifica o handle de entidade </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.FileLinkDefinition.SystemInstanceName">
            <summary>Identifica o sistema da definicao de entidade</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.FileLinkDefinition.FieldName">
            <summary>Identifica o nome do campo que contém o arquivo na entidade</summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Components.NoFilter">
            <summary>
            Representa o filtro utilizado quando não há um filtro definido no WES (Pesquisa Simples).
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Components.ZFilterConditions.PeriodoWay.Antes">
            <summary>
            Anterior
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Components.ZFilterConditions.PeriodoWay.Depois">
            <summary>
            Próximos
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Components.ZFilterConditions.PeriodoWay.Atual">
            <summary>
            Corrente
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Components.FormFieldDateTimeRangeDefinition">
            <summary>
            Compara duas instâncias de FormFieldDefinition pelo nome
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Components.FormFieldSqlDefinition">
            <summary>Definições da UI para os campos tipo SQL</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormFieldSqlDefinition.#ctor">
            <summary>Criado para o SharePoint conseguir serializar</summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Components.GridFieldCustomDefinition">
            <summary>Definição de um campo de grid</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.GridFieldNamedDefinition.Title">
            <remarks>
            Definição de entidade para campo traduzido não é serializada, então o title precisa ser mantido localmente sempre
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.GridFieldSqlDefinition.#ctor">
            <summary>Criado para o SharePoint conseguir serializar</summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Components.ActionCommand">
            <summary>Representa uma ação que dispara regra de negócio</summary>
            <remarks>
            Não irá suportar customização em camadas. Caso seja necessário alterar, deverá criar um
            novo ActionCommand e configurar conforme desejado.
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.ActionCommand.FunctionName">
            <summary>Nome da função de entidade que será executada ao disparar esta ação</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.ActionCommand.DataInputViewName">
            <summary>Nome da visão de entidade utilizada para que o usuário dê entrada em dados que serão repassados à função de entidade</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.ActionCommand.DataInputSystemInstanceName">
            <summary>Nome da visão de entidade utilizada para que o usuário dê entrada em dados que serão repassados à função de entidade</summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Components.Command">
            <summary>
            Representa uma ação que o usuário poderá acionar manualmente
            </summary>
            <remarks>
            Esta classe também deve (ou pelo menos deveria) implementar a interface ICommandScriptProxy. 
            Atualmente não há nenhuma garantia de que os métodos e propriedades da classe CommandProxy também existem nesta classe.
            Hoje é impossível implementar tal interface por estarem em dlls diferentes.
            http://www.dotnet-guide.com/how-to-implement-proxy-pattern-using-c-c-sharp.html
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.Command.Name">
            <summary>
            Identificador única da ação
            </summary>
            <remarks>
            É serializado pelo Key
            </remarks> 
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.Command.Title">
            <summary>
            Legenda da ação
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.Command.UrlImage">
            <summary>
            Url da imagem
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.Command.Color">
            <summary>
            Cor do comando
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.Command.ModalSize">
            <summary>
            Tamanho do modal
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.Command.Context">
            <summary>
            Contexto do comando, identificando se exige ou não um registro posicionado
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.Command.InputDefinition">
            <summary>
            Entrada de dados para a execução de processo
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.Command.ProcessDefinition">
            <summary>
            Processo a ser executado pelo comando (Macro, StoredProcedure, etc)
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.Command.OutputDefinition">
            <summary>
            Destino de um comando
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.Command.IsLocalOutputDefinition">
            <summary>
            Retorna true se o destino do comando é 
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.Command.RequestConfirmation">
            <summary>
            True se deve ser solicitada ao usuário uma confirmação da execução do comando. Caso contrário, false.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.Command.RequestConfirmationMessage">
            <summary>
            Mensagem de confirmação solicitada ao usuário. Só é utilizada caso a propriedade RequestConfirmation seja igual a true.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.Command.#ctor(System.String,System.String)">
            <summary>Construtor de uma ação de usuário</summary>
            <param name="name">Nome único da ação de usuário</param>
            <param name="title">Legenda da ação</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.Command.#ctor">
            <summary>Construtor de uma ação de usuário</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.Command.GetItem(System.String,System.Collections.Generic.List{Benner.Tecnologia.Common.Components.Command})">
            <summary>Obtém um determinado comando através do seu nome único.</summary>
            <param name="name">Nome do comando procurado.</param>
            <param name="items">Lista de comandos onde será procurado o item.</param>
            <returns>Retorna o item encontrado ou null se não encontrar.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.Command.IsFunction">
            <summary>
            Indica que o processo deste comando é um Function.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.Command.IsReportProcess">
            <summary>
            Indica que o processo deste comando é um ReportProcess.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.Command.IsPredifinedAction">
            <summary>
            Indica que o processo deste comando é um PredifinedAction.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Components.CommandGroup">
            <summary>
            Um agrupador de Commands.
            </summary>
            <remarks>
            Este agrupador permite que os desenvolvedores organizem por grupos as ações de 
            uma visão de entidade.
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.CommandGroup.Items">
            <summary>Lista de ações agrupadas por este agrupador</summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Components.FormFieldDefinitionComparer">
            <summary>
            Compara duas instâncias de FormFieldDefinition pelo nome
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Components.FormFieldStringDefinition">
            <summary>Definições da UI para os campos tipo String e Text</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormFieldStringDefinition.#ctor">
            <summary>Criado para o SharePoint conseguir serializar</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.FormFieldStringDefinition.Lines">
            <summary>Identifica a quantidade de linhas exibidas</summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Components.GridFieldPathDefinition">
            <summary>Definição de um campo de grid</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.GridFieldPathDefinition.#ctor">
            <summary>Criado para o Sharepont conseguir serializar</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormFieldPathDefinition.#ctor">
            <summary>Criado para o SharePoint conseguir serializar</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.FormFieldPathDefinition.Title">
            <remarks>
            Definição de entidade para campo traduzido não é serializada, então o title precisa ser mantido localmente sempre
            </remarks>
        </member>
        <member name="T:Benner.Tecnologia.Common.Components.GridImageFieldDefinition">
            <summary>Definição de um campo de grid</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.GridImageFieldDefinition.#ctor">
            <summary>Criado para o Sharepont conseguir serializar</summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Components.ReportProcess">
            <summary>
            Classe que representa um comando de relatório.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.ReportProcess.ReportName">
            <summary>
            Nome do relatório
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.ReportProcess.SystemReport">
            <summary>
            Identifica se o relatório é do sistema
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.ReportProcess.ReportId">
            <summary>
            Identificador único do relatório (R_RELATORIOS.CODIGO)
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.ReportProcess.ReportType">
            <summary>
            Identifica qual o tipo do relatório (QuickReport e Stimulsoft)
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.ReportProcess.ReportFormat">
            <summary>
            Formato do relatório para QuickReport
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.ReportProcess.ReportFormatSti">
            <summary>
            Formato do relatório para Stimulsoft
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.ReportProcess.WhereClause">
            <summary>
            SQL especial
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Components.UrlLinkDefinition">
            <summary>Representa um link que direciona para uma Url qualquer</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.GenericViewDefinition.FieldDefinitions">
            <summary>
            Lista de definições de campos
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.GenericViewDefinition.GetFieldNameList">
            <summary>
            Retorna uma lista contendo o nome dos campos da visão
            </summary>
            <returns>Lista de strings</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.GenericViewDefinition.BuildViewDefinition">
            <summary>
            Monta uma definição de visão para ser utilizada para interagir com o serviço de entidades.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.GenericViewDefinition.#ctor">
            <summary>
            Criado para o Sharepont conseguir serializar
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Components.GridAssociationFieldDefinition">
            <summary>
            Definição de um campo de grid
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Components.EntityLinkDefinition.FormPageNameDefault">
            <summary>Nome da página web padrão do formulário</summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Components.EntityLinkDefinition.GridPageNameDefault">
            <summary>Nome da página web padrão do grid</summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Components.EntityLinkDefinition.EntitiesFolderName">
            <summary>Nome da pasta que contém as páginas de entidades</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.EntityLinkDefinition.WhereClause">
            <summary>Identifica a cláusula where que deve ser considerada no destino</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.EntityLinkDefinition.SystemInstanceName">
            <summary>Identifica o sitema da qual o Sql Especial definido na propriedade WhereClause diz respeito</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.EntityLinkDefinition.TargetEntityDefinitionName">
            <summary>Identifica o nome da definição de entidade de destino do link</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.EntityLinkDefinition.TargetSystemInstanceName">
            <summary>Identifica o sistema da definicao de entidade de destino</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.EntityLinkDefinition.ResolveFormUrl(System.Web.UI.Control,System.String)">
            <summary>Obtém a url para a página de formulário padrão de uma entidade</summary>
            <param name="contexControl">Objeto de contexto necessário para resolver a url de destino. É ncessário para chamar o método ResolveUrl.</param>
            <param name="entityDefinitionName">Nome da entidade de destino</param>
            <returns>Retorna a url para a página de formulário da entidade informada por parâmetro considerando o contexto atual</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.EntityLinkDefinition.ResolveGridUrl(System.Web.UI.Control,System.String)">
            <summary>Obtém a url para a página de grid padrão de uma entidade</summary>
            <param name="contexControl">Objeto de contexto necessário para resolver a url de destino. É ncessário para chamar o método ResolveUrl.</param>
            <param name="entityDefinitionName">Nome da entidade de destino</param>
            <returns>Retorna a url para a página de grid da entidade informada por parâmetro considerando o contexto atual</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.EntityLinkDefinition.GetEntityFolderName(System.String)">
            <summary>Obtém o nome da pasta que armazena as páginas da entidade informada por parâmetro</summary>
            <param name="entityDefinitionName">Nome da entidade a qual a pasta se relaciona</param>
            <returns>Retorna o nome da pasta da entidade informada por parâmetro</returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.EntityLinkDefinition.WhereClauseParameters">
            <summary>Obsoleto. Use a propriedade WhereClause.</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.EntityLinkDefinition.ParentEntityHandle">
            <summary>Obsoleto. Use a cláusula WhereClause passando por parâmetro o Handle do registro de origem</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.EntityLinkDefinition.WhereClauseRecordGuid">
            <summary>Obsoleto. Use a propriedade WhereClause para informar um SQL</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.EntityLinkDefinition.GetWhereClauseRecord">
            <summary>Obsoleto. Utilize a propriedade WhereClause. O Sql não precisa mais ser mantido na base de dados para trafegar na url.</summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Components.EntityViewField">
            <summary>
            Representa um campo da definição de componente de uma fonte de dados
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Components.EntityViewField._dataAccessLevel">
            <summary>
            Permissão do campo
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Components.EntityViewField._title">
            <summary>
            Legenda do campo
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Components.EntityViewField._visible">
            <summary>
            Identifica a visibilidade do campo. Se True o campo é visível.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Components.EntityViewField._required">
            <summary>
            Obrigatoriadade de preenchimento do campo
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.EntityViewField.#ctor">
            <summary>
            Criado para o Sharepont conseguir serializar
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.EntityViewField.DataAccessLevel">
            <summary>
            Indica o nível de acesso a dados.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.EntityViewField.Required">
            <summary>
            Indica se o preenchimento é ou não obrigatório.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Components.FormDefinition.Version">
            <summary>
            Número da versão da definição da classe FormDefinition
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.FormDefinition.Column">
            <summary>
            Quantidade de colunas que o formulário renderiza
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.FormDefinition.FormCaptionPosition">
            <summary>
            Posicionamento da legenda no formulário
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.FormDefinition.SubstituteViewName">
            <summary>
            Nome da visão substituta
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.FormDefinition.LayerDatabase">
            <summary>
            Identifica a camada na qual a definição está trabalhando. (Benner=0, Especifico=1, Cliente=2, ...=999)
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.FormDefinition.Identifier">
            <summary>
            Identificador única para a visão. Utilizado principalmente com o Workflow.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.FormDefinition.FieldDefinitions">
            <summary>
            Lista de definições de campos
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormDefinition.GetFieldNameList">
            <summary>
            Retorna uma lista contendo o nome dos campos da visão
            </summary>
            <returns>Lista de strings</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormDefinition.UpdateMetadataFromEntity(Benner.Tecnologia.Common.EntityBase)">
            <summary>
            Atualiza os metadados da visão com base no Visualization da entidade
            </summary>
            <param name="entity">Entidade</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormDefinition.UpdateMetadataCommands(Benner.Tecnologia.Common.Components.Interfaces.LayerCollection{Benner.Tecnologia.Common.Components.Command},Benner.Tecnologia.Common.EntityBase)">
            <summary>
            Atualiza os comandos a partir da definição do visualization
            </summary>
            <param name="commandList">Lista de comandos</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormDefinition.UpdateMetadataCommand(Benner.Tecnologia.Common.Components.Command,Benner.Tecnologia.Common.EntityBase)">
            <summary>
            Atualiza um comando a partir da definição do visualization
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormDefinition.Deserialize(Benner.Tecnologia.Common.IEntityViewRecord)">
            <summary>
            Deserializa uma instância de FormDefinition independente da versão em que o conteúdo xml tenha sido serializado.
            </summary>
            <param name="record">O registro contendo o conteúdo xml em qualquer versão.</param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormDefinition.AdjustFormContent(Benner.Tecnologia.Common.IEntityViewRecord)">
            <summary>
            Realiza os ajustes da visão de formulário 
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormDefinition.AdjustFormContentToVersion2(System.String)">
            <summary>
            Ajusta o conteúdo xml de FORM serializado na versão 1 para a versão 2.
            </summary>
            <param name="content">O conteúdo xml serializado na versão 1.</param>
            <returns>O conteúdo xml compatível com a versão 2.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormDefinition.AdjustFormContentToVersion4(System.String)">
            <summary>
            Ajusta o conteúdo xml de FORM serializado para a versão 4.
            </summary>
            <param name="content">O conteúdo xml serializado na versão anterior.</param>
            <returns>O conteúdo xml compatível com a versão 4.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormDefinition.AdjustFormContentToVersion5(System.String,System.String)">
            <summary>
            Ajusta a visão para a versão 5, adicionando os comandos pré-definidos à lista de comandos da visão.
            </summary>
            <param name="content">O conteúdo xml serializado na versão anterior.</param>
            <returns>O conteúdo xml compatível com a versão 5.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormDefinition.AdjustFormContentToVersion6(System.String,System.String)">
            <summary>
            Ajusta a visão para a versão 6, alterando a estrutura de campos tipo Tabela.
            </summary>
            <param name="content">O conteúdo xml serializado na versão anterior.</param>
            <returns>O conteúdo xml compatível com a versão 6.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormDefinition.AdjustFormContentToVersion7(System.String,System.String)">
            <summary>
            Ajusta a visão para a versão 7, adicionando os possíveis Sql Especiais diretamente no comando.
            </summary>
            <param name="content">O conteúdo xml serializado na versão anterior.</param>
            <returns>O conteúdo xml compatível com a versão 7.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormDefinition.AdjustFormContentToVersion10(System.String)">
            <summary>
            Remover o Handle da lista de Fields
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormDefinition.AdjustFormContentToVersion11(System.String)">
            <summary>
            Subistituir a classe dos comando que 'vai para o grid'.
            De 'EntityLinkDefinition' para 'GridLinkDefinition'
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormDefinition.AdjustFormContentToVersion13(System.String,System.String)">
            <summary>
            Ajusta a visão para a versão 13, adicionando novos comandos pré-definidos para navegacao de registros em formulario.
            </summary>
            <param name="content">O conteúdo xml serializado na versão anterior.</param>
            <returns>O conteúdo xml compatível com a versão 13.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormDefinition.AdjustFormContentToVersion14(System.String)">
            <summary>
            Subistituir a classe dos comando que 'vai para o grid'.
            De 'EntityLinkDefinition' para 'GridLinkDefinition' dentro de Grupos de Comandos 'CommandGroup'.
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormDefinition.CreatePredefinedCommands(Benner.Tecnologia.Common.EntitySource)">
            <summary>
            Retorna uma coleção de comandos pré-definidos para uma visão de Formulário contendo os comandos de Novo, Editar, Excluir, Salvar, Salvar/Novo e Cancelar.
            </summary>
            <param name="entitySource">Fonte de dados da definição de visão. O tipo da fonte de dados define um conjunto diferente de comandos.</param>
            <returns>Lista de comandos pré-definidos</returns>
            <remarks>
            1) Toda visão possui os comandos pré-definidos no comeco da lista de comandos da visão.
            2) Visão com fonte de dados VirtualTableSource retorna apenas os comandos de Save(Ok) e Cancel.
            3) Visão com fonte de dados TableSourcevirtual retorna todos os comandos.
            4) Comando Cancelar da Tabela Virtual, por padrão volta um nível
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormDefinition.Parse(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.IEntityViewRecord)">
            <summary>
            Método utilitario que transforma um registro de w_entidadevisoes em um FormDefinition
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormDefinition.Parse(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.IEntityViewRecord,System.Boolean)">
            <summary>
            Método utilitario que transforma um registro de w_entidadevisoes em um FormDefinition
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormDefinition.GetSubstituteCopy(System.String,System.String)">
            <summary>
            Obtém uma cópia de uma visão consolidade, caso a visão tenha uma substituta será retornado a substituta
            </summary>
            <param name="systemInstanceName"></param>
            <param name="viewName"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormDefinition.GetByName(System.String)">
            <summary>
            Obtém a visão consolidada a partir de um nome
            </summary>
            <param name="name">Nome da visão a ser obtida</param>
            <returns>Retorna a visão consolidada</returns>
            <exception cref="T:Benner.Tecnologia.Common.Exceptions.EntityNotFoundException">Visão não encontrada</exception>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormDefinition.GetByName(System.String,System.String)">
            <summary>
            Obtém a visão consolidada a partir de um nome
            </summary>
            <param name="systemInstanceName">Instância de sistema a qual a visão pertence</param>
            <param name="name">Nome da visão a ser obtida</param>
            <returns>Retorna a visão consolidada</returns>
            <exception cref="T:Benner.Tecnologia.Common.Exceptions.EntityNotFoundException">Visão não encontrada</exception>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormDefinition.GetByName(System.String,System.String,Benner.Tecnologia.Common.GetMode)">
            <summary>
            Obtém a visão consolidada a partir de um nome
            </summary>
            <param name="systemInstanceName">Instância de sistema a qual a visão pertence</param>
            <param name="name">Nome da visão a ser obtida</param>
            <param name="mode">Modo de obtenção da visão, podendo ser para leitura, edição ou modo bruto.</param>
            <returns>Retorna a visão consolidada</returns>
            <exception cref="T:Benner.Tecnologia.Common.Exceptions.EntityNotFoundException">Visão não encontrada</exception>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormDefinition.GetByLayer(System.String,System.String,Benner.Tecnologia.Common.GetMode,System.Int32)">
            <summary>
            Obtém a visão de uma camada determinada pelo parâmetro layer. Esta visão terá o conteúdo da visão Pai, ou seja, apenas a diferença.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.FormDefinition.Commands">
            <summary>Lista de ações de usuário da visão</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormDefinition.BuildViewDefinition">
            <summary>
            Monta uma definição de visão para ser utilizada para interagir com o serviço de entidades.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormDefinition.GetFormPageAssociationField(System.String,Benner.Tecnologia.Common.Components.Interfaces.LayerCollection{Benner.Tecnologia.Common.Components.FormPage})">
            <remarks>
            Método matido apenas para validação de versões anteriores a 6 da visão
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormDefinition.GenerateConsolidated(System.String,System.String)">
            <summary>
            Gera a visão consolidada
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormDefinition.GetSupportedScriptEventNameList">
            <summary>
            Obtém a lista de eventos suportados no script
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormDefinition.ValidateSubstituteView">
            <summary>
            Valida se não existe referência circular nas visões substitutas
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormDefinition.IsLayoutTopCaption">
            <summary>
            Valida se as legendas devem ser renderizados sobre os campos
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormFieldDefinition.#ctor">
            <summary>Criado para o SharePoint conseguir serializar</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.FormLinkDefinition.RoleName">
            <summary>
            Identifica o nome do papel a ser selecionado automaticamente no destino do link
            </summary>
            <remarks>SMS: 485371</remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.FormLinkDefinition.TargetEntityHandle">
            <summary>
            Identifica o handle de entidade de destino do link
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.FormLinkDefinition.TargetFormMode">
            <summary>
            Identifica o modo de manipulação do registro no destino
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.FormLinkDefinition.IsStructuredTable">
            <summary>
            Define se é uma tabela estruturada
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.FormLinkDefinition.StructuredFieldName">
            <summary>
            Nome do campo que mostra a estrutura
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.FormLinkDefinition.StructuredTableParentNode">
            <summary>
            Estrutura do item pai
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.FormLinkDefinition.UseTargetDefinitionName">
            <summary>
            Indica se o formulário deve considerar o nome da definição de entidade do destino,
            geralmente isso faz sentido quando a origem é um query source, logo o destino é desconhecido na montagem do link.
            SMS 588927
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormLinkDefinition.IsFormLinkDefinition(System.String)">
            <summary>
            Identifica se tem o parâmetro FormMode. Caso positivo é porque os dados da url referem-se a uma url para formulario.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormPage.#ctor(System.String,System.String)">
            <remarks>
            SMS: 479640 - Não deve ser inicializado a propriedade Visible no construtor, pois o valor da mesma irá sobrescrever no caso de herança e visão consolidada.
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.FormPage.Title">
            <remarks>
            [Rafael] Não segui um padrão no inicio e para evitar quebra de compatibilidade mantive a propriedade Caption.
            Porem criei também a propriedade Title para seguir um padrão de alterar os titulos dos itens do formulario.
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.FormPage.Visible">
            <summary>Identifica a visibilidade da pagina. Se True diferente de false a página é visível.</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormPage.GetPage(System.String,System.Collections.Generic.List{Benner.Tecnologia.Common.Components.FormPage})">
            <summary>Obtém através do nome uma determinada página de uma coleção</summary>
            <param name="pageName">Nome da página a ser obtida</param>
            <param name="pages">Lista de páginas na qual será procurada a página desejada</param>
            <returns>Se encontrar retorna a página, caso contrário retorna nulo.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormPage.GetIndexOf(System.String,System.Collections.Generic.List{Benner.Tecnologia.Common.Components.FormPage})">
            <summary>Obtém o índice de uma determinada página contida em uma coleção de páginas</summary>
            <param name="pageName">Nome da página a qual se quer o índice</param>
            <param name="pages">Lista de páginas na qual será procurada a página desejada</param>
            <returns>Se encontrar retorna o índice da página na lista, caso contrário retorna -1.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormPage.ExistField(System.String)">
            <summary>
            Verifica se o <paramref name="fieldName"/> está na lista de itens atuais (para saber se pode-se adicionar)
            </summary>
            <param name="fieldName"></param>
            <param name="insideTabs"></param>
            <returns></returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.FormPageGroup.Visible">
            <summary>Identifica a visibilidade do campo. Se True o campo é visível.</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormPageItem.GetIndexOf(System.String,System.Collections.Generic.List{Benner.Tecnologia.Common.Components.FormPageItem})">
            <summary>Obtém o índice de um determinado item no primeiro nivel de itens informado por parâmetro</summary>
            <param name="fieldName">Nome do item procurado</param>
            <param name="items">Lista de itens no qual sera procurado</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormPageItem.RemoveItem(System.String,System.Collections.Generic.List{Benner.Tecnologia.Common.Components.FormPageItem})">
            <summary>
            Remove a primeira ocorrencia de um determinado item, em qualquer nivel de Pagina ou Secao.
            </summary>
            <param name="fieldName">Nome do item</param>
            <param name="items">Lista inicial de itens</param>
            <returns>True se foi removido</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormPageItem.FindField(System.String,System.Collections.Generic.List{Benner.Tecnologia.Common.Components.FormPageItem})">
            <summary>Procura o item no primeiro nivel da lista de itens informado por parametro</summary>
            <param name="fieldName">Nome do item procurado</param>
            <param name="items">Lista de itens no qual sera procurado</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormPageItem.FindFieldRecursive(System.String,System.Collections.Generic.List{Benner.Tecnologia.Common.Components.FormPageItem})">
            <summary>Procura o item no primeiro nivel da lista de itens informado por parametro</summary>
            <param name="fieldName">Nome do item procurado</param>
            <param name="items">Lista de itens no qual sera procurado</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormPageItem.GetItem(System.String,System.Collections.Generic.IList{Benner.Tecnologia.Common.Components.FormPage},Benner.Tecnologia.Common.EntityBase)">
            <summary>Procura um determinado item em qualquer nivel da lista de paginas informado por parâmetro</summary>
            <param name="fieldName">Nome do item procurado</param>
            <param name="formPages">Lista de paginas no qual sera procurado</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormPageItem.GetItem(System.String,System.Collections.Generic.List{Benner.Tecnologia.Common.Components.FormPageItem},Benner.Tecnologia.Common.EntityBase)">
            <summary>Procura um determinado item em qualquer nivel da lista de itens informado por parâmetro</summary>
            <param name="fieldName">Nome do item procurado</param>
            <param name="items">Lista de itens no qual sera procurado</param>
        </member>
        <member name="F:Benner.Tecnologia.Common.Components.GridDefinition.Version">
            <summary>
            Número da versão da definição da classe GridDefinition
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.GridDefinition.#ctor">
            <summary>
            Criado para o Sharepont conseguir serializar
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.GridDefinition.LayerDatabase">
            <summary>
            Identifica a camada na qual a definição está trabalhando. (Benner=0, Especifico=1, Cliente=2, ...=999)
            Implementar da mesma forma no GridDefinition. Talvez gerar uma Interface disto e um enumerador.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.GridDefinition.BehaveAsUnstructuredGrid">
            <summary>
            Indica se deve se comportar como um grid não estruturado. Default: false
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.GridDefinition.FieldDefinitions">
            <summary>
            Lista de definições de campos
            </summary>        
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.GridDefinition.SubstituteViewName">
            <summary>
            Nome da visão substituta
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.GridDefinition.SortFields">
            <summary>
            Lista de campos para ordenação
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.GridDefinition.Commands">
            <summary>
            Lista de ações de usuário da visão
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.GridDefinition.EntityDefinition">
            <summary>
            Definição da entidade que esta visão representa.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.GridDefinition.GetFieldNameList">
            <summary>
            Retorna uma lista contendo o nome dos campos da visão
            </summary>
            <returns>Lista de strings</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.GridDefinition.Deserialize(Benner.Tecnologia.Common.IEntityViewRecord)">
            <summary>
            Deserializa uma instância de GridDefinition independente da versão em que o conteúdo xml tenha sido serializado.
            </summary>
            <param name="record">O registro contendo o conteúdo xml em qualquer versão.</param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.GridDefinition.AdjustGridContentToVersion2(System.String)">
            <summary>
            Ajusta o conteúdo xml de GRID serializado na versão 1 para a versão 2.
            </summary>
            <param name="content">O conteúdo xml serializado na versão 1.</param>
            <returns>O conteúdo xml compatível com a versão 2.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.GridDefinition.AdjustGridContentToVersion4(System.String)">
            <summary>
            Ajusta o conteúdo xml de GRID serializado para a versão 4.
            </summary>
            <param name="content">O conteúdo xml serializado na versão anterior.</param>
            <returns>O conteúdo xml compatível com a versão 4.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.GridDefinition.AdjustGridContentToVersion5(System.String,System.String)">
            <summary>
            Ajusta a visão para a versão 5, adicionando os comandos pré-definidos à lista de comandos da visão.
            </summary>
            <param name="content">O conteúdo xml serializado na versão anterior.</param>
            <returns>O conteúdo xml compatível com a versão 5.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.GridDefinition.AdjustGridContentToVersion6(System.String,System.String)">
            <summary>
            Ajusta a visão para a versão 6, adicionando os possíveis Sql Especiais diretamente no comando.
            </summary>
            <param name="content">O conteúdo xml serializado na versão anterior.</param>
            <returns>O conteúdo xml compatível com a versão 6.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.GridDefinition.AdjustGridContentToVersion8(System.String,System.String)">
            <summary>
            Ajusta a visão para a versão 8, adicionando os comandos pré-definidos View e Filter.
            </summary>
            <param name="content">O conteúdo xml serializado na versão anterior.</param>
            <returns>O conteúdo xml compatível com a versão 8.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.GridDefinition.AdjustGridContentToVersion10(System.String)">
            <summary>
            Ajusta a visão para a versão 9/10, remover o Handle da lista de Fields
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.GridDefinition.AdjustGridContentToVersion11(System.String)">
            <summary>
            Substituir a classe dos comando que 'Vai para o grid' de 'EntityLinkDefinition' para 'GridLinkDefinition'
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.GridDefinition.AdjustGridContentToVersion12(System.String)">
            <summary>
            Alterar o valor da propriedade 'Visible' para 'True' quando a propriedade 'Visibility' tive 'Invisible' 
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.GridDefinition.AdjustGridContentToVersion13(System.String)">
            <summary>
            Subistituir a classe dos comando que 'vai para o grid'.
            De 'EntityLinkDefinition' para 'GridLinkDefinition' dentro de Grupos de Comandos 'CommandGroup'.
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.GridDefinition.CreatePredefinedCommands">
            <summary>
            Retorna uma coleção de comandos pré-definidos para uma visão de Grid contendo os comandos de Novo, Editar, Excluir, Salvar, Salvar/Novo e Cancelar.
            </summary>
            <returns>Lista de comandos pré-definidos</returns>
            <remarks>
            Toda visão possui os comandos pré-definidos no comeco da lista de comandos da visão.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.GridDefinition.Parse(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.IEntityViewRecord)">
            <summary>
            Método utilitario que transforma um registro de w_entidadevisoes em um GridDefinition
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.GridDefinition.Parse(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.IEntityViewRecord,System.Boolean)">
            <summary>
            Método utilitario que transforma um registro de w_entidadevisoes em um GridDefinition
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.GridDefinition.GetByLayer(System.String,System.String,Benner.Tecnologia.Common.GetMode,System.Int32)">
            <summary>
            Obtém a visão de uma camada determinada pelo parâmetro layer. Esta visão terá o conteúdo da visão Pai, ou seja, apenas a diferença.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.GridDefinition.GenerateConsolidated(System.String,System.String)">
            <summary>
            Gera a visão consolidada
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.GridDefinition.GetSupportedScriptEventNameList">
            <summary>
            Obtém a lista de eventos suportados no script
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.GridDefinition.GetOrderByExpression">
            <summary>
            Cria a cláusula de ordenação
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.GridDefinition.GetOrderPrefix(Benner.Tecnologia.Common.Components.GridDefinition,System.String)">
            <summary>
            Retorna o prefixo para ordenação baseado no tipo do campo
            </summary>
            <param name="fieldName">Nome do campo que será ordenado</param>
            <returns>Prefixo: "A." ou ""</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.GridDefinition.GetSubstituteCopy(System.String,System.String)">
            <summary>
            Verifica se possui uma visão substituta para a padrão do widget
            </summary>
            <param name="systemInstanceName"></param>
            <param name="viewName"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.GridDefinition.ValidateSubstituteView">
            <summary>
            Valida se não existe referência circular nas visões substitutas
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.GridDefinition.ValidateSubstituteView(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Valida se não existe referência circular nas visões substitutas
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.GridDefinition.BuildViewDefinition">
            <summary>
            Monta uma definição de visão para ser utilizada para interagir com o serviço de entidades.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Components.GridFieldDefinition">
            <summary>
            Definição de um campo de grid
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Components.GridFieldDefinition._footerBehavior">
            <summary>
            Indica se o campo deve exibir soma no rodapé
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Components.GridFieldDefinition._width">
            <summary>
            Indica a largura do campo
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.GridFieldDefinition.#ctor">
            <summary>
            Criado para o Sharepont conseguir serializar
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.GridFieldDefinition.FooterBehavior">
            <summary>
            Indica se o campo deve exibir soma no rodapé
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.GridFieldDefinition.Width">
            <summary>
            Indica a largura do campo
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Components.Interfaces.ILayer">
            <summary>Interface para a implementação de camadas de customização, por exemplo, camadas Benner, Específico e Cliente.</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.Interfaces.ILayer.HideParent">
            ILayerSerializable - Interface para a implementação de serialização dos objetos em respeitando as informações de cada camada.
        </member>
        <member name="T:Benner.Tecnologia.Common.Components.Interfaces.ILayerCollectionItem">
            <summary>Interface para a implementação de camadas de customização de objetos que fazem parte de coleções.</summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Components.LinkCommand">
            <summary>Representa uma ação que direciona o usuário para um determinado ponto do sistema. Por exemplo, visão de grid da entidade de carros.</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.LinkDefinition.GetUrlWithoutParameters">
            <summary>
            Retorna a URL sem os parametros, para utilizar na autorização de páginas.
            </summary>
            <returns>Verifica se possui algum parametro definido na url, se tiver vai remover.</returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.LinkDefinition.Parameters">
            <summary>
            Lista de parâmetros serializados na montagem da url e passadas no parâmetro 'prms' da url.
            </summary>
            <remarks>
            A lista de parâmetros não será serilizada. Caso o valor de algum parâmetro precise ser serializável
            deve-se criar uma propriedade para o respectivo valor em uma classe herdada.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.LinkDefinition.GetEncodedUrl(System.Boolean)">
            <summary>Obtém a url com os parâmetros concatenados</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.LinkDefinition.GetCompleteUrl">
            <summary>
            Obtém a url completa, incluindo http, host, caminho e parâmetros
            </summary>
            <returns>A url completa</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.LinkDefinition.GetEncodedUrl">
            <summary>
            Obtem a URL do link com os parametros
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.LinkDefinition.SerializeParameters">
            <summary>Serializa os parametros de forma binária e retorna o resultado convertido para Base64</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.LinkDefinition.DeserializeParameters(System.String)">
            <summary>Desconverte e deserializa a lista de parâmetros informado por parâmetro</summary>
            <param name="value">Lista de parâmetros serializada (binário) e convertida para string com Base64</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.LinkDefinition.SetEncodedUrl(System.String)">
            <summary>Atribui valores aos atributos da classe conforme parâmetros disponíveis na url passada por parâmetro do método.</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.LinkDefinition.ToString">
            <summary>Obtém a url do link</summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Components.SortDirection">
            <summary>Identifica o sentido de ordenação do campo</summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Components.SortField">
            <summary>Representa um item de configuração de ordenação de campos para a interface.</summary>
            <remarks>Utilizada para identificar no componente de grid a sequencia de campos ordenados</remarks>
        </member>
        <member name="T:Benner.Tecnologia.Common.Components.UrlCommand">
            <summary>Representa uma ação que carrega uma página web externa, por exemplo, www.google.com.br</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.EntityViewBase.op_Implicit(Benner.Tecnologia.Common.Components.EntityViewBase)~Benner.Tecnologia.Common.EntityDescription">
            <summary>
            Operador de conversão implícita para EntityDescription.
            </summary>
            <param name="entityView">A instância da definição de visão de entidade.</param>
            <returns>Uma instância de EntityDescription.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.EntityViewBase.GetFieldNameList">
            <summary>
            Retorna uma lista contendo o nome dos campos da visão
            </summary>
            <returns>Lista de strings</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.EntityViewBase.ConsolidatedExist(System.String,System.String,System.Int64)">
            <summary>
            Método utilitário que verifica se uma determinada visão consolidada existe.
            </summary>
            <returns>
            Retorna True se a visão consolidada existe e a data de criação da visão consolidada é maior 
            que a data de alteração das visões de camadas intermediárias. Caso contrário retorna False.
            </returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.EntityViewBase.DeleteConsolidated(System.String,System.String)">
            <summary>
            Exclui a visão consolidada de uma determinada visão
            </summary>
            <param name="systemInstanceName">Nome da instância de sistema</param>
            <param name="viewName">Nome da visão consolidada a ser excluída</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.EntityViewBase.GetSupportedScriptEventNameList">
            <summary>
            Obtém a lista de eventos suportados no script
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.EntityViewBase.EntityDefinition">
            <summary>
            Definição de entidade na qual esta visão representa
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.EntityViewBase.#ctor">
            <summary>Criado para o Sharepont conseguir serializar.</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.EntityViewBase.#ctor(Benner.Tecnologia.Common.Components.EntityViewBase)">
            <summary>Construtor considerando estrutura em camadas</summary>
            <param name="parent">Objeto pai a ser considerado na construção do objeto atual</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.EntityViewBase.#ctor(Benner.Tecnologia.Common.EntityDefinition)">
            <summary>Construtor principal da classe. Responsável pelas principais inicializações.</summary>
            <param name="entityDefinition">Definição de entidade a qual o componente se relaciona</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.EntityViewBase.EditRecord(Benner.Tecnologia.Common.IEntityViewRecord)">
            <summary>
            Retorna uma instância de EntityViewRecord em modo de edição.
            </summary>
            <param name="record">Instância que será colocada em modo de edição.</param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.EntityViewBase.AdjustContentToVersion2(System.String)">
            <summary>
            Ajusta o conteúdo xml serializado na versão 1 para a versão 2.
            </summary>
            <param name="content">O conteúdo xml serializado na versão 1.</param>
            <returns>O conteúdo xml compatível com a versão 2.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.EntityViewBase.AdjustContentToVersion3(System.String)">
            <summary>
            Ajusta o conteúdo xml serializado na versão 2 para a versão 3.
            </summary>
            <param name="content">O conteúdo xml serializado na versão 2.</param>
            <returns>O conteúdo xml compatível com a versão 3.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.EntityViewBase.AdjsutSystemName(Benner.Tecnologia.Common.Components.Command,System.String)">
            <summary>
            Corrige o nome da instância do sistema na definição de comandos. Isso pq o gerador serializa os comandos com o nome do sistema no superserver, mas para o wes o correto é o nome da pool.
            </summary>
            <param name="linkDefinition"></param>
            <param name="systemInstanceName"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.EntityViewBase.AdjsutSystemName(Benner.Tecnologia.Common.Components.LinkDefinition,System.String)">
            <summary>
            Corrige o nome da instância do sistema na definição de comandos. Isso pq o gerador serializa os comandos com o nome do sistema no superserver, mas para o wes o correto é o nome da pool.
            </summary>
            <param name="linkDefinition"></param>
            <param name="systemInstanceName"></param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Components.FormFieldAggregationDefinition">
            <summary>Definições da UI para os campos tipo Filtro</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormFieldAggregationDefinition.#ctor">
            <summary>Criado para o SharePoint conseguir serializar</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.FormFieldAggregationDefinition.SelectAnyStructuredLevel">
            <summary>
            Indica se este lookup, quando apontar para uma tabela estruturada, irá permitir a seleção de registros em qualquer nível, ou apenas do último nivel.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.FormFieldAggregationDefinition.LookupViewName">
            <summary>
            Visão para o popup, utilizado apenas no popup, para exibir o grid e para executar pesquisas dentro do popup.
            Esta lista não é considerada no combo.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.FormFieldAggregationDefinition.LookupResultFields">
            <summary>
            Lista de campos de resultado para sobreescrever (ou customizar) a lista de campos de resultado da entidade de destino deste lookup.
            Esta lista deve ser considerada em lookups em modo de visualização e edição, inclusive esta lista é considerada no combo para pesquisas.
            Esta lista não é considerada no popup.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Components.FormFieldLabelDefinition">
            <summary>Definições da UI para os campos tipo Tabela</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.FormFieldLabelDefinition.#ctor">
            <summary>Criado para o SharePoint conseguir serializar</summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Components.Function">
            <summary>
            Representa um processo do tipo Função a ser executado no disparo de um comando
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.Function.FunctionName">
            <summary>
            Nome da função de entidade que será executada ao disparar esta ação
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.Function.InputTableName">
            <summary>
            Nome da tabela de entrada de dados da função
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Components.ICommandCollection">
            <summary>
            Representa uma classe que contém uma lista de ações de usuário
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.ICommandCollection.Commands">
            <summary>
            Lista de ações de usuário
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.ICommandCollection.Save">
            <summary>
            Responsável por gravar as alterações feitas na lista de ações de usuário
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.ICommandCollection.ValidateCommands">
            <summary>
            Responsável por validar as alterações feitas na lista de comandos.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Components.PredefinedAction">
            <summary>
            Representação dos processos pré-definidos Novo, Editar, Excluir, Salvar, Salvar/Novo e Cancelar
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.PredefinedAction.Type">
            <summary>
            Identifica o tipo da ação pré-definida que deverá ser executada ao disparar esta ação
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Components.Process">
            <summary>Representa um processo a ser executado no disparo de um comando</summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Components.FormFieldAssociationDefinition">
            <summary>
            Definições da UI para os campos tipo Tabela
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Benner.Tecnologia.Common.Components.FormFieldAssociationDefinition.SelectAnyStructuredLevel" -->
        <member name="P:Benner.Tecnologia.Common.Components.FormFieldAssociationDefinition.LookupViewName">
            <summary>
            Visão para o popup, utilizado apenas no popup, para exibir o grid e para executar pesquisas dentro do popup.
            Esta lista não é considerada no combo.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.FormFieldAssociationDefinition.LookupResultFields">
            <summary>
            Lista de campos de resultado para sobreescrever (ou customizar) a lista de campos de resultado da entidade de destino deste lookup.
            Esta lista deve ser considerada em lookups em modo de visualização e edição, inclusive esta lista é considerada no combo para pesquisas.
            Esta lista não é considerada no popup.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Components.Filter">
            <summary>
            Respresenta um filtro
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.Filter.PrepareConditions(Benner.Tecnologia.Common.Components.FilterConditions,Benner.Tecnologia.Common.Components.GridDefinition)">
            <summary>
            Prepara as condições para a geração da cláusula where
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.Filter.GenerateWhereClause(Benner.Tecnologia.Common.Components.GridDefinition,Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.Components.FilterConditions,System.String)">
            <summary>
            Geração da cláusula where a partir das condições do filtro
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.Filter.GetFilterConditionByIndex(System.Int32)">
            <summary>
            Obtem a condição pelo índice
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.Filter.GetConditionIndexFromFieldName(System.String)">
            <summary>
            Obtem do nome do campo o índice da condição
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.Filter.GetParametersFromManuallyDefinedCondition(Benner.Tecnologia.Common.Components.FilterCondition)">
            <summary>
            Obtem um lista com os nomes dos parâmetros em uma condição escrita pelo usuário
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.Filter.GetDateTimeConditionValue(Benner.Tecnologia.Common.DateTimeFieldDefinition,Benner.Tecnologia.Common.Components.FilterOperator,System.Object)">
            <summary>
            Atribuir a hora conforme a definição do campo e o operador da condição
            </summary>
            <remarks>
            Data sem hora com o operador "maior ou igual" atribuir a hora 00:00:00
            Data sem hora com o operador "maior" atribuir a hora 00:00:00
            Data sem hora com o operador "menor ou igual" atribuir a hora 23:59:59
            Data sem hora com o operador "menor" atribuir a hora 23:59:59
            Data e hora com o operador "menor" mas a hora vazio atribuir a hora 23:59:59
            Data e hora com o operador "menor ou igual" mas a hora vazio atribuir a hora 23:59:59
            </remarks> 
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.Filter.ConditionsSerialize(Benner.Tecnologia.Common.Components.FilterConditions)">
            <summary>
            Serializa as condições do filtro
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.Filter.ConditionsDeserialize(System.String)">
            <summary>
            Deserializa as condições do filtro
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.Filter.WhereClauseSerialize(Benner.Tecnologia.Common.WhereClause)">
            <summary>
            Serializa a cláusula where
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Components.Filter.WhereClauseDeserialize(System.String)">
            <summary>
            Deserializa a cláusula where
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Components.FilterCondition">
            <summary>
            Representa uma condição de um filtro
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.FilterCondition.Value">
            <summary>
            Valor sugerido
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.FilterCondition.UserInputRequired">
            <summary>
            Perguntar para o usuário
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Components.FilterCondition.Required">
            <summary>
            Condição é obrigatória
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.ApplicationConfigurationMigrator">
            <summary>
            Responsável pela migração do arquivo de configuração de aplicativo (web.config ou app.config).
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.ApplicationConfigurationMigrator.#ctor(System.String,System.String)">
            <summary>
            Construtor padrão informando o caminho de um arquivo de configuração (web.config ou app.config).
            </summary>
            <param name="configFilePath">Caminho do arquivo de configuração.</param>
            <param name="appSettingsKey">Chave na seção AppSettings responsável por armazenar o valor de versão do arquivo de configuração.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.ApplicationConfigurationMigrator.Upgrade">
            <summary>
            Responsável por aplicar a atualização de uma configuração de aplicativo e registrar novo número de versão do artefato.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.ApplicationConfigurationMigrator.OnUpgrade(System.String)">
            <summary>
            Lógica de atualização da configuração do aplicativo.
            </summary>
            <param name="currentVersion">Versão atual da configuração do aplicativo.</param>
            <returns>Retorna o valor de versão da configuração do aplicativo após aplicar a atualização.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.ApplicationConfigurationMigrator.AddOrUpdateAppSettingsItem(System.String,System.String)">
            <summary>
            Atualiza ou adiciona um item na seção AppSettings.
            </summary>
            <param name="key">Identificador do item.</param>
            <param name="value">Valor do item.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.ApplicationConfigurationMigrator.GetAppSettingsItem(System.String)">
            <summary>
            Obtém o elemento XML que contém o número da versão.
            </summary>
            <param name="key">A chave do elemento XML.</param>
            <returns>Retorna o elemento contendo informações da versão.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.ApplicationConfigurationMigrator.GetVersion">
            <summary>
            Obtém o número de versão do arquivo de configuração armazenado na seção AppSettings
            </summary>
            <returns>Retorna o número de versão do arquivo de configuração ou nulo caso não tenha informação de versão.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.ApplicationConfigurationMigrator.SetVersion(System.String)">
            <summary>
            Armazena o número de versão do arquivo de configuração na seção AppSettings.
            </summary>
            <param name="version">Número de versão do arquivo de configuração</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.ApplicationConfigurationMigrator.ForceRegeneratePage">
            <summary>
            Remove o arquivo GeneratedPagesInformation.config, forçando o aplicativo a regerar todas as páginas
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerConfiguration.AuthorizationEnable">
            <summary>
            Indica se a autorização por papéis está ligada. 
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerConfiguration.PerformanceCountersEnable">
            <summary>
            Indica se os contadores de performance estão ativos
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.BennerConfiguration.RunningOnWesCommandLine">
            <summary>
            Indica se estamos executando dentro o WES CLI
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.BennerConfiguration.RunningOnContainer">
            <summary>
            Indica se estamos executando dentro de um container
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.BennerConfiguration.RefreshBennerConfiguration">
            <summary>
            Ao alterar o Webconfig deve ser realizado um refresh para atualizar os valor porque a classe ConfigurationManager guarda em um "cache"
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerConfiguration.ConfigurationRequired">
            <summary>
            Indica se o aplicativo ainda não foi configurado.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerConfiguration.ExistDefaultSystemInstanceName">
            <summary>
            Verifica se existe a chave 'defaultSystemInstanceName' no webconfig
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerConfiguration.AlwaysGenerateTokenRecord">
            <summary>
            Indica se sempre deve gerar novos registros em W_TOKENS ao solicitar um token de autenticacao
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerConfiguration.ExistAnonymousUserName">
            <summary>
            Verifica se existe a chave 'anonymousUserName' no webconfig
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerConfiguration.ExistAnonymousPassword">
            <summary>
            Verifica se existe a chave 'anonymousPassword' no webconfig
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerConfiguration.DefaultSuperServerHost">
            <summary>
            Servidor de super server
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerConfiguration.GoogleAnalyticsCustomTrackingID">
            <summary>
            ID de Google Analytics customizada
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerConfiguration.GoogleRecaptchaDataSiteKey">
            <summary>
            ID de Google reCaptcha customizada
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerConfiguration.ForceLogin">
            <summary>
            Indica se os botões do desenvolvedor e o papel desenvolvedor devem ser exibidos. default: true
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerConfiguration.ExistTempDir">
            <summary>
            Verifica se existe a chave 'tempDir' no webconfig
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerConfiguration.ViewStateDirectory">
            <summary>
            Indica o diretório para o view state. "[TempDir]\ViewState\".
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerConfiguration.TemporaryContentsDirectory">
            <summary>
            Indica o diretório temporário para manipulação de arquivos. "[TempDir]\BDOC\".
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerConfiguration.CustomizationLevel">
            <summary>
            Configuração de nível de customização definida para testar ambiente local da Benner
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerConfiguration.LegacySecurityEnabled">
            <summary>
            Se deve validar as permissões de tabelas e campos do legado
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerConfiguration.ExistMaxFileSizeInKB">
            <summary>
            Verifica se existe a chave 'maxFileSizeInKB' no webconfig
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerConfiguration.MaxFileSizeInKB">
            <summary>
            Tamanho máximo suportado de campos tipo arquivos. default: 4 MB
            Não pode ser menor que 512
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerConfiguration.PagesThemeName">
            <summary>
            Indica o nome do thema configurado no web.config, em system.web/pages/theme
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerConfiguration.UseNewQueryWflInbox">
            <summary>
            Indica que a caixa de entrada ("Minhas tarefas") do Workflow irá utilizar as novas querys
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerConfiguration.ValidateSessionHijacking">
            <summary>
            Indica se deve validar roubo de sessão
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerConfiguration.CustomLog">
            <summary>
            Classe que implementa a interface ICustomLog no formato:
            &lt;add key="customLog" value="Contoso.SarbanesOxleyImplementation, Contoso" /&gt;
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerConfiguration.CustomArtifacts">
            <summary>
            Indica que o ícone utilizado na aplicação é customizado
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerConfiguration.AllowedFileExtensions">
            <summary>Indica as extenções de arquivos suportados por campos tipo arquivo.</summary>
            <remarks>
            podendo ser mais do que um (separados por vírgula): "DOC,DOT,XLS"
            caso nenhum seja especificado, é retornado uma string vaiza: ""
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerConfiguration.LinkDefinitionRepositoryMax">
            <summary>
            Quantidade máxima de PSTs (parâmetro da url com id dos contextos de navegação) mantidos em sessão
            </summary>
            <remarks>
            O UriBuilder serializa e persiste contextos de páginas na sessão para que em uma futura navegação esse contexto
            (criteria, visão, entidade, etc) seja recuperado através do guid informado no parametro de url PST.
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerConfiguration.ValidateFileSignature">
            <summary>
            Indica se deve validar a assinatura de arquivos (magic number) no upload.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerConfiguration.GeneratedPagesFolder">
            <summary>
            Caminho onde será salvo as páginas auto geradas
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerConfiguration.DisabledForgotPassword">
            <summary>
            Desabilita a opção de esqueceu sua senha da tela de login
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerConfiguration.DefaultTemplate">
            <summary>
            Identificado do template padrão para gerar páginas
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerConfiguration.PublicUrl">
            <summary>
            URL de acesso público ao aplicativo. 
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerConfiguration.CanNotChangePassword">
            <summary>
            Configuração que define se é possível alterar a senha do usuário
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerConfiguration.ViewStateBufferSize">
            <summary>
            Configuração que indica o tamanho do buffer (arquivos em disco) que o viewstate vai armazenar por usuário.
            Se a configuração não foi informada o valor padrão para o tamanho do buffer é 100.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerConfiguration.Log4NetPath">
            <summary>
            Caminho necessário que aponta para o arquivo de configuração do log4net 
            (vai pegar da pasta .exe do diretório do assembly do Global.cs)        
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerConfiguration.HideSystemVersionInErrorPage">
            <summary>
            A versão do sistema é considerado uma informação sensível em alguns relatórios Hack
            Nessa propriedade você remove a versão do sistema da tela de error
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Benner.Tecnologia.Common.BennerConfiguration.HideInternalMessageError" -->
        <!-- Badly formed XML comment ignored for member "P:Benner.Tecnologia.Common.BennerConfiguration.ClearCacheOnAuthorizationChanges" -->
        <member name="P:Benner.Tecnologia.Common.BennerConfiguration.LegacyWarmupMode">
            <summary>
            Faz o Warump do WES via Pool, rodando a sincronização de artefatos e WESApplicationComponent nos Providers.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.AggregateOperationOption">
            <summary>
            Indica o comportamento de campos na linha de rodapé do grid.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.AggregationOperationCollection.Item(System.String,Benner.Tecnologia.Common.AggregateOperationOption)">
            <summary>
            Retorna um parâmetro pelo nome.
            </summary>
            <param name="name">Nome do parâmetro que será retornado.</param>
        </member>
        <member name="P:Benner.Tecnologia.Common.DevelopmentEnvironment.Enabled">
            <summary>
            Indica se os botões do desenvolvedor e o papel desenvolvedor devem ser exibidos. default: true
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Criteria">
            <summary>
            Cria um objecto de criteria para a seleção de um conjunto de entidades.     
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Criteria.StartRowIndex">
            <summary>
            O número seqüencial do primeiro registro a ser lido.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Criteria.MaximumRows">
            <summary>
            A quantidade máxima de registros a serem lidos.
            </summary>
            <remarks>Utilize zero para não especificar um limite máximo.</remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.Criteria.SortExpression">
            <summary>
            Expressão a ser utilizada para ordenar os resultados.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Criteria.GroupExpression">
            <summary>
            Expressão a ser utilizada para agrupar os resultados.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Criteria.Where">
            <summary>
            Condição de filtragem dos resultados.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Criteria.LookupResultBehavior">
            <summary>
            Indica o comportamento para resolver campos de resultado de lookup.
            Caso o comportamento não seja informado, é assumido o comportamento padrão.
            </summary>
            <remarks>
            O comportamento pode ser informado pois em determinadas situações o campo de resultado de um lookup
            pode ser um campo tipo lookup, esta recursividade pode ir bem longe, porém, em determinadas situações
            é desnecessário resolver os campos de resultado de lookup.
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.Criteria.CompanyFilterMode">
            <summary>
            Modo de filtragem de empresa e filial. Definição padrão CompanyAndFilter
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Criteria.Parameters">
            <summary>
            Lista de parâmetros
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Criteria.AutoGenerateParameters">
            <summary>
            Gera os parâmetros para uma query ou stored procedure automaticamente
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Criteria.DisableImageLazyLoad">
            <summary>
            Permite desativar o carregamento dinâmico de imagens conforme o uso.
            Se true, carrega as imagens do banco juntamente com a entidade. Caso contrário somente quando o campo é acessado.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Criteria.AddWhereClause(System.String)">
            <summary>
            Adiciona uma cláusula no where
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Criteria.AddWhereClause(Benner.Tecnologia.Common.Handle)">
            <summary>
            Adiciona uma cláusula de igualdade de handle para a tabela principal da pesquisa.
            </summary>
            <param name="handle">Handle a ser pesquisado.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Criteria.AddWhereClause(System.Collections.Generic.List{Benner.Tecnologia.Common.Handle})">
            <summary>
            Adiciona uma cláusula de pertença a uma lista de handles para a tabela principal da pesquisa.
            </summary>
            <param name="handles">Coleção de Handles a serem pesquisados.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Criteria.AddWhereClause(System.String,System.Collections.Generic.List{Benner.Tecnologia.Common.Handle})">
            <summary>
            Adiciona uma cláusula de pertença a uma lista de handles para a tabela principal da pesquisa.
            </summary>
            <param name="handles">Coleção de Handles a serem pesquisados.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Criteria.AddWhereClause(System.String,Benner.Tecnologia.Common.Criteria.RestrictionsClause,System.Collections.Generic.List{Benner.Tecnologia.Common.Handle})">
            <summary>
            Adiciona uma cláusula de pertença a uma lista de handles para a tabela principal da pesquisa.
            </summary>
            <param name="handles">Coleção de Handles a serem pesquisados.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Criteria.AddWhereClause(System.String,System.String,System.Object)">
             <summary>
             Adiciona uma cláusula no where baseada em parâmetros.
             </summary>
             <param name="whereClause">Expressão lógica em linguagem SQL, utilizando o nome do parâmetro.</param>
             <param name="parameterName">Nome do parâmetro.</param>
             <param name="parameterValue">Valor do parâmetro.</param>
             <remarks>
             Esta forma de declaração previne ataques por injeção de SQL.
            
             O nome do parâmetro deve ser único.
            
             Exemplo: AddWhereClause("A.HANDLE=:HANDLE", "HANDLE", handle)
            
             A relação entre as cláusula é por AND.
             </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Criteria.AddWhereClause(System.String,Benner.Tecnologia.Common.Parameter)">
            <summary>
            Adiciona uma cláusula no where
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Criteria.AddWhereClause(System.String,System.Collections.Generic.List{Benner.Tecnologia.Common.Parameter})">
            <summary>
            Adiciona uma cláusula no where
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Criteria.AddWhereClause(Benner.Tecnologia.Common.WhereClause)">
            <summary>
            Adiciona uma cláusula no where
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Criteria.BuildInSqlClause(System.String,Benner.Tecnologia.Common.Criteria.RestrictionsClause,System.Collections.Generic.List{Benner.Tecnologia.Common.Handle})">
             <summary>
             Monta uma cláusula sql IN/NOT IN, quebrando-a em condições OR/AND quando houver muitos itens. É útil porque alguns bancos têm limite para a quantidade de itens dentro dos parênteses de uma clásula IN (250 em Sybase, 1000 em Oracle, por exemplo). 
             </summary>
             <returns></returns>
             <param name="fieldName">Exemplo "A.NOME"</param>
             <param name="rangeClause">Se deve quebrar os item com a IN (OR) ou com NOT IN (AND)</param>
             <param name="handleList">Lista de handles que serão utilizadas no IN</param>
             <example>
             string inClause = Criteria.BuildInSqlClause("A.HANDLE", listHandles);
             
             // desta forma será montado uma string semelhante ao seguinte:
             "(A.HANDLE IN (6,5,7,9,14))"
             
             // caso exista mais de 250 itens selecionados, para contornar limitações de alguns bancos, será criado uma nova clausula IN, separada por OR:
             "(A.HANDLE IN (6,5,7,9,14,...) OR A.HANDLE IN (65,298,457,1,5,...))"
            
             // caso o <paramref name="rangeClause"/> for NOT IN e exista mais de 250 itens selecionados, será criado separado por AND:
             "(A.HANDLE NOT IN (6,5,7,9,14,...) AND A.HANDLE NOT IN (65,298,457,1,5,...))"
             </example>
        </member>
        <member name="M:Benner.Tecnologia.Common.Criteria.GetWhereClause">
            <summary>
            Retorna as informacoes do criteria no tipo WhereClause (compatibilidade)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Criteria.ClearWhere">
            <summary>
            Apaga somente o Where do Criteria
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Criteria.ClearWhere(System.Boolean)">
            <summary>
            Apaga o Where do Criteria
            </summary>
            <param name="clearParameters">Marca se deve apagar os parâmetros também</param>
        </member>
        <member name="P:Benner.Tecnologia.Common.Criteria.NoCompanyFilter">
            <summary>
            Criteria sem filtro de empresa e filial. 
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.CustomArtifactsLevel">
            <summary>
            Classe utilizada para identificar uma camada de customização de artefatos
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.CustomArtifactsLevel.Level">
            <summary>
            Indica qual a camada os artefatos deste objeto pertecem
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.CustomArtifactsLevel.LevelText">
            <summary>
            Obtém o texto referente à camada deste objeto
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.CustomArtifactsLevel.MasterPage">
            <summary>
            Indica se há customização de Master Page
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.CustomArtifactsLevel.MasterPageName">
            <summary>
            Obtém o nome do arquivo da master page
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.CustomArtifactsLevel.SearcherConfig">
            <summary>
            Indica se há customização de Searcher Config
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.CustomArtifactsLevel.SearcherConfigName">
            <summary>
            Obtém o nome do arquivo do Searcher Config
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.CustomArtifactsLevel.LoginPage">
            <summary>
            Indica se há customização da página de Login
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.CustomArtifactsLevel.LoginPageName">
            <summary>
            Obtém o nome do arquivo da página de login
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.CustomArtifactsLevel.Favicon">
            <summary>
            Indica se há customização para o ícone de favorito
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.CustomArtifactsLevel.FaviconExtension">
            <summary>
            Indica a extensão do arquivo de ícone
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.CustomArtifactsLevel.FaviconName">
            <summary>
            Obtém o nome do arquivo de ícone (Favicon)
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.CustomArtifactsLevel.CustomCss">
            <summary>
            Indica se há customização do CustomCss
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.CustomArtifactsLevel.CustomCssName">
            <summary>
            Obtém o nome do arquivo de CustomCss
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.CustomArtifactsLevel.DefaultPage">
            <summary>
            Indica se há customização da página default.aspx
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.CustomArtifactsLevel.DefaultPageName">
            <summary>
            Obtém o nome do arquivo da página default.aspx
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.CustomArtifactsLevel.PreviousCustomization">
            <summary>
            Indica se há um nível de customização anterior ao atual
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.CustomArtifactsLevel.#ctor(Benner.Tecnologia.Common.CustomizationLevel)">
            <summary>
            Construtor já preenchendo a camada de customização
            </summary>
            <param name="level">Camada de customização dos artefatos</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.CustomArtifactsLevel.SetCustomArtifact(System.String,Benner.Tecnologia.Common.CustomArtifactsType)">
            <summary>
            Atribui valor a um artefato customizado, caso não encontre nesta camada ele buscará recursivamente nas camadas anteriores
            </summary>
            <param name="fileName">Nome do arquivo customizado</param>
            <param name="type">Tipo do arquivo customizado</param>
            <returns>Retorna o objeto que teve seu artefato customizado atribuído</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.CustomArtifactsLevel.HasCustomArtifact(Benner.Tecnologia.Common.CustomArtifactsType)">
            <summary>
            Verifica se o tipo de artefato enviado por parâmetro está customizado
            </summary>
            <param name="type">Tipo de artefato</param>
            <returns>True caso o artefato esteja customizado, caso contrário retorna false</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.CustomArtifactsLevel.CustomArtifactName(Benner.Tecnologia.Common.CustomArtifactsType)">
            <summary>
            Busca o nome do artefato indicado no parâmetro
            </summary>
            <param name="type">Tipo de artefato</param>
            <returns>Retorna o nome do artefato</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.CustomArtifactsLevel.GetLatestArtifactName(Benner.Tecnologia.Common.CustomArtifactsType)">
            <summary>
            Obtém o nome do arquivo customizado de acordo com o tipo informado no parâmetro
            </summary>
            <param name="type">Tipo do artefato customizado</param>
            <returns>Retorna o nome do artefato customizado cujo tipo foi enviado por parâmetro+</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.DataReaderBase">
            <summary>
            Classe base para leitura rápida de dados
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataReaderBase.CreateDataReaderService">
            <summary>
            Factory do serviço do DataReader
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataReaderBase.OpenDataReaderService(System.String,Benner.Tecnologia.Common.ParameterCollection)">
            <summary>
            Abre o serviço do DataReader
            </summary>
            <param name="commandText">Comando SQL de consulta que será executado.</param>
            <param name="ParameterCollection">Parâmetros. Pode ser nulo.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataReaderBase.GetInternalEnumerator(Benner.Tecnologia.Common.IDataReaderService)">
            <summary>
            Obtém o enumerador do DataReader para percorrer os registros
            </summary>
            <returns>Instância de IEnumerator de DataReaderRecord</returns> 
        </member>
        <member name="P:Benner.Tecnologia.Common.DataReaderBase.FieldCount">
            <summary>
            Retorna o número de colunas do DataReader. Retorna zero se o DataReader ainda não foi aberto.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataReaderBase.GetFieldName(System.Int32)">
            <summary>
            Obtém o nome do campo
            </summary>
            <param name="index">Índice do campo baseado em 0</param>
            <returns>Valor string com o nome do campo</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataReaderBase.GetDataType(System.Int32)">
            <summary>
            Obtém o tipo do campo
            </summary>
            <param name="index">Índice do campo baseado em 0</param>
            <returns>Valor DataType com o tipo do campo</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.DataReaderField">
            <summary>
            Representa um campo do registro do DataReader.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.DataReaderField.FieldName">
            <summary>
            Obtém o nome do campo.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.DataReaderField.IsNull">
            <summary>
            Retorna True se o valor do campo for nulo. 
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataReaderField.GetString">
            <summary>
            Obtém o valor do campo e tenta convertê-lo para String.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataReaderField.GetDecimal">
            <summary>
            Obtém o valor do campo e tenta convertê-lo para Decimal.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataReaderField.GetDateTime">
            <summary>
            Obtém o valor do campo e tenta convertê-lo para DateTime.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataReaderField.GetInt32">
            <summary>
            Obtém o valor do campo e tenta convertê-lo para Int32.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataReaderField.GetInt64">
            <summary>
            Obtém o valor do campo e tenta convertê-lo para long.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataReaderField.GetBytes">
            <summary>
            Obtém o valor do campo e tenta convertê-lo para byte[].
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataReaderField.GetValue">
            <summary>
            Obtém o valor do campo
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataReaderField.GetDataType">
            <summary>
            Obtém o tipo de dado que esse campo representa.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.DataReaderFields">
            <summary>
            Classe que define os campos disponíveis em um registro (DataReaderRecord) do DataReader
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.DataReaderRecord">
            <summary>
            Representa um registro que é obtido pelo DataReader.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.DataReaderRecord.FieldCount">
            <summary>
            Total de colunas presentes no registro.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.DataReaderRecord.Item(System.String)">
            <summary>
            Obtém pelo Nome informações sobre a coluna.
            </summary>
            <param name="fieldName">Nome do campo (coluna) a ser obtido</param>
        </member>
        <member name="P:Benner.Tecnologia.Common.DataReaderRecord.Item(System.Int32)">
            <summary>
            Obtém pelo Índice informações sobre a coluna.
            </summary>
            <param name="index"></param>
        </member>
        <member name="T:Benner.Tecnologia.Common.DataSources.DataSourceDefinitionCacheProvider">
            <summary>
            Cache de definições de consultas
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.DataSourceDefinitionCacheProvider.GetDefinition(System.String)">
            <summary>
            Obtém uma consulta do cache
            </summary>
            <param name="dataSourceId">Id da consulta</param>
            <returns>Instância da consulta ou nulo se não existir no cache</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.DataSourceDefinitionCacheProvider.SetDefinition(System.String,Benner.Tecnologia.Common.DataSources.Definition.DataSourceDefinition)">
            <summary>
            Obtém uma consulta do cache
            </summary>
            <param name="dataSourceId">Id da consulta</param>
            <param name="dataSourceDefinition">Instância da consulta</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.DataSourceDefinitionCacheProvider.ClearDefinition(System.String)">
            <summary>
            Remove uma consulta do cache
            </summary>
            <param name="dataSourceId">Id da consulta</param>
        </member>
        <member name="T:Benner.Tecnologia.Common.DataSources.DataSourceDefinitionSerializer">
            <summary>
            Helper para Serializador/deserializador de DataSourceDefinition
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.DataSourceDefinitionSerializer.Serialize(Benner.Tecnologia.Common.DataSources.Definition.DataSourceDefinition)">
            <summary>
            Serializa um DataSource para XML retornando o XML numa string
            </summary>
            <param name="dataSourceDefinition">Instância de DataSourceDefinition</param>
            <returns>String contendo o XML que representa o DataSourceDefinition</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.DataSourceDefinitionSerializer.Deserialize(System.String)">
            <summary>
            Deserializa um DataSource de uma string XML retornando a instância do DataSourceDefinition
            </summary>
            <param name="dataSourceDefinitionXml">String contendo o XML do DataSourceDefinition</param>
            <returns>Instância do DataSourceDefinition</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.DataSources.DataSourceReader">
            <summary>
            Executor de DataSources
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.DataSources.DataSourceReader.FieldCount">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.DataSourceReader.GetFieldName(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.DataSourceReader.GetDataType(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Benner.Tecnologia.Common.DataSources.Definition.FieldBase">
            <summary>
            Representa a base de um Field do DataSource
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Definition.FieldBase.Alias">
            <summary>
            Nome da coluna na fonte de dados
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Definition.FieldBase.WhenNull">
            <summary>
            Valor retornado quando a coluna for nula
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Definition.FieldBase.FieldClass">
            <summary>
            Tipo/classe da coluna
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.DataSources.Definition.FieldBase.FieldClassSpecified">
            <summary>
            Indica ao serializador se a propriedade FieldClass deve ser serializada
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Definition.FieldBase.From">
            <summary>
            Tabela (ou comando Sql) de origem
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Definition.FieldBase.InternalAggregateOption">
            <summary>
            Operação de agregação para o campo (utilizado para processamento interno)
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.FieldBase.#ctor">
            <summary>
            Construtor padrão utilizado pelo XmlSerializer
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.FieldBase.#ctor(System.String,System.String,Benner.Tecnologia.Common.DataSources.Definition.FieldValue)">
            <summary>
            Construtor
            </summary>
            <param name="alias">Alias do campo</param>
            <param name="from">Origem</param>
            <param name="whenNull">Valor retornado quando coluna for nula</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.FieldBase.GetFieldBaseSql(System.String,Benner.Tecnologia.Common.DataSources.IDataSourceParameterGenerator,Benner.Tecnologia.Common.DataSources.IDataSourceSqlResources)">
            <summary>
            Retorna a string SQL do campo considerando uma expressão SQL passada
            </summary>
            <param name="fieldExpression">Expressão SQL que representa a coluna</param>
            <param name="parameterGenerator">Gerador de parâmetros</param>
            <param name="sqlResources">SQL Resources para multibanco</param>
            <returns>String SQL</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.FieldBase.ToSql(Benner.Tecnologia.Common.DataSources.IDataSourceParameterGenerator,Benner.Tecnologia.Common.DataSources.IDataSourceSqlResources)">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.FieldBase.Resolve(Benner.Tecnologia.Common.DataSources.IDataSourceFieldEngine)">
            <summary>
            Processa o campo utilizando um FieldEngine
            </summary>
            <param name="engine">FieldEngine</param>
        </member>
        <member name="T:Benner.Tecnologia.Common.DataSources.Definition.FieldValue">
            <summary>
            Valor de um campo
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.DataSources.Definition.FieldValue.Value">
            <summary>
            Valor
            </summary>        
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.FieldValue.ToSql(Benner.Tecnologia.Common.DataSources.IDataSourceParameterGenerator,Benner.Tecnologia.Common.DataSources.IDataSourceSqlResources)">
            <inheritdoc />
        </member>
        <member name="T:Benner.Tecnologia.Common.DataSources.Definition.DecimalField">
            <summary>
            Coluna de uma fonte de dados
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.DataSources.Definition.DecimalField.FieldDecimalsFormat">
            <summary>
            Representa a quantidade de dígitos de um campo Decimal.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.DecimalField.#ctor">
            <summary>
            Construtor padrão utilizado pelo XmlSerializer
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.DecimalField.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Construtor 
            </summary>
            <param name="alias">Nome da coluna</param>
            <param name="from">Origem</param>
            <param name="path">Caminho</param>
            <param name="fieldDecimalsFormat">Numero de dígitos de precisão</param>
        </member>
        <member name="T:Benner.Tecnologia.Common.DataSources.Definition.ISqlable">
            <summary>
            O objeto é conversível para SQL
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.ISqlable.ToSql(Benner.Tecnologia.Common.DataSources.IDataSourceParameterGenerator,Benner.Tecnologia.Common.DataSources.IDataSourceSqlResources)">
            <summary>
            Converte para SQL
            </summary>
            <param name="parameterGenerator">Gerador de parâmetros</param>
            <param name="sqlResources">SqlResources para suporte multibanco</param>
            <returns>String SQL</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.DataSources.Definition.DateField">
            <summary>
            Coluna de uma fonte de dados
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.DataSources.Definition.DateField.FieldDateFormat">
            <summary>
            Representa o formato de data de um campo Date.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.DataSources.Definition.DateField.FieldTimeFormat">
            <summary>
            Representa o formato de hora de um campo Date.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.DateField.#ctor">
            <summary>
            Construtor padrão utilizado pelo XmlSerializer
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.DateField.#ctor(System.String,System.String,System.String,Benner.Tecnologia.Common.FieldDateFormat,Benner.Tecnologia.Common.FieldTimeFormat)">
            <summary>
            Construtor 
            </summary>
            <param name="alias">Nome da coluna</param>
            <param name="from">Origem</param>
            <param name="path">Caminho</param>
            <param name="fieldDateFormat">Formato de data de campos Date</param>
            <param name="fieldTimeFormat">Formato de hora de campos Date</param>
            
        </member>
        <member name="T:Benner.Tecnologia.Common.DataSources.Definition.SqlField">
            <summary>
            Coluna de uma fonte de dados
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Definition.SqlField.SqlExpression">
            <summary>
            Expressão SQL
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.SqlField.#ctor">
            <summary>
            Construtor padrão utilizado pelo XmlSerializer
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.SqlField.#ctor(System.String,System.String,System.String)">
            <summary>
            Construtor 
            </summary>
            <param name="alias">Nome da coluna</param>
            <param name="from">Origem, será utilizado em eventuais @CAMPO na expressão SQL</param>
            <param name="sqlExpression">Expressão SQL</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.SqlField.#ctor(System.String,System.String,System.String,Benner.Tecnologia.Common.DataSources.Definition.FieldValue)">
            <summary>
            Construtor 
            </summary>
            <param name="alias">Nome da coluna</param>
            <param name="from">Origem, será utilizado em eventuais @CAMPO na expressão SQL</param>
            <param name="sqlExpression">Expressão SQL</param>
            <param name="whenNull">Valor retornado quando coluna for nula</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.SqlField.#ctor(System.String,System.String,System.String,Benner.Tecnologia.Common.DataSources.Definition.FieldValue,Benner.Tecnologia.Common.Cac.ColumnClass)">
            <summary>
            Construtor 
            </summary>
            <param name="alias">Nome da coluna</param>
            <param name="from">Origem, será utilizado em eventuais @CAMPO na expressão SQL</param>
            <param name="sqlExpression">Expressão SQL</param>
            <param name="whenNull">Valor retornado quando coluna for nula</param>
            <param name="fieldClass">Tipo do campo</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.SqlField.GetSqlExpressionWithAliasField">
            <summary>
            Troca todos os @CAMPO(A.CAMPODATABELA) da proriedade SqlExpression para A.CAMPODATABELA
            </summary>
            <returns>Uma string com a troca feita</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.SqlField.ToSql(Benner.Tecnologia.Common.DataSources.IDataSourceParameterGenerator,Benner.Tecnologia.Common.DataSources.IDataSourceSqlResources)">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.SqlField.Resolve(Benner.Tecnologia.Common.DataSources.IDataSourceFieldEngine)">
            <inheritdoc />
        </member>
        <member name="T:Benner.Tecnologia.Common.DataSources.Definition.FieldCondition">
            <summary>
            Condição de coluna (COLUNA1 = COLUNA2)
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Definition.FieldCondition.From2">
            <summary>
            Origem (Tabela/Sql)
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Definition.FieldCondition.Path2">
            <summary>
            Campo
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.FieldCondition.#ctor">
            <summary>
            Construtor padrão para o XmlSerializer
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.FieldCondition.#ctor(System.String,System.String,Benner.Tecnologia.Common.DataSources.Definition.ConditionOp,System.String,System.String)">
            <summary>
            Construtor
            </summary>
            <param name="from">Origem (Tabela)</param>
            <param name="path">Campo</param>
            <param name="op">Operador</param>
            <param name="from2">Origem - lado direito (Tabela)</param>
            <param name="path2">Camppo - lado direto</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.FieldCondition.ToSql(Benner.Tecnologia.Common.DataSources.IDataSourceParameterGenerator,Benner.Tecnologia.Common.DataSources.IDataSourceSqlResources)">
            <inheritdoc />
        </member>
        <member name="T:Benner.Tecnologia.Common.DataSources.Definition.ConditionOp">
            <summary>
            Operador da condição do filtro
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.DataSources.Definition.ConditionOpHelper">
            <summary>
            Classe utilitária para o ConditionOp
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.ConditionOpHelper.ToSqlOperator(Benner.Tecnologia.Common.DataSources.Definition.ConditionOp)">
            <summary>
            Converte para o operador Sql
            </summary>
            <param name="op">Operador do Filtro</param>
            <returns>String SQL com o operador</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.DataSources.Definition.DataSourceDefinition">
            <summary>
            Representa uma fonte de dados. Serializável para XML
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Definition.DataSourceDefinition.From">
            <summary>
            Tabela ou Sql principal da fonte de dados
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Definition.DataSourceDefinition.Joins">
            <summary>
            Lista de Joins
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.DataSources.Definition.DataSourceDefinition.JoinsSpecified">
            <summary>
            Indica ao XmlSerializer se a tag Joins deve ser serializada
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Definition.DataSourceDefinition.Fields">
            <summary>
            Colunas da fonte de dados
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Definition.DataSourceDefinition.Filter">
            <summary>
            Lista de filtros da fonte de dados
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.DataSources.Definition.DataSourceDefinition.FilterSpecified">
            <summary>
            Indica ao XmlSerializer se a tag Filters deve ser gerada
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Definition.DataSourceDefinition.PredefinedFilters">
            <summary>
            Filtros pré-definidos
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.DataSources.Definition.DataSourceDefinition.PredefinedFiltersSpecified">
            <summary>
            Indica ao XmlSerializer se a tag PredefiniedFilters deve ser gerada
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Definition.DataSourceDefinition.OrderBy">
            <summary>
            OrderBy
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.DataSources.Definition.DataSourceDefinition.OrderBySpecified">
            <summary>
            Indica ao XmlSerializer se a tag OrderBy deve ser gerada
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.DataSourceDefinition.#ctor">
            <summary>
            Construtor padrão da fonte de dados
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.DataSourceDefinition.GetByEntityDefinitionName(System.String)">
            <summary>
            Obtém definição da consulta pelo nome da definição de entidade
            </summary>
            <param name="entityDefinitionName">Nome da definição de entidade</param>
            <returns>Instância de DataSourceDefinition</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.DataSourceDefinition.GetById(System.String)">
            <summary>
            Obtém definição da consulta pela identificação da consulta
            </summary>
            <param name="dataSourceDefinitionName">Identificação da consulta</param>
            <returns>Instância de DataSourceDefinition</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.DataSourceDefinition.HasCriteriaQueryFunction">
            <summary>
            Identifica se há um @CRITERIOSELECAO na definição da consulta
            </summary>
            <returns>Retorna true se existir @CRITERIOSELECAO, caso contrário false.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.DataSourceDefinition.HasFixedOrderBy">
            <summary>
            Identifica se a consulta é um comando SQL com Order By fixo no próprio comando SQL
            </summary>
            <returns>Retorna true se a consulta é um comando SQL com Order By fixo, caso contrário, false.</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.DataSources.Definition.Field">
            <summary>
            Coluna de uma fonte de dados
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Definition.Field.Path">
            <summary>
            Coluna física. Também pode ser informado um caminho respeitando o formato CAMPO>TABELA.RESULTADO
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Definition.Field.InternalIsLookupResultField">
            <summary>
            É um campo resultado de um lookup (uso interno)
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Definition.Field.InternalLookupResultTableName">
            <summary>
            Tabela do campo resultado do Lookup (uso interno)
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.Field.#ctor">
            <summary>
            Construtor padrão utilizado pelo XmlSerializer
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.Field.#ctor(System.String,System.String,System.String)">
            <summary>
            Construtor 
            </summary>
            <param name="alias">Nome da coluna</param>
            <param name="from">Origem</param>
            <param name="path">Caminho</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.Field.#ctor(System.String,System.String,System.String,Benner.Tecnologia.Common.DataSources.Definition.FieldValue)">
            <summary>
            Construtor 
            </summary>
            <param name="alias">Nome da coluna</param>
            <param name="from">Origem</param>
            <param name="path">Caminho</param>
            <param name="whenNull">Valor retornado quando coluna for nula</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.Field.#ctor(System.String,System.String,System.String,Benner.Tecnologia.Common.DataSources.Definition.FieldValue,Benner.Tecnologia.Common.Cac.ColumnClass)">
            <summary>
            Construtor 
            </summary>
            <param name="alias">Nome da coluna</param>
            <param name="from">Origem</param>
            <param name="path">Caminho</param>
            <param name="whenNull">Valor retornado quando coluna for nula</param>
            <param name="fieldClass">Tipo do campo</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.Field.ToSql(Benner.Tecnologia.Common.DataSources.IDataSourceParameterGenerator,Benner.Tecnologia.Common.DataSources.IDataSourceSqlResources)">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.Field.Resolve(Benner.Tecnologia.Common.DataSources.IDataSourceFieldEngine)">
            <inheritdoc />
        </member>
        <member name="T:Benner.Tecnologia.Common.DataSources.Definition.ConditionBase">
            <summary>
            Classe base de uma condição de filtro
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Definition.ConditionBase.From">
            <summary>
            Origem (Tabela ou SQL)
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Definition.ConditionBase.Path">
            <summary>
            Coluna
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Definition.ConditionBase.Op">
            <summary>
            Operador
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.ConditionBase.#ctor">
            <summary>
            Construtor padrão para o XmlSerializer
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.ConditionBase.#ctor(System.String,System.String,Benner.Tecnologia.Common.DataSources.Definition.ConditionOp)">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.DataSources.Definition.ValueCondition">
            <summary>
            Condição de filtro onde é informado um valor
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Definition.ValueCondition.Values">
            <summary>
            Possíveis valores
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.DataSources.Definition.ValueCondition.ValuesSpecified">
            <summary>
            Indica ao XmlSerializer se Values deve ser serializado
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.DataSources.Definition.DataSourceFilter">
            <summary>
            Filtro
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Definition.DataSourceFilter.Name">
            <summary>
            Nome do filtro
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Definition.DataSourceFilter.Op">
            <summary>
            Operador lógico utilizado entre as condições (Itens) do Filtro
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.DataSources.Definition.DataSourceFilter.OpSpecified">
            <summary>
            Indica ao XmlSerializer se a tag Op deve ser serializada
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Definition.DataSourceFilter.Conditions">
            <summary>
            Lista de condições do Filtro
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.DataSources.Definition.DataSourceFilter.ItemsSpecified">
            <summary>
            Indica ao XmlSerializer se a tag Items deve ser gerada
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.DataSourceFilter.ToSql(Benner.Tecnologia.Common.DataSources.IDataSourceParameterGenerator,Benner.Tecnologia.Common.DataSources.IDataSourceSqlResources)">
            <inheritdoc />
        </member>
        <member name="T:Benner.Tecnologia.Common.DataSources.Definition.FilterOp">
            <summary>
            Operador utilizado nas condições do filtro
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Definition.FilterOp.And">
            <summary>
            Exige que todas as condições sejam satisfeitas
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Definition.FilterOp.Or">
            <summary>
            Exige que pelo menos uma das condições seja satisfeita
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.DataSources.Definition.FilterOpHelper">
            <summary>
            Classe utilitária para o FilterOp
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.FilterOpHelper.ToSqlOperator(Benner.Tecnologia.Common.DataSources.Definition.FilterOp)">
            <summary>
            Converte para o operador Sql
            </summary>
            <param name="op">Operador do Filtro</param>
            <returns>String SQL com o operador</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.DataSources.Definition.InnerJoin">
            <summary>
            Representa um Right Inner Join
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.InnerJoin.#ctor">
            <summary>
            Construtor padrão para o XmlSerializer
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.InnerJoin.#ctor(Benner.Tecnologia.Common.DataSources.Definition.SourceBase)">
            <summary>
            Construtor
            </summary>
            <param name="from">Tabela/Sql</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Benner.Tecnologia.Common.DataSources.Definition.InnerJoin.GetJoinString" -->
        <member name="T:Benner.Tecnologia.Common.DataSources.Definition.JoinBase">
            <summary>
            Classe abstrata para Joins
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Definition.JoinBase.From">
            <summary>
            Tabela/Sql de Origem 
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.JoinBase.GetJoinString">
            <summary>
            Retorna a string SQL do Join
            </summary>
            <returns>String com o SQL para o Join</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.JoinBase.#ctor">
            <summary>
            Construtor padrão para o XmlSerializer
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.JoinBase.#ctor(Benner.Tecnologia.Common.DataSources.Definition.SourceBase)">
            <summary>
            Construtor
            </summary>
            <param name="from">Tabela/Sql</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.JoinBase.ToSql(Benner.Tecnologia.Common.DataSources.IDataSourceParameterGenerator,Benner.Tecnologia.Common.DataSources.IDataSourceSqlResources)">
            <inheritdoc />
        </member>
        <member name="T:Benner.Tecnologia.Common.DataSources.Definition.LeftOuterJoin">
            <summary>
            Representa um Right Inner Join
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.LeftOuterJoin.#ctor">
            <summary>
            Construtor padrão para o XmlSerializer
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.LeftOuterJoin.#ctor(Benner.Tecnologia.Common.DataSources.Definition.SourceBase)">
            <summary>
            Construtor
            </summary>
            <param name="from">Tabela/Sql</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Benner.Tecnologia.Common.DataSources.Definition.LeftOuterJoin.GetJoinString" -->
        <member name="T:Benner.Tecnologia.Common.DataSources.Definition.SourceBase">
            <summary>
            Classe abstrata para representar a Origem dos dados
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Definition.SourceBase.Alias">
            <summary>
            Alias que será para referenciar esta origem
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.SourceBase.#ctor">
            <summary>
            Construtor padrão para o XmlSerializer
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.SourceBase.#ctor(System.String)">
            <summary>
            Construtor
            </summary>
            <param name="alias">Alias que será para referenciar esta origem</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.SourceBase.ToSql(Benner.Tecnologia.Common.DataSources.IDataSourceParameterGenerator,Benner.Tecnologia.Common.DataSources.IDataSourceSqlResources)">
            <inheritdoc />
        </member>
        <member name="T:Benner.Tecnologia.Common.DataSources.Definition.Sql">
            <summary>
            Representa uma origem de comando Sql SELECT
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Definition.Sql.SelectCommand">
            <summary>
            Comando Sql SELECT
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.Sql.#ctor">
            <summary>
            Construtor padrão para o XmlSerializer
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.Sql.#ctor(System.String,System.String)">
            <summary>
            Construtor
            </summary>
            <param name="alias">Alias que será utilizado para referenciar esta origem</param>
            <param name="selectCommand">Comando SELECT</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.Sql.ToSql(Benner.Tecnologia.Common.DataSources.IDataSourceParameterGenerator,Benner.Tecnologia.Common.DataSources.IDataSourceSqlResources)">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.Sql.HasCriteriaFunction">
            <summary>
            Identifica se há um @CRITERIOSELECAO no comando SQL
            </summary>
            <returns>Retorna true se existir @CRITERIOSELECAO, caso contrário false.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.Sql.HasOrderBy">
            <summary>
            Identifica se há um ORDER BY no comando SQL
            </summary>
            <returns>Retorna true se existir @ORDER BY, caso contrário false.</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.DataSources.Definition.Table">
            <summary>
            Representa uma origem de tabela no banco de dados
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Definition.Table.Name">
            <summary>
            Nome da tabela
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.Table.#ctor">
            <summary>
            Construtor padrão para o XmlSerializer
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.Table.#ctor(System.String,System.String)">
            <summary>
            Construtor
            </summary>
            <param name="alias">Alias que será utilizado para referenciar esta origem</param>
            <param name="name">Nome da tabela</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Definition.Table.ToSql(Benner.Tecnologia.Common.DataSources.IDataSourceParameterGenerator,Benner.Tecnologia.Common.DataSources.IDataSourceSqlResources)">
            <inheritdoc />
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Engine.FieldsRegexConsts.Lookup">
            <summary>
            Expressão GenSQL, ex: CAMPO>TABELA.CAMPO>TABELA.CAMPO...
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Engine.FieldsRegexConsts.TableField">
            <summary>
            Campo da tabela principal, ex: A.CAMPO
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Engine.FieldsRegexConsts.AnyField">
            <summary>
            Qualquer campo, ex: XYZ.CAMPO
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Engine.FieldsRegexConsts.Condition">
            <summary>
            Condição SQL (=, LIKE, IS, etc)
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Engine.FieldsRegexConsts.Value">
            <summary>
            Valor. Aceita parâmetros (:PARAM), string ('Texto'), funções (@FUNC(XPTO)) e demais literais numéricas e identificadores (999, CAMPO, TABELA.CAMPO).
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Engine.FieldsRegexConsts.Between">
            <summary>
            BETWEEN, ex: BETWEEN :DATAINICIAL AND :DATAFINAL
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Engine.FieldsRegexConsts.Parameter">
            <summary>
            Parâmetro, ex: :PARAM
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Engine.FieldsRegexConsts.String">
            <summary>
            Literal string, ex: 'Texto'
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Engine.FieldsRegexConsts.Function">
            <summary>
            Função, ex: @AGORA, @DATA(25/12/2008), @MAIUSCULAS(:PARAM), @MAIUSCULAS('Texto'), @FUNCAO('Texto', :PARAM)
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Engine.FieldsRegexConsts.FunctionName">
            <summary>
            Nome de função, ex: @FUNCAO, @FUNCAO[1]
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Engine.FieldsRegexConsts.FunctionArgument">
            <summary>
            Argumento de função incluindo os parentesis da função, ex: ('Texto'), (:PARAM) ou (XYZ.TABELA) 
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Engine.FieldsRegexConsts.FunctionMultiArguments">
            <summary>
            Múltiplos argumentos de função incluindo os parentesis da função, ex: ('Texto', :PARAM)
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Engine.FieldsRegexConsts.NumberOrIdentifier">
            <summary>
            Números ou identificadores, ex: 999, TABELA.CAMPO, CAMPO
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Engine.FieldsRegexConsts.Space">
            <summary>
            Espaços (podem ou não existir)
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Engine.FieldsRegexConsts.ExpressionRegex">
            <summary>
            Representa XYZ.CAMPO ou CAMPO>TABELA.CAMPO>TABELA.CAMPO
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataSources.Engine.FieldsRegexConsts.FieldConditionRegex">
            <summary>
            Representa CAMPO>TABELA.CAMPO>TABELA.CAMPO = VALOR
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.DataSources.Engine.IdentifierGenerator">
            <summary>
            Gerador de identificadores sequenciais para comandos SQL
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Engine.IdentifierGenerator.#ctor(System.String)">
            <summary>
            Construtor
            </summary>
            <param name="prefix">Prefixo do identificador</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Engine.IdentifierGenerator.GetCurrent">
            <summary>
            Obtém último identificador gerado
            </summary>
            <returns>Identificador</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Engine.IdentifierGenerator.GetNext">
            <summary>
            Gera um novo identificador e retorna.
            </summary>
            <returns>Novo identificador</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Engine.IdentifierGenerator.Reset">
            <summary>
            Reinicia a geração de identificadores
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.DataSources.Engine.DataSourceDefinitionEngine">
            <summary>
            Gerador de comando SQL de uma fonte de dados
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Engine.DataSourceDefinitionEngine.#ctor(Benner.Tecnologia.Common.DataSources.Engine.FieldEngine,Benner.Tecnologia.Common.DataSources.IDataSourceSqlResources)">
            <summary>
            Construtor
            </summary>
            <param name="fieldEngine">Processador dos campos PathField</param>
            <param name="sqlResources">SQL Resources para suporte multibanco</param>
        </member>
        <member name="P:Benner.Tecnologia.Common.DataSources.Engine.DataSourceDefinitionEngine.SelectCommand">
            <summary>
            Comando Sql gerado
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.DataSources.Engine.DataSourceDefinitionEngine.SelectCountCommand">
            <summary>
            Comando Sql para Count(*)
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.DataSources.Engine.DataSourceDefinitionEngine.Parameters">
            <summary>
            Parâmetros gerados
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.DataSources.Engine.DataSourceDefinitionEngine.Filters">
            <summary>
            Filtros extras que serão utilizados
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Engine.DataSourceDefinitionEngine.Process(Benner.Tecnologia.Common.DataSources.Definition.DataSourceDefinition)">
            <summary>
            Processa um DataSourceDefinition gerando o comando SQL e os parâmetros
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Engine.DataSourceDefinitionEngine.Process(Benner.Tecnologia.Common.DataSources.Definition.DataSourceDefinition,Benner.Tecnologia.Common.AggregationOperationCollection)">
            <summary>
            Processa um DataSourceDefinition gerando o comando SQL agregado e os parâmetros
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.DataSources.Engine.FieldEngine">
            <summary>
            Processador de campos
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.DataSources.Engine.FieldEngine.ResolvedFields">
            <summary>
            Campos resolvidos 
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.DataSources.Engine.FieldEngine.ResolvedJoins">
            <summary>
            Joins resolvidos
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Engine.FieldEngine.ResolveSqlField(Benner.Tecnologia.Common.DataSources.Definition.SqlField)">
            <summary>
            Processa uma instância de SqlField
            </summary>
            <param name="sqlField">Instância do SqlField</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Engine.FieldEngine.ResolvePathField(Benner.Tecnologia.Common.DataSources.Definition.Field)">
            <summary>
            Processa uma instância de Field e gera os campos e joins finais necessários nas propriedades ResolvedFields e ResolvedJoins
            </summary>
            <param name="field">Instância de Field</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Engine.FieldEngine.GetResolvedWherePathField(System.String,System.String,Benner.Tecnologia.Common.DataSources.IDataSourceSqlResources)">
            <summary>
            Obtém o campo resolvido a partir de um PathField
            </summary>
            <param name="from">Tabela principal</param>
            <param name="path">Path do campo a resolver</param>
            <param name="sqlResources">Sql Resourcse para multibanco</param>
            <returns>Retorna o campo resolvido a partir de um path</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.DataSources.Engine.ParameterGenerator">
            <summary>
            Gerador de parâmetros de SQL
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Engine.ParameterGenerator.#ctor(Benner.Tecnologia.Common.ParameterCollection)">
            <summary>
            Construtor
            </summary>
            <param name="parameters">Coleção de parâmetros que será preenchida</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Engine.ParameterGenerator.AddStringParameter(System.String)">
            <summary>
            Adiciona parâmetro string
            </summary>
            <param name="value">Valor do parâmetro</param>
            <returns>Nome do parâmetro no SQL</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Engine.ParameterGenerator.AddLongParameter(System.Int64)">
            <summary>
            Adiciona parâmetro Long
            </summary>
            <param name="value">Valor do parâmetro</param>
            <returns>Nome do parâmetro no SQL</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Engine.ParameterGenerator.AddDecimalParameter(System.Decimal)">
            <summary>
            Adiciona parâmetro Decimal
            </summary>
            <param name="value">Valor do parâmetro</param>
            <returns>Nome do parâmetro no SQL</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSources.Engine.ParameterGenerator.AddDateTimeParameter(System.DateTime)">
            <summary>
            Adiciona parâmetro DateTime
            </summary>
            <param name="value">Valor do parâmetro</param>
            <returns>Nome do parâmetro no SQL</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.DataSources.Engine.ResolvedFieldInfo">
            <summary>
            Representa um PathField resolvido no FieldEngine
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.DxColumnDefinition">
            <summary>
            Definição de classe fieldDefinition do componente de PivotGrid da DevExtreme
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.DataReaderRecordEntityProvider">
            <summary>
            Transforma DataReaderRecord de um DataReader em uma Entidade
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataReaderRecordEntityProvider.#ctor(Benner.Tecnologia.Common.DataReaderRecord,Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.LookupResultBehavior,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Inicializa o transformador de um DataReaderRecord
            </summary>
            <param name="record">DataReaderRecord com os dados de origem</param>
            <param name="entityDefinition">Definição da entidade</param>
            <param name="lookupBehavior">Comportamento da tradução dos lookups</param>
            <param name="transitoryData">Dados transitórios</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataReaderRecordEntityProvider.GetFieldValue(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.DataReaderRecordEntityProvider.HasField(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.DataReaderRecordEntityProvider.ProcessField(Benner.Tecnologia.Common.EntityBase,Benner.Tecnologia.Common.FieldDefinition,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.DataReaderRecordEntityProvider.SetAggregationFieldProperties(Benner.Tecnologia.Common.NameValueDictionary,System.String,System.String,Benner.Tecnologia.Common.AggregationFieldDefinition)">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.DataReaderRecordEntityProvider.SetAssociationFieldProperties(Benner.Tecnologia.Common.NameValueDictionary,System.String,System.String,Benner.Tecnologia.Common.AssociationFieldDefinition)">
            <inheritdoc />
        </member>
        <member name="T:Benner.Tecnologia.Common.DataRowEntityProvider">
            <summary>
            Transforma um DataSet em uma Entidade
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataRowEntityProvider.InitializeEntity">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.DataRowEntityProvider.ProcessField(Benner.Tecnologia.Common.EntityBase,Benner.Tecnologia.Common.FieldDefinition,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.DataRowEntityProvider.GetFieldValue(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.DataRowEntityProvider.HasField(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.DataRowEntityProvider.SetEntityProperties(Benner.Tecnologia.Common.EntityBase)">
            <summary>
            Este método carrega as propriedades da entidade que estão nas ExtendedProperties do DataSet.
            </summary>
            <param name="entity">Entidade destino</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataRowEntityProvider.SetCommonProperties(Benner.Tecnologia.Common.EntityBase,System.String)">
            <summary>
            Este método carrega as propriedades comuns a todos os campos que estão nas Extendend Properties do dataSet
            </summary>
            <param name="entity">Entidade destino</param>
            <param name="fieldName">Campo</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataRowEntityProvider.SetAssociationFieldProperties(Benner.Tecnologia.Common.NameValueDictionary,System.String,System.String,Benner.Tecnologia.Common.AssociationFieldDefinition)">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.DataRowEntityProvider.SetAggregationFieldProperties(Benner.Tecnologia.Common.NameValueDictionary,System.String,System.String,Benner.Tecnologia.Common.AggregationFieldDefinition)">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.DataRowEntityProvider.SetEntityFieldLocalWhere(Benner.Tecnologia.Common.NameValueDictionary,System.String,System.String,System.String)">
            <summary>
            Este método faz a atribuição do LocalWhere e WebLocalWhere em campos Lookup e Filtro
            </summary>
            <param name="dataRow"></param>
            <param name="entity"></param>
            <param name="sourceFieldName"></param>
            <param name="handleFieldAlias"></param>
        </member>
        <member name="T:Benner.Tecnologia.Common.EntityProviderBase">
            <summary>
            Transforma dados em uma Entidade
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityProviderBase.EntityDefinition">
            <summary>
            Definição da entidade que deve ser criada
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityProviderBase.LookupBehavior">
            <summary>
            Comportamento ao resolver os campos de resultado do Lookup
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityProviderBase.TransitoryData">
            <summary>
            Dados transitórios, serão copiados para a nova entidade
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Benner.Tecnologia.Common.EntityProviderBase.ResultFieldIndex" -->
        <member name="F:Benner.Tecnologia.Common.EntityProviderBase.HandleFieldIndex">
            <summary>
            Índice do handle, utilizado para montar o alias
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityProviderBase.#ctor(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.LookupResultBehavior,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Inicialização basica do transformador de dados
            </summary>
            <param name="entityDefinition">Definição da entidade</param>
            <param name="lookupBehavior">Comportamento da tradução dos lookups</param>
            <param name="transitoryData">Dados transitórios</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityProviderBase.GetEntityBase">
            <summary>
            Obtém a entidade a partir dos dados fornecidos.
            </summary>
            <returns>Uma instância da entidade.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityProviderBase.InitializeEntity">
            <summary>
            Inicialização da entidade que irá receber os dados
            </summary>
            <returns>Entidade pré inicializada</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityProviderBase.ProcessField(Benner.Tecnologia.Common.EntityBase,Benner.Tecnologia.Common.FieldDefinition,System.Int32)">
            <summary>
            Executado a cada vez que um campo é processado
            </summary>
            <param name="entity">Entidade que irá receber os dados</param>
            <param name="fieldDefinition">Definição do campo que está sendo processado</param>
            <param name="associationLevel">Nivel do lookup, caso seja necessário resolver os resultados do lookup</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityProviderBase.GetFieldValue(System.String)">
            <summary>
            Obtém o valor de um campo a partir dos dados fornecidos
            </summary>
            <param name="fieldName">Nome do campo</param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityProviderBase.HasField(System.String)">
            <summary>
            Indica se os dados de origem possuem o campo passado
            </summary>
            <param name="fieldName">Nome do campo</param>
            <returns>True se os dados de origem possuem o valor do campo passado</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityProviderBase.SetAssociationFieldProperties(Benner.Tecnologia.Common.NameValueDictionary,System.String,System.String,Benner.Tecnologia.Common.AssociationFieldDefinition)">
            <summary>
            Chamado quando é necessário configurar propriedades extras dos campos Lookup
            </summary>
            <param name="entityFields">Campos da entidade destino</param>
            <param name="sourceFieldName">Campo lookup</param>
            <param name="targetFieldAlias">Apelido do campo resultado</param>
            <param name="targetFieldDefinition">Definição do campo resultado</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityProviderBase.SetAggregationFieldProperties(Benner.Tecnologia.Common.NameValueDictionary,System.String,System.String,Benner.Tecnologia.Common.AggregationFieldDefinition)">
            <summary>
            Chamado quando é necessário configurar propriedades extras dos campos Filtro
            </summary>
            <param name="entityFields">Campos da entidade destino</param>
            <param name="sourceFieldName">Campo lookup</param>
            <param name="targetFieldAlias">Apelido do campo resultado</param>
            <param name="targetFieldDefinition">Definição do campo resultado</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityProviderBase.CallSetEntityFieldValue(Benner.Tecnologia.Common.NameValueDictionary,Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.FieldDefinition,System.String,System.String,System.Int32)">
            <summary>
            Este método faz a chamada do método de atribuição do valor de um campo na lista de campos de uma entidade - Pode ser recursivo, dependendo da situação. Deve ser chamado de dentro do ProcessField.
            </summary>
            <param name="dataRow">Registro com os dados de origem.</param>
            <param name="entity">Entidade na qual será atribuido os valores do dataRow.</param>
            <param name="targetEntityDefinition">Definição da entidade do campo que deve ser atribuído</param>
            <param name="targetFieldDefinition">A definição do campo que deve ser atribuido.</param>
            <param name="targetFieldAlias">O apelido do campo no dataRow - Utilizado quando é uma chamada recursiva de um campo lookup.</param>
            <param name="sourceFieldName">O campo lookup de origem, da tabela principal - Utilizado quando é uma chamada recursiva de um campo lookup.</param>
            <param name="associationLevel">Nivel do lookup, caso seja necessário resolver os resultados do lookup</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityProviderBase.SetEntityFieldValue(Benner.Tecnologia.Common.NameValueDictionary,Benner.Tecnologia.Common.EntityDefinition,System.String,Benner.Tecnologia.Common.FieldDefinition)">
            <summary>
            Este método faz a atribuição do valor de um campo na lista de campos de uma entidade.
            </summary>
            <param name="entityFields">Lista de campos da entidade.</param>
            <param name="targetEntityDefinition">Definição da entidade na qual será atribuido o valor</param>
            <param name="targetFieldAlias">O apelido do campo nos dados de origem.</param>
            <param name="targetFieldDefinition">A definição do campo que deve ser atribuido.</param>
        </member>
        <member name="T:Benner.Tecnologia.Common.DataSource">
            <summary>
            Possibilita o uso de uma Consulta como fonte de dados de entidades.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.DataSource.Definition">
            <summary>
            Definição da fonte de dados.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.DataSource.InSerializationTest">
            <summary>
            Para testes automatizados de serialização no bef
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSource.#ctor">
            <summary>
            Cria uma instância de DataSourceSource.
            </summary>
            <overloads>
            Cria uma instância de DataSourceSource.
            </overloads>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSource.#ctor(Benner.Tecnologia.Common.DataSources.Definition.DataSourceDefinition,System.Boolean)">
            <summary>
            Cria uma instância de DataSourceSource.
            </summary>
            <param name="dataSourceDefinition">Definição da fonte de dados.</param>
            <param name="lgpdTraceRequired">Indica se este DataSource deve gerar log de rastreamento de LGPD</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.DataSource.#ctor(System.String,Benner.Tecnologia.Common.DataSources.Definition.DataSourceDefinition,System.Boolean)">
            <summary>
            Cria uma instância de DataSourceSource.
            </summary>
            <param name="systemInstanceName">Nome da instância do sistema fonte dos dados.</param>
            <param name="dataSourceDefinition">Definição da fonte de dados.</param>
            <param name="lgpdTraceRequired">Indica se este DataSource deve gerar log de rastreamento de LGPD</param>
        </member>
        <member name="T:Benner.Tecnologia.Common.EntityPageVisualizationDefinition">
            <summary>
            Definições de visualização de uma página na interface com o usuário.
            </summary>
            <remarks>
            Na camada de negócios, este objeto serve apenas para configurar um novo estado para o campo e não para verificar o seu estado atual. 
            Alterações nas propriedades deste objeto serão refletidas na interface, mas as alterações na interface não serão refletidas neste objeto. 
            Não é recomendado verificar o estado do campo para tomar decisões de negócio.
            </remarks>
        </member>
        <member name="E:Benner.Tecnologia.Common.EntityPageVisualizationDefinition.VisibleChanged">
            <summary>
            Evento disparado quando a propriedade Visible do objeto é alterada.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityPageVisualizationDefinition.Name">
            <summary>
            Nome do campo.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityPageVisualizationDefinition.Data">
            <summary>
            Uso interno. Informações serializáveis
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityPageVisualizationDefinition.Visible">
            <summary>
            Determina se o campo será visível ao usuário.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.IEntityFieldVisualizationDefinition">
            <summary>
            Definições de visualização de um campo na interface com o usuário.
            </summary>
            <remarks>
            Na camada de negócios, este objeto serve apenas para configurar um novo estado para o campo e não para verificar o seu estado atual. 
            Alterações nas propriedades deste objeto serão refletidas na interface, mas as alterações na interface não serão refletidas neste objeto. 
            Não é recomendado verificar o estado do campo para tomar decisões de negócio.
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.IEntityFieldVisualizationDefinition.Label">
            <summary>
            Rótulo do campo na interface com o usuário
            </summary>
            <remarks>
            Na camada de negócios, este objeto serve apenas para configurar um novo estado para o campo e não para verificar o seu estado atual. 
            Alterações nas propriedades deste objeto serão refletidas na interface, mas as alterações na interface não serão refletidas neste objeto. 
            Não é recomendado verificar o estado do campo para tomar decisões de negócio.
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.IEntityFieldVisualizationDefinition.Mask">
            <summary>
            Máscara de edição do campo na interface
            </summary>
            <remarks>
            Na camada de negócios, este objeto serve apenas para configurar um novo estado para o campo e não para verificar o seu estado atual. 
            Alterações nas propriedades deste objeto serão refletidas na interface, mas as alterações na interface não serão refletidas neste objeto. 
            Não é recomendado verificar o estado do campo para tomar decisões de negócio.
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.IEntityFieldVisualizationDefinition.ReadOnly">
            <summary>
            Determina se o campo poderá ser alterado pelo usuário na interface
            </summary>
            <remarks>
            Na camada de negócios, este objeto serve apenas para configurar um novo estado para o campo e não para verificar o seu estado atual. 
            Alterações nas propriedades deste objeto serão refletidas na interface, mas as alterações na interface não serão refletidas neste objeto. 
            Não é recomendado verificar o estado do campo para tomar decisões de negócio.
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.IEntityFieldVisualizationDefinition.Required">
            <summary>
            Determina se o campo será requerido ao usuário (Válido apenas para interface com o usuário)
            </summary>
            <remarks>
            Na camada de negócios, este objeto serve apenas para configurar um novo estado para o campo e não para verificar o seu estado atual. 
            Alterações nas propriedades deste objeto serão refletidas na interface, mas as alterações na interface não serão refletidas neste objeto. 
            Não é recomendado verificar o estado do campo para tomar decisões de negócio.
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.IEntityFieldVisualizationDefinition.Tooltip">
            <summary>
            Dica do campo na interface com o usuário
            </summary>
            <remarks>
            Na camada de negócios, este objeto serve apenas para configurar um novo estado para o campo e não para verificar o seu estado atual. 
            Alterações nas propriedades deste objeto serão refletidas na interface, mas as alterações na interface não serão refletidas neste objeto. 
            Não é recomendado verificar o estado do campo para tomar decisões de negócio.
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.IEntityFieldVisualizationDefinition.Visible">
            <summary>
            Determina se o campo será visível na interface do usuário.
            </summary>
            <remarks>
            Na camada de negócios, este objeto serve apenas para configurar um novo estado para o campo e não para verificar o seu estado atual. 
            Alterações nas propriedades deste objeto serão refletidas na interface, mas as alterações na interface não serão refletidas neste objeto. 
            Não é recomendado verificar o estado do campo para tomar decisões de negócio.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.IEntityFieldVisualizationDefinition.SetTabVisible(System.Int32,System.Boolean)">
            <summary>
            Configura visibilidade de tab na interface do usuário.
            </summary>
            <param name="tabIndex">Índice do Tab</param>
            <param name="visible">Visivel</param>
            <remarks>
            Na camada de negócios, este objeto serve apenas para configurar um novo estado para o campo e não para verificar o seu estado atual. 
            Alterações nas propriedades deste objeto serão refletidas na interface, mas as alterações na interface não serão refletidas neste objeto. 
            Não é recomendado verificar o estado do campo para tomar decisões de negócio.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.IEntityFieldVisualizationDefinition.SetTabVisibleByValue(System.Int32,System.Boolean)">
            <summary>
            Configura visibilidade de tab na interface do usuário, pelo valor da Tab.
            </summary>
            <param name="value">Valor do Tab</param>
            <param name="visible">Visivel</param>
            <remarks>
            Na camada de negócios, este objeto serve apenas para configurar um novo estado para o campo e não para verificar o seu estado atual. 
            Alterações nas propriedades deste objeto serão refletidas na interface, mas as alterações na interface não serão refletidas neste objeto. 
            Não é recomendado verificar o estado do campo para tomar decisões de negócio.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.IEntityFieldVisualizationDefinition.SetRadioItemVisibleByValue(System.String,System.Boolean)">
            <summary>
            Configura visibilidade de um RadioItem na interface do usuário, pelo valor da RadioItem.
            </summary>
            <param name="value">Valor do RadioItem</param>
            <param name="visible">Visível</param>
            <remarks>
            Na camada de negócios, este objeto serve apenas para configurar um novo estado para o campo e não para verificar o seu estado atual. 
            Alterações nas propriedades deste objeto serão refletidas na interface, mas as alterações na interface não serão refletidas neste objeto. 
            Não é recomendado verificar o estado do campo para tomar decisões de negócio.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.IEntityFieldVisualizationDefinition.SetListItemVisibleByValue(System.Int32,System.Boolean)">
            <summary>
            Configura visibilidade de um RadioItem na interface do usuário, pelo valor da RadioItem.
            </summary>
            <param name="value">Valor do RadioItem</param>
            <param name="visible">Visível</param>
            <remarks>
            Na camada de negócios, este objeto serve apenas para configurar um novo estado para o campo e não para verificar o seu estado atual. 
            Alterações nas propriedades deste objeto serão refletidas na interface, mas as alterações na interface não serão refletidas neste objeto. 
            Não é recomendado verificar o estado do campo para tomar decisões de negócio.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.IEntityFieldVisualizationDefinition.SetRadioItemVisible(System.String,System.Boolean)">
            <summary>
            Configura visibilidade de um ListItem na interface do usuário.
            </summary>
            <param name="listItemIndex"></param>
            <param name="visible"></param>
            <remarks>
            Na camada de negócios, este objeto serve apenas para configurar um novo estado para o campo e não para verificar o seu estado atual. 
            Alterações nas propriedades deste objeto serão refletidas na interface, mas as alterações na interface não serão refletidas neste objeto. 
            Não é recomendado verificar o estado do campo para tomar decisões de negócio.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.IEntityFieldVisualizationDefinition.SetListItemVisible(System.Int32,System.Boolean)">
            <summary>
            Configura visibilidade de um ListItem na interface do usuário.
            </summary>
            <param name="listItemIndex"></param>
            <param name="visible"></param>
            <remarks>
            Na camada de negócios, este objeto serve apenas para configurar um novo estado para o campo e não para verificar o seu estado atual. 
            Alterações nas propriedades deste objeto serão refletidas na interface, mas as alterações na interface não serão refletidas neste objeto. 
            Não é recomendado verificar o estado do campo para tomar decisões de negócio.
            </remarks>
        </member>
        <member name="T:Benner.Tecnologia.Common.IEntityFunctionVisualizationDefinition">
            <summary>
            Definições de visualização de uma função na interface com o usuário.
            </summary>
            <remarks>
            Na camada de negócios, este objeto serve apenas para configurar um novo estado para a função e não para verificar o seu estado atual. 
            Alterações nas propriedades deste objeto serão refletidas na interface, mas as alterações na interface não serão refletidas neste objeto. 
            Não é recomendado verificar o estado da função para tomar decisões de negócio.
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.IEntityFunctionVisualizationDefinition.Enabled">
            <summary>
            Determina se a função poderá ser acionada pelo usuário.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.IEntityFunctionVisualizationDefinition.Visible">
            <summary>
            Determina se a função será visível ao usuário.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.IEntityPageVisualizationDefinition">
            <summary>
            Definições de visualização de uma página na interface com o usuário.
            </summary>
            <remarks>
            Na camada de negócios, este objeto serve apenas para configurar um novo estado para a página e não para verificar o seu estado atual. 
            Alterações nas propriedades deste objeto serão refletidas na interface, mas as alterações na interface não serão refletidas neste objeto. 
            Não é recomendado verificar o estado da página para tomar decisões de negócio.
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.IEntityPageVisualizationDefinition.Visible">
            <summary>
            Determina se o campo será visível ao usuário.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.EntityBase">
             <summary>Classe base dos objetos de negócio.</summary>
             <remarks>
             EntityBase é a classe mais abstrata, que deve ser utilizada quando não há informação
             sobre o tipo específico que está sendo manipulado. Isto porque as classes específicas
             não são "Entity", mas são "EntityBase".
            
             EntityBase&lt;T&gt; é a classe a partir da qual as classes derivadas (específicas) devem ser
             construídas. Ela adiciona métodos de classe que trabalham com o tipo específico.
            
             Entity é uma classe derivada que representa uma entidade não específica. Esta classe
             deve ser utilizada pelo código do framework quando precisar criar ou obter uma entidade
             que não seja de um tipo específico.
             </remarks>    
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityBase.State">
            <summary>
            Estado da entidade em relação à persistência.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityBase.IsEditingOrCreating">
            <summary>
            Se a entidade está em edição, pode estar sendo criada ou alterada (State == EntityState.Editing || State == EntityState.Initialized).
            </summary>
            <returns>True se o estado da entidade é <see cref="F:Benner.Tecnologia.Common.EntityState.Editing"/> ou <see cref="F:Benner.Tecnologia.Common.EntityState.Initialized"/></returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityBase.IsCreating">
            <summary>
            Se a entidade está sendo criada (State = EntityState.Initialized).
            </summary>
            <returns>True se o estado da entidade é <see cref="F:Benner.Tecnologia.Common.EntityState.Initialized"/></returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityBase.IsEditing">
            <summary>
            Se a entidade está sendo editada (State = EntityState.Editing)
            </summary>
            <returns>True se o estado da entidade é <see cref="F:Benner.Tecnologia.Common.EntityState.Editing"/></returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityBase.IsContextCached">
            <summary>
            Define se a entidade foi colocada em cache por um EntityCacheContext.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityBase.Fields">
            <summary>Lista de campos da entidade (Dados).</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityBase.RecordReadOnly">
            <summary>Indica se o registro foi marcado como somente leitura (RecordReadOnly = true) na regra de negócio.</summary>
            <remarks>A interface não deve permitir qualquer alteração no conteúdo do registro - deixando todos os campos como somente leitura - mesmo assim, o registro pode ser excluído.</remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityBase.TableReadOnly">
            <summary>Indica se a tabela foi marcada como somente leitura (TableReadOnly = true) na regra de negócio.</summary>
            <remarks>A interface não deve permitir qualquer alteração na tabela.</remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityBase.OutputMessage">
            <summary>
            Registra mensagens para serem exibidas ao usuário.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityBase.Visualization">
            <summary>
            Definições da visualização da entidade e de seus comportamentos na interface com o usuário.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityBase.Definition">
            <summary>Definição da entidade.</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityBase.Handle">
            <summary>A chave primária da entidade.</summary>
            <remarks>É um handle inválido se não foi definida.</remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityBase.EntityContext">
            <summary>
            Contexto da entidade.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityBase.TransitoryData">
            <summary>
            Dicionário de dados transitórios.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityBase.ConfirmationAccepted">
            <summary>
            Indica se o mecanismo de RequestConfirmation deve ser ignorado ou não.
            </summary>
            <remarks>O valor padrão é true.</remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityBase.AutoEdit">
            <summary>
            Indica se a entidade irá entrar em modo de edição automaticamente quando um campo for alterado
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityBase.TransitoryVars">
            <summary>
            Dados transitórios que podem ser manipulados pelo desenvolvedor.
            </summary>
        </member>
        <member name="E:Benner.Tecnologia.Common.EntityBase.FieldChanging">
            <summary>
            Ocorre quando o valor de um campo da entidade está sendo alterado.
            </summary>
        </member>
        <member name="E:Benner.Tecnologia.Common.EntityBase.FieldChanged">
            <summary>
            Ocorre depois que o valor de um campo da entidade é alterado.
            </summary>
        </member>
        <member name="E:Benner.Tecnologia.Common.EntityBase.TableReadOnlyChanged">
            <summary>
            Ocorre ao alterar o TableReadOnly
            </summary>
        </member>
        <member name="E:Benner.Tecnologia.Common.EntityBase.RecordReadOnlyChanged">
            <summary>
            Ocorre ao alterar o RecordReadOnly
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase.Delete">
            <summary>
            Exclui a entidade.
            </summary>
            <remarks>Deve ter sido obtida previamente.</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase.AssertValidToSave">
            <summary>
            Valida que a entidade poder ser salva
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase.SetFieldValue(System.String,System.Object)">
            <summary>
            Seta o valor de um campo da entidade.
            </summary>
            <param name="fieldName">Nome do campo.</param>
            <param name="value">Valor.</param>
            <remarks>
            A função especial deste método é verificar a existência do campo na lista, inserindo-o caso não exista.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase.Save">
            <summary>
            Persiste a entidade.
            </summary>
            <returns>True se a entidade foi salva; False se a operação foi cancelada.</returns>
            <remarks>A operação depende do estado da entidade (nova ou alterada)
            e da origem dos dados (base de dados, web service, arquivo).</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase.InvokeCreate">
            <summary>
            Executa regra de negócio relativa à criação de uma nova entidade.
            </summary>
            <remarks>
            Este método é invocado pelo factory de entidades quando uma nova entidade é criada 
            e pode ser sobrescrito pela entidade de negócio para escrita de regra de negócio relativa a esta operação.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase.InvokeCreate(Benner.Tecnologia.Common.EntityBase)">
            <summary>
            Executa regra de negócio relativa à criação de uma nova entidade passando uma entidade que será clonada.
            </summary>
            <remarks>
            <param name="sourceEntity">Instância da entidade que será clonada para a nova entidade.</param>
            Este método é invocado pelo factory de entidades quando uma nova entidade é criada 
            e pode ser sobrescrito pela entidade de negócio para escrita de regra de negócio relativa a esta operação.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase.InvokeEdit">
            <summary>
            Executa regra de negócio relativa ao momento em que a entidade é colocada em edição.
            </summary>
            <remarks>
            Este método é invocado pelo factory de entidades quando uma entidade é resgatada para edição 
            e pode ser sobrescrito pela entidade de negócio para escrita de regra relativa a esta operação.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase.InvokeGet">
            <summary>
            Executa regra de negócio relativa ao momento em que a entidade é obtida.
            </summary>
            <remarks>
            Este método é invorado pelo factory de entidades quando uma entidade é resgatada
            e pode ser sobrescrito pela entidade de negócio para escrita de regra relativa a esta operação.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase.Refresh">
            <summary>
            Atualiza o conteúdo do objeto, buscando-o novamente da base de dados.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase.Call(System.String)">
            <summary>
            Executa uma função da entidade.
            </summary>
            <param name="functionName">Nome da função a ser executada.</param>
            <returns>Informações que são manipuladas durante a execução de uma função, independente de seu mecanismo.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase.Call(Benner.Tecnologia.Common.FunctionDefinition,Benner.Tecnologia.Common.EntityBase)">
            <summary>
            Executa uma função da entidade.
            </summary>
            <param name="functionDefinition">Definição da função a ser executada.</param>
            <param name="dataEntity">Dados adicionais a serem utilizados pela função (opcional).</param>
            <returns>Informações que são manipuladas durante a axecução de uma função, independente de seu mecanismo.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase.CallRecord(Benner.Tecnologia.Common.FunctionDefinition,Benner.Tecnologia.Common.EntityBase)">
            <summary>
            Executa uma função da entidade.
            </summary>
            <param name="functionDefinition">Definição da função a ser executada.</param>
            <param name="dataEntity">Dados adicionais a serem utilizados pela função (opcional).</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase.UpdateInstance(Benner.Tecnologia.Common.EntityBase)">
            <summary>
            Atualiza o estado da instância atual a partir do estado de uma outra instância.
            </summary>
            <param name="origem">O objeto cujo estado deve ser copiado para a instância atual.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase.Clone">
            <summary>
            Copia o objeto.
            </summary>
            <returns>Uma cópia "profunda" do objeto atual.</returns>
            <remarks>
            A propriedade Definition aponta para a mesma instância. As demais propriedades
            contém cópias dos dados originais, e não referências aos mesmos.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase.GetClone">
            <summary>
            Cria um clone do objeto.
            </summary>
            <returns>
            Um novo objeto contendo os dados do original.
            </returns>
            <remarks>
            A propriedade Definition aponta para a mesma instância. As demais propriedades
            contém cópias dos dados originais, e não referências aos mesmos.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase.ToString">
            <summary>
            Retorna o campo de resultado de lookup
            </summary>
            <remarks>
            Caso o campo não esteja na instância ele será carregado
            </remarks> 
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase.Call(System.String,Benner.Tecnologia.Common.EntityBase)">
            <summary>
            Executa uma função da entidade.
            </summary>
            <param name="functionName">Nome da função a ser executada.</param>
            <param name="dataEntity">Dados adicionais a serem utilizados pela função (opcional).</param>
            <returns>Informações que são manipuladas durante a execução de uma função, independente de seu mecanismo.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase.SetEntityDefinition(Benner.Tecnologia.Common.EntityDefinition)">
            <summary>
            Atualizar a definição de entidade
            </summary>
            <remarks>
            O objeto de definição da entidade recuperada necessita ser atualizado.
            Devido a definição de entidade não ser trafegada do serviço para o agent
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase.GetProperties">
            <summary>
            Returns the properties for this instance of a component.
            </summary>
            <returns>A PropertyDescriptorCollection that represents
            the properties for this component instance.</returns>
            <remarks>Implementers can return PropertyDescriptorCollection.Empty
            if no properties are specified. This method should never return a null reference
            (Nothing in Visual Basic).</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase.GetProperties(System.Attribute[])">
             <summary>
             Returns the properties for this instance of a component using the attribute array as a filter.
             </summary>
             <param name="attributes">An array of type Attribute that is used as a filter.</param>
             <returns>A PropertyDescriptorCollection that represents the filtered properties for this component instance.</returns>
             <remarks>Nesta implementação, o filtro por atributos é ignorado.
            
             PropertyDescriptorCollection.Empty é retornado se não houverem propriedades.</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Returns an object that contains the property described by the specified property descriptor.
            </summary>
            <param name="pd">A PropertyDescriptor that represents the property whose owner is to be found.</param>
            <returns>An Object that represents the owner of the specified property.</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.EntityBuilder">
            <summary>
            Classe com interface fluente para criação de mocks de EntityBase.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBuilder.#ctor">
            <summary>
            Classe com interface fluente para criação de mocks de EntityBase.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBuilder.AddString(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBuilder.AddDecimal(System.String,System.Nullable{System.Decimal})">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBuilder.AddInteger(System.String,System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBuilder.AddBoolean(System.String,System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBuilder.AddDateTime(System.String,System.Nullable{System.DateTime})">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBuilder.AddAssociation(System.String,Benner.Tecnologia.Common.IEntityBase)">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBuilder.AddAggregation(System.String,Benner.Tecnologia.Common.IEntityBase[])">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBuilder.AddAggregation(System.String,Benner.Tecnologia.Common.Handle[])">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBuilder.AddList(System.String,Benner.Tecnologia.Common.ListItem)">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBuilder.AddList(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBuilder.AddRadio(System.String,Benner.Tecnologia.Common.RadioItem)">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBuilder.AddRadio(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBuilder.AddTab(System.String,Benner.Tecnologia.Common.TabItem)">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBuilder.AddTab(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBuilder.AddFile(System.String,Benner.Tecnologia.Common.FileField)">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBuilder.AddImage(System.String,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBuilder.AddBit(System.String,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBuilder.Build">
            <summary>
            Constrói uma instância falsa de IEntityBase conforme definido
            </summary>
            <returns>Instância de IEntityBase</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.EntityBuilder`1">
            <summary>
            Classe com interface fluente para a criação de mocks de IEntityBase.
            </summary>
            <typeparam name="T">IEntityBase que será mockada.</typeparam>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBuilder`1.Build">
            <summary>
            Criar um mock da IEntityBase informada.
            </summary>
            <returns>Instância de uma classe com base na IEntityBase informada.</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.EntityContext">
            <summary>
            Contexto mantido para uma instância de uma entidade durante o seu ciclo de vida.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.IEntities">
            <summary>
            Lista de entidades
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.EntitiesOnDemand">
            <summary>
            Lista de entidades com carregamento sob demanda
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntitiesOnDemand.#ctor">
            <summary>
            Cria lista de entidades vazia, sem carga sob demanda
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntitiesOnDemand.#ctor(System.Collections.Generic.IEnumerable{Benner.Tecnologia.Common.EntityBase})">
            <summary>
            Cria lista de entidades que serão carregadas sob demanda a medida que a lista for percorrida.
            </summary>
            <param name="source">IEnumerable do qual as entidades serão carregadas sob demanda.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntitiesOnDemand.Dispose">
            <summary>
            Libera a lista fechando também o enumerador eventualmente criado
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntitiesOnDemand.Insert(System.Int32,Benner.Tecnologia.Common.EntityBase)">
            <summary>
            Insere uma entidade na lista no índice especificado
            </summary>
            <param name="index">Índice no qual deve ser inserido o item</param>
            <param name="item">Entidade que será inserida</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntitiesOnDemand.RemoveAt(System.Int32)">
            <summary>
            Remove uma entidade baseada no índice
            </summary>
            <param name="index">Índice a ser removido</param>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntitiesOnDemand.Item(System.Int32)">
            <summary>
            Atribui ou retorna uma entidade a partir de um índice
            </summary>
            <param name="index">Índice da entidade</param>
            <returns>Entidade</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntitiesOnDemand.Add(Benner.Tecnologia.Common.EntityBase)">
            <summary>
            Adiciona uma entidade na lista
            </summary>
            <param name="item">Entidade a ser adicionada</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntitiesOnDemand.Remove(Benner.Tecnologia.Common.EntityBase)">
            <summary>
            Remove a entidade da lista
            </summary>
            <param name="item">Entidade</param>
            <returns>Retorna true se foi encontrada e removida, caso contrário retorna false</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntitiesOnDemand.IndexOf(Benner.Tecnologia.Common.EntityBase)">
            <summary>
            Procura uma entidade na lista
            </summary>
            <param name="item">Entidade</param>
            <returns>Retorna o índice da entidade na lista, ou -1 se não foi encontrada.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntitiesOnDemand.Clear">
            <summary>
            Limpa a lista e libera o enumerador eventualmente criado
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntitiesOnDemand.Contains(Benner.Tecnologia.Common.EntityBase)">
            <summary>
            Verifica se entidade existe na lista
            </summary>
            <param name="item">Entidade</param>
            <returns>Retorna true se entidade foi encontrada, caso contrário retorna false</returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntitiesOnDemand.Count">
            <summary>
            Quantidade de entidades. Pode variar conforme vai carregando parcialmente.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntitiesOnDemand.IsReadOnly">
            <summary>
            Retorna true se a lista for readonly. 
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntitiesOnDemand.GetEnumerator">
            <summary>
            Obtém um enumerador para percorrer a lista
            </summary>
            <returns>Enumerador tipado com EntityBase</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntitiesOnDemand.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Obtém um enumerador para percorrer a lista
            </summary>
            <returns>Enumerador tipado com object</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntitiesOnDemand.LoadAll">
            <summary>
            Garante o carregamento de todas as entidades
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.IEntityBase">
            <summary>
            Interface padrão para entidades
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.IEntityBase.Handle">
            <summary>
            Handle da entidade
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.IEntityBase.Definition">
            <summary>
            Definição da entidade
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.IEntityBase.Item(System.String)">
            <summary>
            Acesso aos campos da entidade
            </summary>
            <param name="fieldName">Nome do campo</param>
            <returns>IEntityProperty com várias propriedades de acesso os valores e características do campo</returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.IEntityBase.State">
            <summary>
            Estado da entidade em relação à persistência.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.IEntityBase.IsCreating">
            <summary>
            Se a entidade está sendo criada (State = EntityState.Initialized).
            </summary>
            <returns>True se o estado da entidade é <see cref="F:Benner.Tecnologia.Common.EntityState.Initialized"/></returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.IEntityBase.IsEditing">
            <summary>
            Se a entidade está sendo editada (State = EntityState.Editing)
            </summary>
            <returns>True se o estado da entidade é <see cref="F:Benner.Tecnologia.Common.EntityState.Editing"/></returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.IEntityBase.IsEditingOrCreating">
            <summary>
            Se a entidade está em edição, pode estar sendo criada ou alterada (State == EntityState.Editing || State == EntityState.Initialized).
            </summary>
            <returns>True se o estado da entidade é <see cref="F:Benner.Tecnologia.Common.EntityState.Editing"/> ou <see cref="F:Benner.Tecnologia.Common.EntityState.Initialized"/></returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.IEntityBuilder">
            <summary>
            Interface fluente para criação de mocks de EntityBase.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.IEntityBuilder.AddHandle(Benner.Tecnologia.Common.Handle)">
            <summary>
            Adiciona um campo Handle na entidade.
            </summary>
            <param name="value">Valor do campo.</param>
            <returns>Interface fluente para criação de EntityBase.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.IEntityBuilder.AddString(System.String,System.String)">
            <summary>
            Adiciona um campo String na entidade.
            </summary>
            <param name="name">Nome do campo.</param>
            <param name="value">Valor do campo.</param>
            <returns>Interface fluente para criação de EntityBase.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.IEntityBuilder.AddDecimal(System.String,System.Nullable{System.Decimal})">
            <summary>
            Adiciona um campo Valor na entidade.
            </summary>
            <param name="name">Nome do campo.</param>
            <param name="value">Valor do campo.</param>
            <returns>Interface fluente para criação de EntityBase.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.IEntityBuilder.AddInteger(System.String,System.Nullable{System.Int64})">
            <summary>
            Adiciona um campo Inteiro na entidade.
            </summary>
            <param name="name">Nome do campo.</param>
            <param name="value">Valor do campo.</param>
            <returns>Interface fluente para criação de EntityBase.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.IEntityBuilder.AddBoolean(System.String,System.Nullable{System.Boolean})">
            <summary>
            Adiciona um campo Lógico na entidade.
            </summary>
            <param name="name">Nome do campo.</param>
            <param name="value">Valor do campo.</param>
            <returns>Interface fluente para criação de EntityBase.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.IEntityBuilder.AddDateTime(System.String,System.Nullable{System.DateTime})">
            <summary>
            Adiciona um campo Data na entidade.
            </summary>
            <param name="name">Nome do campo.</param>
            <param name="value">Valor do campo.</param>
            <returns>Interface fluente para criação de EntityBase.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.IEntityBuilder.AddAssociation(System.String,Benner.Tecnologia.Common.IEntityBase)">
            <summary>
            Adiciona um campo Tabela na entidade.
            </summary>
            <param name="name">Nome do campo.</param>
            <param name="entity">Entidade do campo Tabela.</param>
            <returns>Interface fluente para criação de EntityBase.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.IEntityBuilder.AddAggregation(System.String,Benner.Tecnologia.Common.IEntityBase[])">
            <summary>
            Adiciona um campo Filtro na entidade.
            </summary>
            <param name="name">Nome do campo.</param>
            <param name="entities">Entidades do filtro.</param>
            <returns>Interface fluente para criação de EntityBase.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.IEntityBuilder.AddAggregation(System.String,Benner.Tecnologia.Common.Handle[])">
            <summary>
            Adiciona um campo Filtro na entidade.
            </summary>
            <param name="name">Nome do campo.</param>
            <param name="handles">Handles do filtro.</param>
            <returns>Interface fluente para criação de EntityBase.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.IEntityBuilder.AddList(System.String,Benner.Tecnologia.Common.ListItem)">
            <summary>
            Adiciona um campo Lista na entidade.
            </summary>
            <param name="name">Nome do campo.</param>
            <param name="value">Valor do campo.</param>
            <returns>Interface fluente para criação de EntityBase.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.IEntityBuilder.AddList(System.String,System.Int32)">
            <summary>
            Adiciona um campo Lista na entidade.
            </summary>
            <param name="name">Nome do campo.</param>
            <param name="value">Valor do campo.</param>
            <returns>Interface fluente para criação de EntityBase.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.IEntityBuilder.AddRadio(System.String,Benner.Tecnologia.Common.RadioItem)">
            <summary>
            Adiciona um campo Radio na entidade.
            </summary>
            <param name="name">Nome do campo.</param>
            <param name="value">Valor do campo.</param>
            <returns>Interface fluente para criação de EntityBase.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.IEntityBuilder.AddRadio(System.String,System.String)">
            <summary>
            Adiciona um campo Radio na entidade.
            </summary>
            <param name="name">Nome do campo.</param>
            <param name="value">Valor do campo.</param>
            <returns>Interface fluente para criação de EntityBase.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.IEntityBuilder.AddTab(System.String,Benner.Tecnologia.Common.TabItem)">
            <summary>
            Adiciona um campo Tab na entidade.
            </summary>
            <param name="name">Nome do campo.</param>
            <param name="value">Valor do campo.</param>
            <returns>Interface fluente para criação de EntityBase.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.IEntityBuilder.AddTab(System.String,System.Int32)">
            <summary>
            Adiciona um campo Tab na entidade.
            </summary>
            <param name="name">Nome do campo.</param>
            <param name="value">Valor do campo.</param>
            <returns>Interface fluente para criação de EntityBase.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.IEntityBuilder.AddFile(System.String,Benner.Tecnologia.Common.FileField)">
            <summary>
            Adiciona um campo Arquivo na entidade.
            </summary>
            <param name="name">Nome do campo.</param>
            <param name="value">Valor do campo.</param>
            <returns>Interface fluente para criação de EntityBase.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.IEntityBuilder.AddImage(System.String,System.Byte[])">
            <summary>
            Adiciona um campo Figura na entidade.
            </summary>
            <param name="name">Nome do campo.</param>
            <param name="value">Valor do campo.</param>
            <returns>Interface fluente para criação de EntityBase.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.IEntityBuilder.AddBit(System.String,System.Nullable{System.Int32})">
            <summary>
            Adiciona um campo Bits na entidade.
            </summary>
            <param name="name">Nome do campo.</param>
            <param name="value">Valor do campo.</param>
            <returns>Interface fluente para criação de EntityBase.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.IEntityBuilder.Build">
            <summary>
            Cria uma nova entidade com base nos campos definidos.
            </summary>
            <returns>Retorna uma instância de IEntityBase.</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.IEntityBuilder`1">
            <summary>
            Interface fluente para a criação de mocks de IEntityBase
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Benner.Tecnologia.Common.IEntityBuilder`1.Build">
            <summary>
            Cria um mock da IEntityBase informada.
            </summary>
            <returns>Instância de uma classe com base na IEntityBase informada.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.IEntityCommandExecutor.Execute(Benner.Tecnologia.Common.IEntityCommand)">
            <summary>
            Executa o comando
            </summary>
            <param name="entityCommand">Comando</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.IEntityCommandExecutor.Execute(Benner.Tecnologia.Common.EntityCommandList)">
            <summary>
            Executa um lote de operações em uma única transação
            </summary>
            <remarks>A execução do comando Save (SaveEntityCommand) não garante que a entidade foi salva.
            Deve ser verificado se há mensagens de erro para cada entidade.</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.IEntityCommandExecutor.Execute(Benner.Tecnologia.Common.EntityCommandList,System.Collections.Generic.List{Benner.Tecnologia.Common.TransitoryData})">
            <summary>
            Executa um lote de operações em uma única transação
            </summary>
            <remarks>A execução do comando Save (SaveEntityCommand) não garante que a entidade foi salva.
            Deve ser verificado se há mensagens de erro para cada entidade.</remarks>
        </member>
        <member name="T:Benner.Tecnologia.Common.IListItemValue">
            <summary>
            Representa o valor de um campo List
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.IListItemValue.Value">
            <summary>
            Valor
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.IRadioItemValue">
            <summary>
            Representa o valor de um campo Radio
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.IRadioItemValue.Value">
            <summary>
            Valor
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.ITabItemValue">
            <summary>
            Representa o valor de um campo Tab
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.ITabItemValue.Value">
            <summary>
            Valor
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.EnterpriseServiceLibrary.SerializerHelper.SerializeResponse(Benner.Tecnologia.Common.EnterpriseServiceLibrary.Response)">
            <summary>
            Utiliza o NetDataContractSerializer para transformar Response em xml
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EnterpriseServiceLibrary.SerializerHelper.DeserializeResponse(System.String)">
            <summary>
            Utiliza o NetDataContractSerializer para transformar um xml em Response
            </summary>
            <param name="responseXmlContent"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EnterpriseServiceLibrary.SerializerHelper.SerializeRequest(Benner.Tecnologia.Common.EnterpriseServiceLibrary.Request)">
            <summary>
            Utiliza o NetDataContractSerializer para transformar Request em xml
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EnterpriseServiceLibrary.SerializerHelper.DeserializeRequest(System.String)">
            <summary>
            Utiliza o NetDataContractSerializer para transformar um xml em Request
            </summary>
            <param name="requestXmlContent"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EnterpriseServiceLibrary.DefaultSerializationBinder.BindToType(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Benner.Tecnologia.Common.EnterpriseServiceLibrary.KeyValuePair">
            <summary>
            Classe utilizada como dicionário de dados
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.EnterpriseServiceLibrary.Request">
            <summary>
            Classe base para uma requisição
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.EnterpriseServiceLibrary.Response">
            <summary>
            Classe base para uma resposta
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.EnterpriseServiceLibrary.ServiceVersion">
            <summary>
            Versao do servico
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.EntityExcelExporter">
            <summary>
            Exportar para excel 
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityExcelExporter.#ctor(System.String)">
            <summary>
            Inicializa a construção do arquivo excel
            </summary>
            <param name="fileName">Novo do arquivo</param>
            <param name="countColumns">Quantidade de colunas</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityExcelExporter.AddSheet(System.String)">
            <summary>
            Adicionar nova planilha
            </summary>
            <param name="title">Nome da planilha</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityExcelExporter.AddHeaderColumn(System.String)">
            <summary>
            Adiciona o titulo para uma coluna em negrito 
            </summary>
            <param name="title">Título a ser apresentado</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityExcelExporter.AddRow">
            <summary>
            Adiciona linha
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityExcelExporter.AddColumn(Benner.Tecnologia.Common.FieldDefinition,System.Object)">
            <summary>
            Adiciona um valor para a coluna
            </summary>
            <param name="fieldDefinition">Definição do campo</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityExcelExporter.GetAsExcelMemoryStream">
            <summary>
            obtem a matriz de bytes do arquivo
            </summary>
            <returns>matriz de bytes do arquivo</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityExcelExporter.Save">
            <summary>
            Salva o arquivo excel
            </summary>
            <returns>Caminho onde foi salvo o arquivo</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityExcelExporter.Dispose">
            <summary>
            Libera recursos alocados
            </summary>       
        </member>
        <member name="T:Benner.Tecnologia.Common.Exceptions.BlockedSystemExpection">
            <summary>
            Sistema ou usuários estão com o acesso bloqueado
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Exceptions.InvalidLayerException">
            <summary>
            Indica que algo está executando na camada incorreta.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.InvalidLayerException.#ctor">
            <summary>
            Serviço não disponível na camada atual
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.InvalidLayerException.#ctor(System.Type)">
            <summary>
            Serviço não disponível na camada atual
            </summary>
            <param name="serviceType">Tipo do serviço não disponível</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.InvalidLayerException.#ctor(System.String,Benner.Tecnologia.Common.Layer)">
            <summary>
            Serviço não disponível na camada informada
            </summary>
            <param name="serviceName">Nome do serviço não disponível</param>
            <param name="layer">Nome da camada que não possui o serviço</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.InvalidLayerException.#ctor(System.String)">
            <summary>
            Indica que a operação é inválida na camada informada, porém com uma mensagem própria.
            </summary>
            <param name="message">Mensagem</param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Exceptions.PathFieldSyntaxException">
            <summary>
            Problema na validação do PathField do FieldEngine
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Exceptions.HandleNotFoundException">
            <summary>
            Handle não encontrado.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Exceptions.LegacyReportEmitterException">
            <summary>
            Falha na emissão de relatórios legados.
            </summary>    
        </member>
        <member name="T:Benner.Tecnologia.Common.Exceptions.ProcessLogAbortedException">
            <summary>
            ProcessLog abortado pelo usuário.
            </summary>
            <summary>
            ProcessLog abortado pelo usuário.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.BadRequestException.#ctor">
            <summary>
            Cria um novo objeto de exceção.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.BadRequestException.#ctor(System.String)">
            <summary>
            Cria um novo objeto de exceção.
            </summary>
            <param name="message">Mensagem da exceção.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.BadRequestException.#ctor(System.String,System.Exception)">
            <summary>
            Cria um novo objeto de exceção.
            </summary>
            <param name="message">Mensagem da exceção.</param>
            <param name="inner">Exceção interna (original).</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.BadRequestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construtor de serialização.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Exceptions.ScriptUIException">
            <summary>
            Uma exceção indicando um problema durante a utilização do mecanismo de scripts de interface em C#.
            </summary>
            <remarks>
            Esta exceção pode indicar diversos problemas, tais como a
            impossibilidade de instanciar o mecanismo de scripts para a linguagem especificada,
            um erro de sintaxe ou uma operação inválida na lógica do script.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.ScriptUIException.#ctor">
            <summary>
            Cria um novo objeto de exceção.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.ScriptUIException.#ctor(System.String)">
            <summary>
            Cria um novo objeto de exceção.
            </summary>
            <param name="message">Mensagem da exceção.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.ScriptUIException.#ctor(System.String,System.Exception)">
            <summary>
            Cria um novo objeto de exceção.
            </summary>
            <param name="message">Mensagem da exceção.</param>
            <param name="inner">Exceção interna (original).</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.ScriptUIException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construtor de serialização.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Exceptions.StimulsoftReportEmitterException">
            <summary>
            Falha na emissão de relatórios do Stimulsoft.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Exceptions.ApplicationNotConfiguredException">
            <summary>
            Falha na autenticação
            </summary>    
        </member>
        <member name="T:Benner.Tecnologia.Common.Exceptions.ArtifactAlreadyImportedException">
            <summary>
            O erro ocorre quando um artefato já foi instalado no sistema
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Exceptions.EvictedAuthorizationCacheException">
            <summary>
            Exceção emitida quando percebemos que algum objeto de autorização deveria estar no cache porém não está.
            Isso pode acontecer quando algum item do cache (da categoria Authorization) acabou sendo despejado.
            Este tipo de exceção é tratado para perceber quando devemos reprocesar o cache de autorização.
            </summary>    
        </member>
        <member name="T:Benner.Tecnologia.Common.Exceptions.ExpiredPasswordException">
            <summary>
            Falha na autenticação
            </summary>    
        </member>
        <member name="T:Benner.Tecnologia.Common.Exceptions.DataIntegrityViolationException">
            <summary>
            A exceção que é gerada quando viola uma integridade do banco de dados.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Exceptions.TechnicalEntityServiceException">
            <summary>
            Exceção técnica em uma operação do serviço de dados.
            </summary>
            <remarks>
            Relacionada com a infra-estrutura de comunicação e protocolos.
            Por exemplo, quando o serviço não responde dentro do tempo esperado,
            ou quando ocorre um erro de comunicação.
            </remarks>
            <summary>
            Exceção técnica em uma operação do serviço de dados.
            </summary>
            <remarks>
            Relacionada com a infra-estrutura de comunicação e protocolos.
            Por exemplo, quando o serviço não responde dentro do tempo esperado,
            ou quando ocorre um erro de comunicação.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.TechnicalEntityServiceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construtor de serialização.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.TechnicalEntityServiceException.#ctor">
            <summary>
            Cria um novo objeto de exceção.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.TechnicalEntityServiceException.#ctor(System.String)">
            <summary>
            Cria um novo objeto de exceção.
            </summary>
            <param name="message">Mensagem da exceção.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.TechnicalEntityServiceException.#ctor(System.String,System.Exception)">
            <summary>
            Cria um novo objeto de exceção.
            </summary>
            <param name="message">Mensagem da exceção.</param>
            <param name="inner">Exceção interna (original).</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.TranslateSqlException.ThrowException(System.String,System.Exception)">
            <summary>
            Tradução das mensagens de erro de PK, FK.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.TranslateSqlException.IsOracleMessage(System.String)">
            <summary>
            Verifica se a mensagem é do Oracle
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Exceptions.ConfirmationRequiredException">
            <summary>
            Exceção emitida pelo serviço de entidades quando a macro solicita uma confirmação pelo usuário.
            Forma de suportar o legado RequestConfirmation.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.ConfirmationRequiredException.#ctor(System.String)">
            <summary>
            Cria um novo objeto de exceção.
            </summary>
            <param name="confirmationMessage">Mensagem de confirmação.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.ConfirmationRequiredException.#ctor(System.String,System.Exception)">
            <summary>
            Cria um novo objeto de exceção.
            </summary>
            <param name="confirmationMessage">Mensagem de confirmação.</param>
            <param name="inner">Exceção interna (original).</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.ConfirmationRequiredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construtor de serialização.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Exceptions.CancelledOperationException">
            <summary>
            Erro durante a operação do serviço de dados.
            </summary>
            <remarks>
            Significa que a operação foi cancelada pelo usuário na execução de uma função externa. Exemplo: Macro VBA CanContinue = false    
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.CancelledOperationException.#ctor(System.String)">
            <summary>
            Cria um novo objeto de exceção.
            </summary>
            <param name="message">Mensagem da exceção.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.CancelledOperationException.#ctor(System.String,System.Exception)">
            <summary>
            Cria um novo objeto de exceção.
            </summary>
            <param name="message">Mensagem da exceção.</param>
            <param name="inner">Exceção interna (original).</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.CancelledOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construtor de serialização.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Exceptions.AuthenticationException">
            <summary>
            Falha na autenticação
            </summary>    
        </member>
        <member name="T:Benner.Tecnologia.Common.Exceptions.ExpiredSessionException">
            <summary>
            Falha de sessão expirada
            </summary>
            <summary>
            Falha de sessão expirada
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Exceptions.BlockedPasswordException">
            <summary>
            Falha na autenticação, senha bloqueada.
            </summary>
            <summary>
            Falha na autenticação, senha bloqueada.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Exceptions.TooManyRowsException">
            <summary>
            Muitos registros encontrados. A quantidade de registros encontrada não é suportada.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.TooManyRowsException.#ctor">
            <summary>
            Cria um novo objeto de exceção.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.TooManyRowsException.#ctor(System.String)">
            <summary>
            Cria um novo objeto de exceção.
            </summary>
            <param name="message">A mensagem da exceção.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.TooManyRowsException.#ctor(System.String,System.Exception)">
            <summary>
            Cria um novo objeto de exceção.
            </summary>
            <param name="message">Mensagem da exceção.</param>
            <param name="inner">Exceção interna (original).</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.TooManyRowsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construtor de serialização.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Exceptions.EntityServiceException">
            <summary>
            Exceção geral em uma operação do serviço de dados.
            </summary>
            <remarks>
            Significa que durante a operação ocorreu uma exceção de um tipo não previsto.
            Provavelmente causada por uma exceção no código do próprio Agent ou por um problema de
            configuração relacionado ao WCF.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.EntityServiceException.#ctor">
            <summary>
            Cria um novo objeto de exceção.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.EntityServiceException.#ctor(System.String)">
            <summary>
            Cria um novo objeto de exceção.
            </summary>
            <param name="message">Mensagem da exceção.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.EntityServiceException.#ctor(System.String,System.Exception)">
            <summary>
            Cria um novo objeto de exceção.
            </summary>
            <param name="message">Mensagem da exceção.</param>
            <param name="inner">Exceção interna (original).</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.EntityServiceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construtor de serialização.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Exceptions.EntityServiceOperationException">
            <summary>
            Erro durante a operação do serviço de dados.
            </summary>
            <remarks>
            Significa que ocorreu uma exceção durante a execução da operação do serviço de dados.
            A exceção que ocorreu no serviço é encapsulada por esta exceção no agente.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.EntityServiceOperationException.#ctor">
            <summary>
            Cria um novo objeto de exceção.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.EntityServiceOperationException.#ctor(System.String)">
            <summary>
            Cria um novo objeto de exceção.
            </summary>
            <param name="message">Mensagem da exceção.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.EntityServiceOperationException.#ctor(System.String,System.Exception)">
            <summary>
            Cria um novo objeto de exceção.
            </summary>
            <param name="message">Mensagem da exceção.</param>
            <param name="inner">Exceção interna (original).</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.EntityServiceOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construtor de serialização.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Exceptions.EntityServiceRequestException">
            <summary>
            Solicitação inválida.
            </summary>
            <remarks>
            Ocorre quando o serviço de dados rejeita a solicitação como inválida.
            Significa que há alguma inconsistência nos parâmetros ou que o estado de algum objeto
            é inválido para a operação.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.EntityServiceRequestException.#ctor">
            <summary>
            Cria um novo objeto de exceção.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.EntityServiceRequestException.#ctor(System.String)">
            <summary>
            Cria um novo objeto de exceção.
            </summary>
            <param name="message">Mensagem da exceção.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.EntityServiceRequestException.#ctor(System.String,System.Exception)">
            <summary>
            Cria um novo objeto de exceção.
            </summary>
            <param name="message">Mensagem da exceção.</param>
            <param name="inner">Exceção interna (original).</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.EntityServiceRequestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construtor de serialização.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Exceptions.EntityNotFoundException">
            <summary>
            Entidade não encontrada.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.EntityNotFoundException.#ctor(System.Exception)">
            <summary>
            Cria um novo objeto de exceção.
            </summary>
            <param name="innerException">Exceção interna (original).</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.EntityNotFoundException.#ctor">
            <summary>
            Cria um novo objeto de exceção.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.EntityNotFoundException.#ctor(System.String)">
            <summary>
            Cria um novo objeto de exceção.
            </summary>
            <param name="message">Mensagem da exceção.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.EntityNotFoundException.#ctor(System.String,System.String)">
            <summary>
            Cria um novo objeto de exceção.
            </summary>
            <param name="entityDefinitionName">Nome da definição da entidade procurada.</param>
            <param name="source">Identificação da origem dos dados.</param>
            <param name="whereClause">Cláusula de procura.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.EntityNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Cria um novo objeto de exceção.
            </summary>
            <param name="message">Mensagem da exceção.</param>
            <param name="inner">Exceção interna (original).</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.EntityNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construtor de serialização.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Exceptions.EntityPersistenceException">
            <summary>
            Problema durante operação de persistência de entidade.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.EntityPersistenceException.#ctor(System.Exception)">
            <summary>
            Cria um novo objeto de exceção.
            </summary>
            <param name="innerException">Exceção interna (original).</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.EntityPersistenceException.#ctor">
            <summary>
            Cria um novo objeto de exceção.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.EntityPersistenceException.#ctor(System.String)">
            <summary>
            Cria um novo objeto de exceção.
            </summary>
            <param name="message">Mensagem da exceção.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.EntityPersistenceException.#ctor(System.String,System.Exception)">
            <summary>
            Cria um novo objeto de exceção.
            </summary>
            <param name="message">Mensagem da exceção.</param>
            <param name="inner">Exceção interna (original).</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.EntityPersistenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construtor de serialização.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Exceptions.InvalidConfigurationException">
            <summary>
            Uma exceção indicando um problema de configuração.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.InvalidConfigurationException.#ctor">
            <summary>
            Cria um novo objeto de exceção.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.InvalidConfigurationException.#ctor(System.String)">
            <summary>
            Cria um novo objeto de exceção.
            </summary>
            <param name="message">Mensagem da exceção.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.InvalidConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Cria um novo objeto de exceção.
            </summary>
            <param name="message">Mensagem da exceção.</param>
            <param name="inner">Exceção interna (original).</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.InvalidConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construtor de serialização.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Exceptions.ObjectCreationException">
            <summary>
            Uma exceção indicando um problema instanciando um objeto.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.ObjectCreationException.#ctor">
            <summary>
            Cria um novo objeto de exceção.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.ObjectCreationException.#ctor(System.String)">
            <summary>
            Cria um novo objeto de exceção.
            </summary>
            <param name="message">Mensagem da exceção.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.ObjectCreationException.#ctor(System.String,System.Exception)">
            <summary>
            Cria um novo objeto de exceção.
            </summary>
            <param name="message">Mensagem da exceção.</param>
            <param name="inner">Exceção interna (original).</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.ObjectCreationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construtor de serialização.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Exceptions.ScriptException">
            <summary>
            Uma exceção indicando um problema durante a utilização do mecanismo de scripts.
            </summary>
            <remarks>
            Esta exceção pode indicar diversos problemas, tais como a
            impossibilidade de instanciar o mecanismo de scripts para a linguagem especificada,
            um erro de sintaxe ou uma operação inválida na lógica do script.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.ScriptException.#ctor">
            <summary>
            Cria um novo objeto de exceção.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.ScriptException.#ctor(System.String)">
            <summary>
            Cria um novo objeto de exceção.
            </summary>
            <param name="message">Mensagem da exceção.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.ScriptException.#ctor(System.String,System.Exception)">
            <summary>
            Cria um novo objeto de exceção.
            </summary>
            <param name="message">Mensagem da exceção.</param>
            <param name="inner">Exceção interna (original).</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.ScriptException.#ctor(System.String,System.Exception,System.Collections.Generic.List{System.String})">
            <summary>
            Cria um novo objeto de exceção.
            </summary>
            <param name="message">Mensagem da exceção.</param>
            <param name="inner">Exceção interna (original).</param>
            <param name="dynamicStackTrace">Stack anotada com linhas de código.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.ScriptException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construtor de serialização.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Exceptions.DependencyClauseNotResolvedException">
            <summary>
            Exceção ocorrida quando o sistema não consegue resolver os campos de dependência
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Exceptions.EntityValidationException">
            <summary>
            A entidade não é válida.
            </summary>
            <summary>
            A entidade não é válida.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Exceptions.EntityValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construtor de serialização.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Exceptions.FieldNotFoundException">
            <summary>
            Campo de definição não encontrado
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Exceptions.AuthorizationException">
            <summary>
            Falha na autorização
            </summary>    
        </member>
        <member name="T:Benner.Tecnologia.Common.Exceptions.InvalidFilterAdvancedConditionException">
            <summary>
            Falha na análise da condição avançada do filtro
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.ExcludeFilesProcessor">
            <summary>
            Classe responsavel por processar a lista de arquivos a serem excluidas. files.XX.exclude
            Os arquivos são movidos para a pasta Root\Excluded, que não tem permissão de acesso, retornando 404 em qualquer acesso externo ou interno.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.ExcludeFilesProcessor._filesExcludeList">
            <summary>
            Lista dos arquivos files.XX.exclude. XX => 10,20,30,40,50
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.ExtensionEnum.BaseEnum`2">
            <summary>
            The inheritance of this class allow the creation of a more complex type of Enum in memory
            all static members with the type of T can be obtained in memory by calling the static class method ToList(). 
            The base implementation of operators enable extra stuff like comparing the
            object like: MyInhreitanceEnum.Value == 5
            If the value is a complex object the Equals method will be used in the test compare.
            </summary>
            <typeparam name="T">Is the type of the enum</typeparam>
            <typeparam name="Y">Is the value of the enum</typeparam>
        </member>
        <member name="T:Benner.Tecnologia.Common.ExtensionEnum.BaseEnum`2.EnumHolder">
            <summary>
            The purpose of this class is hold in memory the enum.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Extensions.TimeSpanExtension.ToTimeSpan(System.String)">
            <summary>
            Converte uma string em um TimeSpan se o formato da string estiver correto (hh24:mm:ss ou hh24:mm), caso contrário, retorna null.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.SqlFieldDefinition.Required">
            <summary>
            Campo SQL é sempre opcional.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.SqlFieldDefinition.FromUI(System.String)">
            <summary>Converter do formato de apresentação para o tipo nativo</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.SqlFieldDefinition.ToUI(System.Object)">
            <summary>Converter para apresentação</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.HashtableExtensions.PremiumEquals(System.Collections.Hashtable,System.Collections.Hashtable)">
            <summary>
            Checks if two Hashtables have the same number of keys, keys and values.
            </summary>
            <param name="source">The source Hashtable.</param>
            <param name="other">The Hashtable to compare.</param>
            <returns>True if both are equivalent.</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.IArtifactMigrator">
            <summary>
            Interface responsável pela migração de um artefato de sistema (.config, .aspx, etc).
            </summary>
            <remarks>
            No caso de artefato de configuração (.config) a atualização significa adicionar, remover ou atualizar seções de configuração, já
            no caso de um artefato de página (.aspx) a atualização pode significar substituir completamente uma página pela página .modelo.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.IArtifactMigrator.Upgrade">
            <summary>
            Responsável por atualizar o conteúdo de um artefato de sistema (.config, .aspx, etc).
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.IEntityViewRecord">
            <summary>
            Interface que representa um registro da tabela w_entidadevisoes
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.IEntityViewRecord.Entity">
            <summary>
            Entidade da visão.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.IEntityViewRecord.Name">
            <summary>
            Nome da visão de entidade.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.IEntityViewRecord.DefinitionContent">
            <summary>
            Conteúdo XML da definição de visão.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.IEntityViewRecord.Level">
            <summary>
            Camada de personalização da visão.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.IEntityViewRecord.CreatedBy">
            <summary>
            Usuário criador.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.IEntityViewRecord.CreatedAt">
            <summary>
            Data e hora de criação.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.IEntityViewRecord.ModifiedBy">
            <summary>
            Usuário que alterou por último.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.IEntityViewRecord.ModifiedAt">
            <summary>
            Data e hora da última alteração.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.IEntityViewRecord.Type">
            <summary>
            Tipo de registro de visão.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.IEntityViewRecord.Version">
            <summary>
            Número da versão da definição da classe EntityDefinition
            </summary>
            <remarks>
            Sempre persiste a visão com a última versão. Pois considera que se conseguiu deserializar
            baseado em uma versão anterior, a conversão está pronta e a instância em questão está compatível
            com a versão corrente.
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.IEntityViewRecord.Identifier">
            <summary>
            Identificador único da visão.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.IniParser.IniSectionItem.#ctor(System.String)">
            <summary>
            Inicializa novo item de seção do formato Ini a partir de uma linha
            </summary>
            <param name="itemLine">Linha de seção</param>
        </member>
        <member name="P:Benner.Tecnologia.Common.IniParser.IniSectionItem.Name">
            <summary>
            Nome do item
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.IniParser.IniSectionItem.Value">
            <summary>
            Valor do item
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.IniParser.IniFormatReader">
            <summary>
            Leitor de strings no formato Ini http://en.wikipedia.org/wiki/INI_file
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.IniParser.IniFormatReader.#ctor(System.String)">
            <summary>
            Inicializa um leitor de formato ini
            </summary>
            <param name="iniText">Texto no formato ini</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.IniParser.IniFormatReader.GetSectionItemValue(System.String,System.String,System.String)">
            <summary>
            Obtém o valor de um item do arquivo ini. Gera erro se houver duplicados.
            </summary>
            <param name="section">Seção do ini</param>
            <param name="itemName">Nome do Item</param>
            <param name="defaultValue">Valor que será retornado caso o item não exista</param>
            <returns>Valor do item</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.IniParser.IniFormatReader.GetSectionItems(System.String)">
            <summary>
            Retorna uma lista de itens da seção do Ini podendo haver duplicados.
            </summary>
            <param name="section">Nome da seção</param>
            <returns>Coleção List&lt;IniSectionItem&gt;</returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.Instrumentation.LogRecord.ProcessID">
            <summary>
            Identificador de processo (PID) 
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Instrumentation.ISQLMonitor.GetEnabled">
            <summary>
            Se o monitoramento está ativo
            </summary>
            <returns>Retorna true se estiver ativo, caso contrário false.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Instrumentation.ISQLMonitor.PreparesCommand(System.String)">
            <summary>
            Registra nos logs o comando SQL que está sendo executado
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Instrumentation.ISQLMonitor.LogParameter(System.Int32,System.String,System.Object,System.Boolean,System.Data.DbType)">
            <summary>
            Registra nos logs os parâmetros do SQL que está sendo executado
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Instrumentation.ISQLMonitor.ExecuteReader(System.DateTime,System.DateTime,System.String)">
            <summary>
            Registra execução de comando do DataReader
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Instrumentation.ISQLMonitor.Execute(System.DateTime,System.DateTime,System.String)">
            <summary>
            Registra execução de comando Insert, Update, Delete
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Instrumentation.CustomLogger.Enable">
            <summary>
            Indica se existe um Listener ativo
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Instrumentation.ICustomLog">
            <summary>
            Contrato para interceptar eventos do aplicativo.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Instrumentation.Logger.LogInformation(System.String)">
            <summary>
            Escreve uma mensagem utilizando o nível de Information
            </summary>
            <param name="message">Mensagem que será escrita</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Instrumentation.Logger.LogDetail(System.String)">
            <summary>
            Escreve uma mensagem utilizando o nível de Detail
            </summary>
            <param name="message">Mensagem que será escrita</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Instrumentation.Logger.LogDetail(System.String,System.TimeSpan)">
            <summary>
            Escreve uma mensagem utilizando o nível de Detail
            </summary>
            <param name="message">Mensagem que será escrita</param>
            <param name="elapsed">Tempo decorrido</param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Instrumentation.ExceptionLogger">
            <summary>
            Representa a interação com o EventViewer do Windows - Leitura/Escrita
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Instrumentation.ExceptionLogger.Write(System.Exception,Benner.Tecnologia.Common.ExceptionSourceLayer,System.Boolean)">
            <summary>
            Efetua o log da exceção no EventViewer do Windows
            </summary>
            <param name="exception">Exceção ocorrida</param>
            <param name="exceptionLayer">Camada na qual a exceção foi gerada</param>
            <returns>Identificador único da exceção. Caso ocorra erro no tratamento de exceção estamos devolvendo um identificador vazio.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Instrumentation.ExceptionLogger.Read(System.Guid,Benner.Tecnologia.Common.ExceptionSourceLayer)">
            <summary>
            Recupera uma exceção gravada no EventViewer do Windows através do identificador único
            </summary>
            <param name="exceptionId">Identificador único da exceção</param>
            <param name="exceptionLayer">Camada na qual foi gravada a exceção</param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Instrumentation.ExceptionLogger.ReadBinary(System.Guid,Benner.Tecnologia.Common.ExceptionSourceLayer)">
            <summary>
            Recupera uma exceção em formato binário gravada no EventViewer do Windows através do identificador único
            Recupera uma exceção em formato binário gravada no diretório temporário do Windows.
            </summary>
            <param name="exceptionId">Identificador único da exceção</param>
            <param name="exceptionLayer">Camada na qual foi gravada a exceção</param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Instrumentation.ExceptionLogger.DeserializeException(System.Byte[])">
            <summary>
            Serializa a exceção em formato binário para armazenar no EventViewer
            </summary>
            <param name="exception">Objeto de exceção</param>
            <returns>Array de bytes contendo a exceção serializada</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Instrumentation.ExceptionLogger.GenerateExceptionId">
            <summary>
            Gera um identificador único para a exceção
            </summary>
            <returns>GUID</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Instrumentation.ExceptionLogger.GetEventLog(Benner.Tecnologia.Common.ExceptionSourceLayer)">
            <summary>
            Retorna o EventLog correspondente a camada atual
            </summary>
            <param name="exceptionLayer">Camada da exceção</param>
            <returns>EventLog object</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Instrumentation.ExceptionLogger.SerializeException(System.Object)">
            <summary>
            Serializa a exceção em formato binário para armazenar no EventViewer
            </summary>
            <param name="exception">Objeto de exceção</param>
            <returns>Array de bytes contendo a exceção serializada</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Instrumentation.InstrumentationHelper">
            <summary>
            Classe Helper para as operações de configuração de instrumentação
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Instrumentation.InstrumentationHelper.RemoveDefaultTraceListenerForOverallPerformance">
            <summary>
            Remove o TraceListener padrão do .Net. Isto aumenta bastante a performance da aplicação.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Instrumentation.InstrumentationHelper.SetSystemInstrumentationLevel(Benner.Tecnologia.Common.Instrumentation.InstrumentationLevel)">
            <summary>
            Configura a instrumentação para todos os usuários
            </summary>
            <param name="level">Nível de instrumentação</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Instrumentation.InstrumentationHelper.SetUserInstrumentationLevel(Benner.Tecnologia.Common.Instrumentation.InstrumentationLevel,System.String)">
            <summary>
            Configura a instrumentação para o usuário atual
            </summary>
            <param name="level">Nível de instrumentação</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Instrumentation.InstrumentationHelper.GetSystemInstrumentationLevel">
            <summary>
            Retorna o nível configurado para todos os usuários
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Instrumentation.InstrumentationHelper.GetUserInstrumentationLevel(System.String)">
            <summary>
            Retorna o nível customizado para o usuário atual
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Instrumentation.InstrumentationHelper.GetCurrentUserName">
            <summary>
            Retorna o nome do usuário atual
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Instrumentation.InstrumentationHelper.IsRunnigTests">
            <summary>
            Indica se o contexto atual é um teste automatizado
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Instrumentation.InstrumentationHelper.GetLogicalOperationId">
            <summary>
            Recupera o identificador da operação lógica corrente.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.Instrumentation.InstrumentationHelper.IsEnable">
            <summary>
             Caso seja esteja ligado ao menos o rastreamento, para o usuário ou global, então entendemos que o log está ligado.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Instrumentation.InstrumentationHelper.StarLogicalOperation">
            <summary>
            Método utilizado pelo Tracer para inicializar uma operação lógica
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Instrumentation.InstrumentationHelper.StopLogicalOperation">
            <summary>
            Método utilizado pelo Tracer para finalizar uma operação lógica
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Interop.DelphiRuntimeVersion">
            <summary>
            Runtime do Delphi
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Interop.DelphiRuntimeVersion.None">
            <summary>
            Não informado
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Interop.DelphiRuntimeVersion.Runtime70">
            <summary>
            Delphi 7
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Interop.DelphiRuntimeVersion.Runtime170">
            <summary>
            Delphi XE3
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Interop.DelphiRuntimeVersion.Runtime230">
            <summary>
            Delphi 10 Seattle
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Interop.DelphiRuntimeUtils">
            <summary>
            Utilitários para Delphi
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Interop.DelphiRuntimeUtils.RuntimeVersion">
            <summary>
            Runtime do Delphi
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Interop.DelphiRuntimeUtils.#ctor(System.String)">
            <summary>
            Inicializa uma instância de DelphiRuntimeUtils, recebendo diretamente o valor do parâmetro de sistema Runtime
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Interop.DelphiRuntimeUtils.#ctor(Benner.Tecnologia.Common.Interop.DelphiRuntimeVersion)">
            <summary>
            Inicializa uma instância de DelphiRuntimeUtils
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Interop.DelphiRuntimeUtils.GetBProviderProgID">
            <summary>
            Obtém o ProgID ou ClassName do Provider para o Runtime atual
            </summary>
            <returns>String com o ProgID para ser utilizado no GetTypeFromProgID.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Interop.ProviderActivator.#ctor">
            <summary>
            Ativa o Provider utilizando COM
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Interop.ProviderActivator.#ctor(System.String)">
            <summary>
            Ativa o Provider sem utilizar o COM (COM Free);
            </summary>
            <param name="providerFolder"></param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Interop.ProviderClrExceptionInfo">
            <summary>
            Informações da exceção .Net ocorrida no Provider
            </summary>    
        </member>
        <member name="P:Benner.Tecnologia.Common.Interop.ProviderClrExceptionInfo.TypeName">
            <summary>
            Tipo da exceção
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Interop.ProviderClrExceptionInfo.Message">
            <summary>
            Mensagem da exceção
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Interop.ProviderClrExceptionInfo.StackTrace">
            <summary>
            Stack trace da exceção
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Interop.ProviderClrExceptionInfo.Base64Exception">
            <summary>
            Exception .Net serializada
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Interop.ProviderClrExceptionInfo.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Inicializa a classe de informações da exceção.
            </summary>
            <param name="typeName">Tipo da exceção</param>
            <param name="message">Mensagem</param>
            <param name="stackTrace">StackTrace</param>
            <param name="base64Exception">Exception .Net serializada</param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Interop.ProviderException">
            <summary>
            Representa uma exception vinda do Provider. Possui inteligência para disponibilizar todas as innersExceptions e todas as stacktraces ocorridas no Provider.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Interop.ProviderException.ClrExceptionInfo">
            <summary>
            Detalhes da exception .Net ocorrida internamente no Provider. Retornará null se não ocorreu nenhuma exception .Net
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Interop.ProviderException.FullExceptionDeserialization">
            <summary>
            True se toda a stack de exceções vindas do Provider foi deserializada com sucesso
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Interop.ProviderException.GetProviderException(Benner.Tecnologia.Common.Interop.ProviderClrExceptionInfo,System.Exception)">
            <summary>
            Converte a exception para uma que eventualmente irá conter detalhes sobre a Exception .Net original no Provider (se possível)
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Interop.ProviderException.Renew">
            <summary>
            Tenta redeserializar a exception .Net armazenada em ClrExceptionInfo
            </summary>
            <returns>Uma ProviderException</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Interop.ExecOnCommandClickTableContext">
            <summary>
            Classe utilitária para abrir uma Tabela que servirá apenas para OnCommandClick, mesmo que esteja executando entidade especializada na tabela.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Interop.ExecOnCommandClickTableContext.#ctor(Benner.Tecnologia.Common.Handle,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Instancia um novo contexto do tipo ExecOnCommandClickTableContext
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Interop.ExecEntityMethodTableContext">
            <summary>
            Classe utilitária para abrir uma Tabela que servirá apenas para executar um método de entidade
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Interop.ExecEntityMethodTableContext.#ctor(Benner.Tecnologia.Common.Handle,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Instancia um novo contexto do tipo ExecEntityMethodTableContext
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Interop.ProviderContextBase">
            <summary>
            Representa um contexto que é utilizado para passar informações diversas para uma operação no Provider
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Interop.ProviderContextBase.#ctor">
            <summary>
            Construtor que deve ser chamado implicitamente pelos descendentes e pelas conversões.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Interop.ProviderContextBase.Item(System.String)">
            <summary>
            Acessador da das propriedades do contexto
            </summary>
            <param name="key">Chave (nome da proprieade)</param>
            <returns>Retorna valor da propriedade</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Interop.ProviderContextBase.ConvertTo``1(Benner.Tecnologia.Common.Interop.ProviderContextBase)">
            <summary>
            Utilitário para convesão de tipos da família do ProviderContextBase
            </summary>
            <typeparam name="T">Tipo para qual o objeto passado deve ser convertido</typeparam>
            <param name="obj">Objeto que será convertido</param>
            <returns>Retorna o objeto convertido para o tipo passado em T</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Interop.ProviderContextBase.FromByteArray``1(System.Byte[])">
            <summary>
            Deserializa o contexto representado pelo byte[]
            </summary>
            <param name="serializedContext">Contexto serializado</param>
            <param name="type">Tipo para qual deve ser convertido</param>
            <returns>Objeto do contexto</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Interop.ProviderContextBase.ToByteArray">
            <summary>
            Serializa o contexto num byte[] para enviá-lo para o Provider.
            </summary>
            <returns>Retorna um byte[]</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Interop.ProviderContextBase.op_Implicit(Benner.Tecnologia.Common.Interop.ProviderContextBase)~System.Byte[]">
            <summary>
            Operador de conversão implícita para um byte[].
            </summary>
            <param name="handle">Objeto a ser convertido.</param>
            <returns>byte[] representando o contexto</returns>
            <remarks>
            Este operador facilita a obtenção do valor byte[] do objeto.
            </remarks>
        </member>
        <member name="T:Benner.Tecnologia.Common.Interop.RestoreEditTableContext">
            <summary>
            Representa um contexto de abertura de tabela para continuar o processo de edição de entidade
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Interop.RestoreEditTableContext.#ctor(Benner.Tecnologia.Common.Handle,System.Data.DataSet,System.Object,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Instancia um novo contexto de tabela que restaurar o estado da entidade após a edição para que possa ser persistida
            </summary>
            <param name="handle">Handle da entidade em edição que será persistida</param>
            <param name="dataSet">DataSet com os valores dos campos após a edição</param>
            <param name="globalsStacks">Valores das globais de macro após a edição</param>
            <param name="transitoryData">Dados transitórios</param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Interop.RestoreInsertTableContext">
            <summary>
            Representa um contexto de abertura de tabela para continuar o processo de criação/inserção de entidade
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Interop.RestoreInsertTableContext.#ctor(System.Data.DataSet,System.Object,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Instancia um novo contexto de tabela que restaurar o estado da entidade após sua criação/inserção para que possa ser persistida
            </summary>
            <param name="dataSet">DataSet com os valores dos campos após a criação</param>
            <param name="globalsStacks">Valores das globais de macro após a criação</param>
            <param name="transitoryData">Dados transitórios</param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Interop.ProviderTableContext">
            <summary>
            Classe utilitária para passar informações de contexto para o Provider na Abertura de uma tabela.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Interop.ProviderTableContext.#ctor">
            <summary>
            Contrutor default utilizado em conversões
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Interop.ProviderTableContext.#ctor(Benner.Tecnologia.Common.Handle,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Instancia um novo contexto para abertura de tabela
            </summary>
            <param name="handle">Handle do registro. Pode ser -1 para iniciar uma inserção</param>
            <param name="transitoryData">Dados transitórios que serão passados para a entidade no Provider</param>
        </member>
        <member name="P:Benner.Tecnologia.Common.Interop.ProviderTableContext.Mode">
            <summary>
            Modo de abertuda de tabela
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Interop.ProviderTableContext.Handle">
            <summary>
            Handle da entidade
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Interop.ProviderTableContext.TransitoryData">
            <summary>
            Dados transitórios
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Interop.RestorableTableContext">
            <summary>
            Representa um contexto que abre a tabela no Provider para continuar uma operação anterior, ex: Save após a criação ou da edição da entidade
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Interop.RestorableTableContext.#ctor">
            <summary>
            Construtor que deve ser utilizado em conversões
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Interop.RestorableTableContext.#ctor(Benner.Tecnologia.Common.Handle,System.Data.DataSet,System.Object,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Instancia um contexto para restaurar o estado anterior da tabela (edit/insert)
            </summary>
            <param name="handle">Handle do registro em edição que será aberto para ser persistido, -1 para persistir uma entidade de nova entidade/registro</param>
            <param name="dataSet">DataSet com os valores do campos após o create/edit</param>
            <param name="globalsStacks">Valores das globais da macro após o create/edit</param>
            <param name="transitoryData">Dados transitórios</param>
        </member>
        <member name="P:Benner.Tecnologia.Common.Interop.RestorableTableContext.DataSet">
            <summary>
            DataSet com os valores dos campos após o insert/edit
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Interop.RestorableTableContext.GlobalsStacks">
            <summary>
            Valores das globais da macro após o insert/edit
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Interop.TableContextMode.OnlyOpen">
            <summary>
            Apenas abre a tabela para ler e atualizar registros
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Interop.TableContextMode.ContinueInsert">
            <summary>
            Continua uma inserção (GetMode.Insert -> EntityBase.Save)
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Interop.TableContextMode.ContinueEdit">
            <summary>
            Continua uma edição (GetMode.Edit -> EntityBase.Save)
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Interop.TableContextMode.ExecEntityMethod">
            <summary>
            Abre a tabela para execução de método de entidade
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Interop.TableContextMode.ExecOnCommandClick">
            <summary>
            Abre a tabela para execução de OnCommandClick. Força a macro mesmo que a tabela esteja marcada para executar entidade especializada.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.IoC.BennerMissingBindingResolver">
            <summary>
            Troca a exception padrão do Ninject de Binding não encontrado por uma que indica que o serviço não existe na camada atual.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.IoC.BennerMissingBindingResolver.Resolve(Ninject.Infrastructure.Multimap{System.Type,Ninject.Planning.Bindings.IBinding},Ninject.Activation.IRequest)">
            <inheritdoc />
        </member>
        <member name="T:Benner.Tecnologia.Common.IoC.DependencyContainer">
            <summary>
            Container de injeção de dependência
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.IoC.DependencyContainer.InternalKernel">
            <summary>
            ATENÇÃO: Esta propriedade acessa um universo paralelo perigoso. 
            
            Está pública apenas para uso em ambiente de testes automatizados ultra avançados.
            
            Instância do Ninject utilizada por toda a Tecnologia. Você não deve acessar essa propriedade. 
            Utilize os métodos estáticos da classe DependencyContainer para manipular os registros do Ninject.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.IoC.DependencyContainer._compositionRoot">
            <summary>
            Registro dos objetos básicos para a aplicação funcionar
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.IoC.DependencyContainer.Start(Benner.Tecnologia.Common.IoC.ICompositionRoot)">
            <summary>
            Faz os registros iniciais no container de injeção de dependência através de um Composition Root. Não fara registro algum caso o método Start já tenha sido chamado.
            </summary>
            <param name="compositionRoot">CompositionRoot que deverá ser utilizado</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.IoC.DependencyContainer.Restart(System.Boolean)">
            <summary>
            Reinicia o container de injeção de dependência, executando o CompositionRoot passado anteriormente no método Start e registra os módulos do ninject.
            </summary>
            <param name="loadBennerModules">True para carregar os módulos de injeção de depedência *.IoC.dll</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.IoC.DependencyContainer.LoadModule(Ninject.Modules.INinjectModule)">
            <summary>
            Carrega o módulo passado
            </summary>
            <param name="modules"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.IoC.DependencyContainer.LoadBennerModules(System.String)">
            <summary>
            Carrega os módulos de injeção de dependências da pasta padrão da camada Tecnologia, Núcleo, Vertical e Específico.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.IoC.DependencyContainer.LoadModulesTecnologia(System.String)">
            <summary>
            Carrega os módulos de injeção de dependências da tecnologia
            </summary>
            <param name="folder">Pasta que contém os módulos</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.IoC.DependencyContainer.LoadModulesNucleo(System.String)">
            <summary>
            Carrega os módulos de injeção de dependências do núcleo
            </summary>
            <param name="folder">Pasta que contém os módulos</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.IoC.DependencyContainer.LoadModulesVertical(System.String)">
            <summary>
            Carrega os módulos de injeção de dependências da vertical
            </summary>
            <param name="folder">Pasta que contém os módulos</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.IoC.DependencyContainer.LoadModulesEspecifico(System.String)">
            <summary>
            Carrega os módulos de injeção de dependências do desenvolvimento específico
            </summary>
            <param name="folder">Pasta que contém os módulos</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.IoC.DependencyContainer.LoadModulesByFilePattern(System.String,System.String)">
            <summary>
            Carrega os módulos de injeção de dependências dos arquivos especificados
            </summary>
            <param name="folder">Pasta que contém os módulos</param>
            <param name="filePattern">Pattern para selecionar os arquivos (ex.: Benner.Tecnologia.*.IoC.dll)</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.IoC.DependencyContainer.Get``1">
            <summary>
            Obtém uma instância de serviço registrado no container
            </summary>
            <typeparam name="T">Tipo do serviço que será resolvido</typeparam>
            <returns>Instância de T (serviço)</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.IoC.DependencyContainer.Get``1(Ninject.Parameters.IParameter[])">
            <summary>
            Obtém uma instância de serviço registrado no container
            </summary>
            <typeparam name="T">Tipo do serviço que será resolvido</typeparam>
            <param name="parameters">Parâmetros para passar para a requisição</param>
            <returns>Instância de T (serviço)</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.IoC.DependencyContainer.Get(System.Type)">
            <summary>
            Obtém uma instância de serviço registrado no container
            </summary>
            <param name="type">Tipo do serviço que será resolvido</param>
            <returns>Instância do tipo (serviço)</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.IoC.DependencyContainer.Get(System.Type,Ninject.Parameters.IParameter[])">
            <summary>
            Obtém uma instância de serviço registrado no container
            </summary>
            <param name="type">Tipo do serviço que será resolvido</param>
            <param name="parameters">Parâmetros para passar para a requisição</param>
            <returns>Instância do tipo (serviço)</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.IoC.DependencyContainer.TryGet``1">
            <summary>
            Obtém uma instância de serviço registrado no container
            </summary>
            <typeparam name="T">Tipo do serviço que será resolvido</typeparam>
            <returns>Instância de T (serviço) ou nulo se não encontrar</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.IoC.DependencyContainer.TryGet``1(Ninject.Parameters.IParameter[])">
            <summary>
            Obtém uma instância de serviço registrado no container
            </summary>
            <typeparam name="T">Tipo do serviço que será resolvido</typeparam>
            <param name="parameters">Parâmetros para passar para a requisição</param>
            <returns>Instância de T (serviço) ou nulo se não encontrar</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.IoC.DependencyContainer.TryGet(System.Type)">
            <summary>
            Obtém uma instância de serviço registrado no container
            </summary>
            <param name="type">Tipo do serviço que será resolvido</param>
            <returns>Instância do tipo (serviço) ou nulo se não encontrar</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.IoC.DependencyContainer.TryGet(System.Type,Ninject.Parameters.IParameter[])">
            <summary>
            Obtém uma instância de serviço registrado no container
            </summary>
            <param name="type">Tipo do serviço que será resolvido</param>
            <param name="parameters">Parâmetros para passar para a requisição</param>
            <returns>Instância do tipo (serviço) ou nulo se não encontrar</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.IoC.DependencyContainer.Inject(System.Object)">
            <summary>
            Injeta objetos registrados no container no objeto passado
            </summary>
            <param name="instance">Objeto que receberá as injeções</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.IoC.DependencyContainer.Bind``1">
            <summary>
            Faz o bind para um serviço.
            </summary>
            <typeparam name="T">Serviço para fazer o bind</typeparam>
        </member>
        <member name="M:Benner.Tecnologia.Common.IoC.DependencyContainer.Bind``2">
            <summary>
            Faz o bind para serviços.
            </summary>
            <typeparam name="T">Serviço para fazer o bind</typeparam>
            <typeparam name="U">Outro serviço para fazer o bind</typeparam>
        </member>
        <member name="M:Benner.Tecnologia.Common.IoC.DependencyContainer.Rebind``1">
            <summary>
            Remove o bind atual e adiciona um novo.
            </summary>
            <typeparam name="T">Serviço para refazer o bind</typeparam>
        </member>
        <member name="M:Benner.Tecnologia.Common.IoC.DependencyContainer.Rebind``2">
            <summary>
            Remove binds atuais e adiciona novos.
            </summary>
            <typeparam name="T">Serviço para refazer o bind</typeparam>
            <typeparam name="U">Outro serviço para refazer o bind</typeparam>
        </member>
        <member name="M:Benner.Tecnologia.Common.IoC.DependencyContainer.Unbind``1">
            <summary>
            Remove binds do serviço informado
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Benner.Tecnologia.Common.IoC.ICompositionRoot">
            <summary>
            Local onde os serviços são registrados no Ninject.
            Estes objetos são registrados antes de qualquer coisa, inclusive antes dos módulos de injeção.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.IoC.ICompositionRoot.Load(Ninject.IKernel)">
            <summary>
            Serviços que precisam ser registrados antes de qualquer coisa
            </summary>
            <param name="kernel">Kernel do Container de injeção de dependência</param>
        </member>
        <member name="T:Benner.Tecnologia.Common.JoinsDefinitionsEngine.DefinitionParseEventArgs">
            <summary>
            Argumentos do evento DefinitionParse
            </summary>
            <remarks>Responsável: Paulo Henrique da Silva</remarks>
        </member>
        <member name="T:Benner.Tecnologia.Common.JoinsDefinitionsEngine.DefinitionParseEventHandler">
            <summary> 
            Delegate para event DefinitionParse
            </summary>
            <remarks>Responsável: Paulo Henrique da Silva</remarks>
        </member>
        <member name="T:Benner.Tecnologia.Common.JoinsDefinitionsEngine.JoinsDefinitionsEngine">
            <summary>
            Definições das Colunas (DEFINICAO|DEFINICAO|...).
            </summary>
            <remarks>Responsável: Paulo Henrique da Silva</remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.JoinsDefinitionsEngine.JoinsDefinitionsEngine.JoinsCacheEnabled">
            <summary>
            Indica se devemos omitir os Joins redundates ao montar SQL contento formato GenSQL Extendido. default: true
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.JoinsDefinitionsEngine.JoinsDefinitionsEngine.ColumnInfo">
            <summary>
            Classe ColumnInfo, contém a lista de colunas para esta definição
            </summary>
            <remarks>Responsável: Paulo Henrique da Silva</remarks>
        </member>
        <member name="T:Benner.Tecnologia.Common.JoinsDefinitionsEngine.JoinsDefinitionsEngine.WhereInfo">
            <summary>
            Classe WhereInfo, contém localização de informações que precisam ser substituidas no Where
            </summary>
            <remarks>Responsável: Paulo Henrique da Silva</remarks>
        </member>
        <member name="T:Benner.Tecnologia.Common.JoinsDefinitionsEngine.JoinsDefinitionsEngine.ExpressionsInfo">
            <summary>
            Classe ExpressionsInfo, contém localização de informações que precisam ser substituidas nas Expresions
            </summary>
            <remarks>Responsável: Paulo Henrique da Silva</remarks>
        </member>
        <member name="T:Benner.Tecnologia.Common.JoinsDefinitionsEngine.JoinsDefinitionsEngine.JoinItemDefinition">
            <summary>
            Definição de um Join (TABELA.NOME=APELIDO).
            </summary>
            <remarks>Responsável: Paulo Henrique da Silva</remarks>
        </member>
        <member name="T:Benner.Tecnologia.Common.JoinsDefinitionsEngine.JoinsDefinitionsEngine.JoinGroupDefinition">
            <summary>
            Grupo de joins (CAMPO>TABELA.CAMPO>TABELA.CAMPO=ALIAS).
            </summary>
            <remarks>Responsável: Paulo Henrique da Silva</remarks>
        </member>
        <member name="T:Benner.Tecnologia.Common.JoinsDefinitionsEngine.JoinsDefinitionsEngine.TranslatedJoinDefinition">
            <summary>
            Representa um Join já adicionado à query
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.JoinsDefinitionsEngine.SQLRegexConsts">
            <summary>
            Expressões regulares utilizadas para interpretação de comandos SQL
            </summary>
            <remarks>Responsável: Paulo Henrique da Silva</remarks>
        </member>
        <member name="F:Benner.Tecnologia.Common.JoinsDefinitionsEngine.SQLRegexConsts.Lookup">
            <summary>
            Expressão GenSQL, ex: CAMPO>TABELA.CAMPO>TABELA.CAMPO...
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.JoinsDefinitionsEngine.SQLRegexConsts.TableField">
            <summary>
            Campo da tabela principal, ex: A.CAMPO
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.JoinsDefinitionsEngine.SQLRegexConsts.AnyField">
            <summary>
            Qualquer campo, ex: XYZ.CAMPO
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.JoinsDefinitionsEngine.SQLRegexConsts.Condition">
            <summary>
            Condição SQL (=, LIKE, IS, etc)
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.JoinsDefinitionsEngine.SQLRegexConsts.Value">
            <summary>
            Valor. Aceita parâmetros (:PARAM), string ('Texto'), funções (@FUNC(XPTO)) e demais literais numéricas e identificadores (999, CAMPO, TABELA.CAMPO).
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.JoinsDefinitionsEngine.SQLRegexConsts.ValuesForBetween">
            <summary>
            Valores para um Between, ex: :DATAINICIAL AND :DATAFINAL
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.JoinsDefinitionsEngine.SQLRegexConsts.Between">
            <summary>
            BETWEEN, ex: BETWEEN :DATAINICIAL AND :DATAFINAL
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.JoinsDefinitionsEngine.SQLRegexConsts.ValuesForIn">
            <summary>
            Valores para um In, ex: ('Valor1', 'Valor2', :PARAM, @FUNCAO(), 2)
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.JoinsDefinitionsEngine.SQLRegexConsts.AllValues">
            <summary>
            Valores sozinhos (SQLRegexConsts.Value) ou para um In (SQLRegexConsts.ValuesForIn)
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.JoinsDefinitionsEngine.SQLRegexConsts.In">
            <summary>
            Clausula IN, ex: IN ('Valor1', 'Valor2')
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.JoinsDefinitionsEngine.SQLRegexConsts.Parameter">
            <summary>
            Parâmetro, ex: :PARAM
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.JoinsDefinitionsEngine.SQLRegexConsts.String">
            <summary>
            Literal string, ex: 'Texto'
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.JoinsDefinitionsEngine.SQLRegexConsts.Function">
            <summary>
            Função, ex: @AGORA, @DATA(25/12/2008), @MAIUSCULAS(:PARAM), @MAIUSCULAS('Texto'), @FUNCAO('Texto', :PARAM)
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.JoinsDefinitionsEngine.SQLRegexConsts.FunctionName">
            <summary>
            Nome de função, ex: @FUNCAO, @FUNCAO[1]
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.JoinsDefinitionsEngine.SQLRegexConsts.FunctionArgument">
            <summary>
            Argumento de função incluindo os parentesis da função, ex: ('Texto'), (:PARAM) ou (XYZ.TABELA) 
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.JoinsDefinitionsEngine.SQLRegexConsts.FunctionMultiArguments">
            <summary>
            Múltiplos argumentos de função incluindo os parentesis da função, ex: ('Texto', :PARAM)
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.JoinsDefinitionsEngine.SQLRegexConsts.NumberOrIdentifier">
            <summary>
            Números ou identificadores, ex: 999, TABELA.CAMPO, CAMPO
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.JoinsDefinitionsEngine.SQLRegexConsts.Space">
            <summary>
            Espaços (podem ou não existir)
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.IJoinRelasionshipSearch">
            <summary>
            Interfase para pesquisa de campo de ligação entre tabelas (Pai e Filha).
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.AdvancedList">
            <summary>
            Summary description for AdvancedList.
            </summary>
            <remarks>Responsável: Leandro Salvatti Piscke</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.AdvancedList.#ctor">
            <summary>
            Construtor Default
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.AdvancedList.#ctor(System.String,System.Char)">
            <summary>
            Construtor Customizado
            </summary>
            <param name="values"></param>
            <param name="separator"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.AdvancedList.#ctor(Benner.Tecnologia.Common.Legacy.AdvancedList)">
            <summary>
            Construtor de Cópia
            </summary>
            <param name="src"></param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.AnonymousLoginInfo">
            <summary>Classe que encapsula as informacoes sobre login anonimo</summary>
            <remarks>Responsável: João Paulo Melo</remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.AnonymousLoginInfo.AllowAnonymousLogin">
            <summary>Indica se é permitido executar login anonimo</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.AnonymousLoginInfo.UserName">
            <summary>Nome do Usuário para usar como login de usuario anonimo</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.AnonymousLoginInfo.#ctor(Benner.Tecnologia.Common.Legacy.ApplicationInfo)">
            <summary>Construtor Customizado</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.AnonymousLoginInfo.#ctor(System.Boolean)">
            <summary>Construtor Default</summary>
            <param name="showAlwaysDefaultValues">Indica que independente das informacoes do web.config, este objeto trará apenas valores default</param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.ApplicationInfo">
            <summary>
            Objeto que descreve uma lista de permissao por aplicacao
            </summary>
            <remarks>Responsável: João Paulo Melo</remarks>
        </member>
        <member name="F:Benner.Tecnologia.Common.Legacy.ApplicationInfo.SESSION_KEY">
            <summary>
            O identificador que deve ser utilizado para acessar este objeto na sessao
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ApplicationInfo.ApplicationName">
            <summary>
            [get/set] O nome da aplicação
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ApplicationInfo.ApplicationHandle">
            <summary>
            [get/set] O Handle da aplicação
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ApplicationInfo.Restricted">
            <summary>
            [get/set] Indica se esta aplicacao tem restricao a determinados grupos de usuarios
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ApplicationInfo.HostList">
            <summary>
            [get/set] Pega a lista de host que esta applicacao faz integracao
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ApplicationInfo.StartPoint">
            <summary>
            [get/set] pega o menu principal
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ApplicationInfo.Title">
            <summary>
            Título da aplicação (title)
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ApplicationInfo.WildCard">
            <summary>
            Permite busca com * (wildCard)
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ApplicationInfo.OneLinkPerLine">
            <summary>
            Indica se os links devem ocupar uma linha cada um no formulário
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ApplicationInfo.ShowClosedGridLink">
            <summary>
            Indica se devemos mostrar link em grids fechados.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ApplicationInfo.IgnoreAuthenticationAgainstLDAP">
            <summary>
            Indica se o login de usuário deverá ignorar a autenticação de usuário para este aplicativo.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ApplicationInfo.SendErrorRepord">
            <summary>
            Permite o envio de erros para Benner
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ApplicationInfo.AdminMailList">
            <summary>
            Lista de mails de administradores do sistema, que devemos enviar relatorios de erro, emails separados por vírgula
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ApplicationInfo.CustomerName">
            <summary>
            Nome do Cliente
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ApplicationInfo.HelpOnlineUserName">
            <summary>
            Nome do usuário para o help na benner wiki (já em base64)
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ApplicationInfo.HelpOnlinePassword">
            <summary>
            Senha do usuário para o help na benner wiki (já em base64)
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ApplicationInfo.SystemName">
            <summary>
            Nome do Sistema
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ApplicationInfo.ValidateUserIP">
            <summary>
            Validar IP do usuário no Login 
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ApplicationInfo.LoginCaption">
            <summary>
            Legenda de login
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ApplicationInfo.LogoffCaption">
            <summary>
            Legenda de logoff
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ApplicationInfo.UserCaption">
            <summary>
            Legenda de usuário 
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ApplicationInfo.AllowAnonymousLogin">
            <summary>
            Se permite login anônimo
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ApplicationInfo.AnonimousUserName">
            <summary>
            Usuário anônimo, ligado a tabela Z_GRUPOUSUARIOS, de onde deve ser pego o APELIDO
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ApplicationInfo.IsCustomLogin">
            <summary>
            indica se a aplicacao deve utilizar uma pagina customizada para login
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ApplicationInfo.UrlLogin">
            <summary>
            URL da página de login (loginPage)
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ApplicationInfo.UrlLogoff">
            <summary>
            URL da página de logoff (logoffDestination)
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ApplicationInfo.ExternalLogin">
            <summary>
            Se o login implementa funcionalidades (externalLogin)
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ApplicationInfo.SearchStyle">
            <summary>Identifica o estilo de exibição do recurso de pesquisa no gerenciador de conteudo. SearchStyle é um handle de W_ESTILOS.</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ApplicationInfo.Translate">
            <summary>Indica se a aplicacao deve utilizar o recurso de traducao e jargao</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ApplicationInfo.ShowBranchLink">
            <summary>
            Indica quando deve ser mostrado o link de empresa
            </summary>
            <value><c>true</c> if [show branch link]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ApplicationInfo.ShowUserLink">
            <summary>
            Indica quando deve ser mostrado o link de usuário
            </summary>
            <value><c>true</c> if [show user link]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.ApplicationInfo.#ctor">
            <summary>
            Construtor Default
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.ApplicationInfoProvider">
            <summary>
            Classe responsavel pela carga e disponibilizacao de Permissao de Accesso de uma aplicacao
            </summary>
            <remarks>Responsável: João Paulo Melo</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.ApplicationInfoProvider.#ctor">
            <summary>
            Construtor Privado
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.AttributeHelper">
            <summary>
            Classe que auxilia a manipulacao de custom attributes
            </summary>
            <remarks>Responsável: João Paulo Melo</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.AttributeHelper.#ctor">
            <summary>
            Construtor Customizado
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.AttributeHelper.GetEnumTagValue(System.Object)">
            <summary>
            Metodo que pega o tag de um enumElement 
            </summary>
            <param name="enumElement">o elemento ao qual se deseja pegar o tag</param>
            <returns>a tag de um elemento</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.BASDataSetBase">
            <summary>
            Classe Wrapper para COM do DataSet
            </summary>
            <remarks>Responsável: Paulo Henrique da Silva</remarks>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.BASFieldTypeBase">
            <summary>
            Tipos de campos
            </summary>
            <remarks>Responsável: Paulo Henrique da Silva</remarks>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.BASFieldBase">
            <summary>
            Classe Wrapper para COM do DataColumn
            </summary>
            <remarks>Responsável: Paulo Henrique da Silva</remarks>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.BennerExceptionTier">
            <summary>
            Enumeração que representa a camada onde ocorreu o erro.
            </summary>
            <remarks>Responsável: Paulo Henrique da Silva</remarks>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.BennerException">
            <summary>
            Classe para trabatamento de Exceção dos objetos Benner.
            </summary>
            <remarks>Responsável: Leandro Salvatti Piscke</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BennerException.#ctor">
            <summary>Cria o objeto de exceção</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BennerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construtor protegido utilizado para Deserialização
            </summary>
            <param name="info">Informações de serialização</param>
            <param name="context">Contexto</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BennerException.#ctor(System.String,System.String)">
            <summary>Cria o objeto de exceção</summary>
            <param name="message">Mensagem de erro amigável para o Cliente</param>
            <param name="detail">Mensagem de erro com detalhes para ser analisada pelo Desenvolvedor</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BennerException.#ctor(System.String,System.String,System.Exception)">
            <summary>Cria o objeto de exceção</summary>
            <param name="message">Mensagem de erro amigável para o Cliente</param>
            <param name="detail">Mensagem de erro com detalhes para ser analisada pelo Desenvolvedor</param>
            <param name="inner">Exceção já ocorrida para ser anexada a essa</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BennerException.#ctor(System.String,System.String,System.String)">
            <summary>Cria o objeto de exceção</summary>
            <param name="message">Mensagem de erro amigável para o Cliente</param>
            <param name="detail">Mensagem de erro com detalhes para ser analisada pelo Desenvolvedor</param>
            <param name="from">Origem do erro</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BennerException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>Cria o objeto de exceção</summary>
            <param name="message">Mensagem de erro amigável para o Cliente</param>
            <param name="detail">Mensagem de erro com detalhes para ser analisada pelo Desenvolvedor</param>
            <param name="from">Origem do erro</param>
            <param name="inner">Exceção já ocorrida para ser anexada a essa</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BennerException.#ctor(System.String,System.String,System.String,System.String)">
            <summary>Cria o objeto de exceção</summary>
            <param name="message">Mensagem de erro amigável para o Cliente</param>
            <param name="detail">Mensagem de erro com detalhes para ser analisada pelo Desenvolvedor</param>
            <param name="from">Origem do erro</param>
            <param name="urlTreater">URL para onde a exceção será tratada</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BennerException.#ctor(System.String,System.String,System.String,System.String,System.Exception)">
            <summary>Cria o objeto de exceção</summary>
            <param name="message">Mensagem de erro amigável para o Cliente</param>
            <param name="detail">Mensagem de erro com detalhes para ser analisada pelo Desenvolvedor</param>
            <param name="from">Origem do erro</param>
            <param name="urlTreater">URL para onde a exceção será tratada</param>
            <param name="inner">Exceção já ocorrida para ser anexada a essa</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BennerException.#ctor(System.String,System.String,System.String,Benner.Tecnologia.Common.Legacy.ExceptionKind)">
            <summary>Cria o objeto de exceção</summary>
            <param name="message">Mensagem de erro amigável para o Cliente</param>
            <param name="detail">Mensagem de erro com detalhes para ser analisada pelo Desenvolvedor</param>
            <param name="from">Origem do erro</param>
            <param name="kind">URL para onde a exceção será tratada</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BennerException.#ctor(System.String,System.String,System.String,Benner.Tecnologia.Common.Legacy.ExceptionKind,System.Exception)">
            <summary>Cria o objeto de exceção</summary>
            <param name="message">Mensagem de erro amigável para o Cliente</param>
            <param name="detail">Mensagem de erro com detalhes para ser analisada pelo Desenvolvedor</param>
            <param name="from">Origem do erro</param>
            <param name="kind">URL para onde a exceção será tratada</param>
            <param name="inner">Exceção já ocorrida para ser anexada a essa</param>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.BennerException.Kind">
            <summary>[get/set] Tipo da exceção</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.BennerException.Detail">
            <summary>[get/set] Mensagem detalhada para o desenvolvedor</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.BennerException.UrlTreater">
            <summary>[get/set] URL para onde a exceção será tratada</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.BennerException.From">
            <summary>[get/set] Contém a origem do erro, a pagina ou web service onde o erro aconteceu</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.BennerException.Tier">
            <summary>[get/set] Camada onde ocorreu o erro</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BennerException.DetectTier">
            <summary>
            Detecta a Camada (Apresentação ou Negócios) onde a exception foi criada.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BennerException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Efetua uma serialização customizada
            </summary>
            <param name="info">Informações de serialização</param>
            <param name="context">Contexto</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BennerException.ToString">
            <summary>
            Sobreescrita do Metodo ToString para imprimir uma BennerException com maiores detalhes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BennerException.ToString(System.Boolean)">
            <summary>
            Sobreescrita do Metodo ToString para imprimir uma BennerException com maiores detalhes
            </summary>
            <param name="full">imprime uma Benner Exception com TODOS os detalhes</param>
            <returns>um texto representando uma BennerException</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BennerException.GetBennerException(System.Web.Services.Protocols.SoapException)">
            <summary>
            Converte a SoapException gerada pelo PoolService para uma BennerException.
            Se a exceção passada como parâmetro já for uma BennerException retorna ela mesma.
            Se a exceção não for SoapException nem BennerException é retornada uma BennerException com 
            um aviso sobre a conversão para BennerException.
            </summary>
            <param name="e">Objeto Exception com a Exceção</param>
            <returns>Um objeto BennerException com os mesmos dados da SoapException original</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.BennerLog">
            <summary>Representa o mecanismo de gravação de Logs do sistema</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BennerLog.#ctor(System.String)">
            <summary>Construtor da classe</summary>
            <param name="pathFile">Nome completo do arquivo de log</param>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.BennerLog.PathFile">
            <summary>[get/set] Arquivo no qual será gravado o log</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.BennerLog.MaxFileSize">
            <summary>[get/set] Identifica o tamanho máximo do arquivo de log. Default 2 megabytes.</summary>
            <remarks>Ao atingir o tamanho máximo do arquivo, é retirado a primeira metade do arquivo. 
            Porem para isso é necessário carregar a segunda metade toda na memória. Portanto deve-se ter 
            cuidado ao especificar tamanhos de log muito grandes.</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BennerLog.WriteText(System.String)">
            <summary>Grava um texto no arquivo de log</summary>
            <param name="text">Texto a ser gravado no arquivo de log</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BennerLog.WriteException(System.Exception)">
            <summary>Grava informações de uma Excption no arquivo de log</summary>
            <param name="ex">Exception fonte de informações a serem gravadas no log</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BennerLog.WriteException(System.Exception,System.String)">
            <summary>Grava informações de uma Excption no arquivo de log</summary>
            <param name="ex">Exception fonte de informações a serem gravadas no log</param>
            <param name="moreDetails">Informações extras a serem registradas no log.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BennerLog.Write(System.String)">
            <summary>Grava em um FileStream as informações de uma Exception</summary>
            <param name="text">Texto a ser gravado no log</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BennerLog.OpenFile">
            <summary>Abre o arquivo de log para gravação</summary>
            <returns>Retorna objeto FileStream do arquivo de log</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BennerLog.CloseFile(System.IO.FileStream)">
            <summary>Fecha um arquivo de log</summary>
            <param name="fs">Arquivo a ser fechado</param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.BennerLogEventViewer">
            <summary>Representa o mecanismo de gravação de Logs do sistema</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BennerLogEventViewer.WriteText(System.String)">
            <summary>Grava um texto no arquivo de log</summary>
            <param name="text">Texto a ser gravado no arquivo de log</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BennerLogEventViewer.WriteException(System.Exception)">
            <summary>Grava informações de uma Excption no arquivo de log</summary>
            <param name="ex">Exception fonte de informações a serem gravadas no log</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BennerLogEventViewer.WriteException(System.Exception,System.String)">
            <summary>Grava informações de uma Excption no arquivo de log</summary>
            <param name="ex">Exception fonte de informações a serem gravadas no log</param>
            <param name="moreDetails">Informações extras a serem registradas no log.</param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.BennerLogFlatFile">
            <summary>Representa o mecanismo de gravação de Logs do sistema</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BennerLogFlatFile.#ctor(System.String)">
            <summary>Construtor da classe</summary>
            <param name="pathFile">Nome completo do arquivo de log</param>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.BennerLogFlatFile.PathFile">
            <summary>[get/set] Arquivo no qual será gravado o log</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.BennerLogFlatFile.MaxFileSize">
            <summary>[get/set] Identifica o tamanho máximo do arquivo de log. Default 2 megabytes.</summary>
            <remarks>Ao atingir o tamanho máximo do arquivo, é retirado a primeira metade do arquivo. 
            Porem para isso é necessário carregar a segunda metade toda na memória. Portanto deve-se ter 
            cuidado ao especificar tamanhos de log muito grandes.</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BennerLogFlatFile.WriteText(System.String)">
            <summary>Grava um texto no arquivo de log</summary>
            <param name="text">Texto a ser gravado no arquivo de log</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BennerLogFlatFile.WriteException(System.Exception)">
            <summary>Grava informações de uma Excption no arquivo de log</summary>
            <param name="ex">Exception fonte de informações a serem gravadas no log</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BennerLogFlatFile.WriteException(System.Exception,System.String)">
            <summary>Grava informações de uma Excption no arquivo de log</summary>
            <param name="ex">Exception fonte de informações a serem gravadas no log</param>
            <param name="moreDetails">Informações extras a serem registradas no log.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BennerLogFlatFile.Write(System.String)">
            <summary>Grava em um FileStream as informações de uma Exception</summary>
            <param name="text">Texto a ser gravado no log</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BennerLogFlatFile.OpenFile">
            <summary>Abre o arquivo de log para gravação</summary>
            <returns>Retorna objeto FileStream do arquivo de log</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.BennerLogFlatFileAndEventViewer">
            <summary>
            Representa o mecanismo de gravação de Logs do sistema
            </summary>
            <remarks>
            SMS 749265: Implementação para o HSBC permitindo o registro de erros.log em EventViewer e também em arquivo texto.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BennerLogFlatFileAndEventViewer.WriteText(System.String)">
            <summary>Grava um texto no arquivo de log</summary>
            <param name="text">Texto a ser gravado no arquivo de log</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BennerLogFlatFileAndEventViewer.WriteException(System.Exception)">
            <summary>Grava informações de uma Excption no arquivo de log</summary>
            <param name="ex">Exception fonte de informações a serem gravadas no log</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BennerLogFlatFileAndEventViewer.WriteException(System.Exception,System.String)">
            <summary>Grava informações de uma Excption no arquivo de log</summary>
            <param name="ex">Exception fonte de informações a serem gravadas no log</param>
            <param name="moreDetails">Informações extras a serem registradas no log.</param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.BennerRedirect">
            <summary>Classe para contornar BUG do IE referente ao comando Response.Redirect</summary>
            <remarks>Responsável: Rafael Leonhardt</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BennerRedirect.#ctor">
            <summary>Construtor Customizado</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BennerRedirect.#ctor(Benner.Tecnologia.Common.Legacy.BennerRedirect)">
            <summary>
            Construtor de Cópia
            </summary>
            <param name="src"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BennerRedirect.Redirect(System.String)">
            <summary>Redireciona a aplicação para outra URL</summary>
            <param name="sURL">URL para onde será redirecionado</param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.BennerTokenManager">
            <summary>
            By implementing UsernameTokenManager we can verify the signature
            on messages received.
            </summary>
            <remarks>
            This class includes this demand to ensure that any untrusted
            assemblies cannot invoke this code. This helps mitigate
            brute-force discovery attacks.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BennerTokenManager.#ctor">
            <summary>
            Constructs an instance of this security token manager.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BennerTokenManager.#ctor(System.Xml.XmlNodeList)">
            <summary>
            Constructs an instance of this security token manager.
            </summary>
            <param name="nodes">An XmlNodeList containing XML elements from a configuration file.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BennerTokenManager.AuthenticateToken(Microsoft.Web.Services3.Security.Tokens.UsernameToken)">
            <summary>
            Returns the password or password equivalent for the username provided.
            </summary>
            <param name="token">The username token</param>
            <returns>The password (or password equivalent) for the username</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.BMessage">
            <summary>Representa uma mensagem a ser enviada via BMessageQueue</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.BMessage.State">
            <summary>[get/set] Identifica o estado de uma mensagem da fila</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.BMessage.QueueName">
            <summary>[get/set](Obrigatório) Nome da fila a qual a mensagem pertence. Considerando que a fila já exista em Z_FILAS</summary>
            <remarks>Se a fila ainda não existir deve-se utilizar o método Create do BMessageQueue para criá-la.</remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.BMessage.Subject">
            <summary>[get/set](Opcional) Rótulo da mensagem.</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.BMessage.Body">
            <summary>[get/set](Opcional) Conteúdo serializado da mensagem.</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BMessage.SetBody(System.Object)">
            <summary>Serializa o objeto a ser enviado para a lista de mensagens e atribui o resultado da serialização à propriedade Body</summary>
            <param name="obj">Objeto a ser serializado e atribuído ao Body</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BMessage.GetBody(System.Type)">
            <summary>Deserializa o conteudo da mensagem para um tipo específico informado por parâmetro.</summary>
            <param name="type">Tipo para qual o conteudo da mensagem deverá ser deserializado</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BMessage.GetInstance(System.String,System.Data.IDataReader)">
            <summary>Responsável pela criação de um objeto BMessage baseado em informações do banco de dados</summary>
            <param name="queueName">Nome da fila a qual o objeto pertence</param>
            <param name="dataReader">Objeto de acesso ao banco de dados tendo como ordem das colunas: 0=Handle, 1=Assunto e 2=Corpo.</param>
            <returns>Retorna objeto com a mensagem lida do banco de dados.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BMessage.GetInstance(System.String,System.Data.DataRow)">
            <summary>Responsável pela criação de um objeto BMessage baseado em informações do banco de dados</summary>
            <param name="queueName">Nome da fila a qual o objeto pertence</param>
            <param name="row">Registro de z_wffilamensagens tendo como ordem das colunas: 0=Handle, 1=Assunto e 2=Corpo.</param>
            <returns>Retorna objeto com a mensagem lida do banco de dados.</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.BMessageQueueTransaction">
            <summary>Fornece informações internas para controle de transacao na leitura de uma mensagem</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.BMessageQueueTransaction.#ctor(System.Int32,System.Guid)">
            <summary>Construtor padrão</summary>
            <param name="handle">Handle de Z_FILAMENSAGENS</param>
            <param name="guid">Identificar único de um registro de Z_FILAMENSAGENS</param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.Chronometer">
            <summary>
            Gerenciador de tempos de rotinas por requisicao e por sessao de usuario, e tambem responsavel por salvar logs
            essa classe eh parte de um plano para medir locais de gargalo e de baixa performance do sistema
            </summary>
            <remarks>Responsável: João Paulo Melo</remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.Chronometer.ShouldColectStatistics">
            <summary>
            Indica quando o sistema permite fazer controle de estatisticas
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.Chronometer.LowerBoundStatistics">
            <summary>
            indica o tempo minimo(Milisseconds) para determinada rotina entrar na estatística
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.Chronometer.LowerTimeStatistics">
            <summary>
            indica o tempo minimo(DateTime) para determinada rotina entrar na estatística
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.DriverType">
            <summary>
            Drivers Suportados.
            </summary>
            <remarks>Responsável: Paulo Henrique da Silva</remarks>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.LangType">
            <summary>
            Drivers de linguagem (acentuação).
            </summary>
            <remarks>Responsável: Paulo Henrique da Silva</remarks>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.DBConnectionInfo">
            <summary>
            Utilitário para conexão com o banco de dados
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.DBConnectionInfo.GetConnectionDriver(System.String,System.Boolean)">
            <summary>
            Obtém o DriverType para um sistema
            </summary>
            <param name="driver">Driver em string que é retornado pelo Super Server</param>
            <param name="oracleClob">Indica se deve utilizar CLOBs em Oracle</param>
            <returns>Retorna um valor do tipo DriverType equivalente ao tipo do Super Server. Irá retornar DriverType.UNKNOWN caso o banco não seja suportado</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.DBConnectionInfo.GetConnectionLang(System.String)">
            <summary>
            Obtém o LangType para um sistema
            </summary>
            <param name="lang">Lang Driver em string que é retornado pelo Super Server</param>
            <returns>Retorna um valor do tipo LangType equivalente ao tipo do Super Server</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.DBConnectionInfo.GetConnectionString(Benner.Tecnologia.Common.Legacy.DriverType,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Obtém uma ConnectionString para as informações de acesso passadas como parâmetro
            </summary>
            <param name="driverType">DriverType representando o banco de dados</param>
            <param name="server">Nome do servidor retornado pelo Super Server</param>
            <param name="database">Nome do banco de dados retornado pelo Super Server</param>
            <param name="username">Nome do usuário retornado pelo Super Server</param>
            <param name="password">Senha do usuário retornada pelo Super Server</param>
            <param name="trusted">Se deve utilizar conexão confiável (sem usuário e senha na ConnectionString)</param>
            <returns>Retorna uma ConnectionString de acordo com os parâmetros passados</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.LogCategories">
            <summary>
            Categorias de erros para o LogEngine
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.TablePermissions">
            <summary>
            Flags de segurança.
            </summary>
            <remarks>Responsável: Paulo Henrique da Silva</remarks>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.PoolConsts">
            <summary>
            Constantes da pool também utilizadas pela camada de apresentação
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.Consts">
            <summary>
            Summary description for Consts.
            </summary>
            <remarks>Responsável: Leandro Salvatti Piscke</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.Consts.#ctor">
            <summary>
            Construtor Customizado
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.Consts.CurrentVersion">
            <summary>
            A versão atual do assembly
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.Consts.LastLevelField">
            <summary>
            Nome padrão do campo de Ultimo nível de uma tabela estruturada
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.Consts.UpperLevelField">
            <summary>
            Nome padrão de campo de nível superior de uma tabela estruturada
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.Consts.IsPreview">
            <summary>
            Indica quando estamos executando o PREVIEW tando de visão quanto de estilo
            </summary>
            <value>
            	<c>true</c> if this instance is preview; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.Consts.RefreshAppCaches">
            <summary>
            [get/set] Flag que indica quando é necessário refrescar o cache de aplicação
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.Consts.RegexArrobaCampo">
            <summary>
            Expressao Regular padrao para identificar um "@CAMPO(  )"
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.Consts.RegexArrobaTilCampo">
            <summary>
            Expressao Regular padrao para identificar um "@~CAMPO(  )"
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.Consts.RegexArrobaRastro">
            <summary>
            Expressao Regular padrao para identificar um "@RASTRO(nome_da_tabela)"
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.Consts.RegexArrobaTabela">
            <summary>
            Expressao Regular padrao para identificar um "@TABELA(nome_da_tabela)"
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.Consts.RegexArrobaNomeCampo">
            <summary>
            Expressão Regular padrão para identificar um @NOMECAMPO, atenção, 
            essa Regex acaba retornando @CAMPO, @~CAMPO e @RASTRO, portanto dependendo do contexto, faça os devidos tratamentos
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.Consts.RegexANomeCampoIgualValorCampo">
            <summary>
            Expressão Regular padrão identificar o A.[NOMECAMPO]=[VALORCAMPO]
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.Consts.RegexEMail">
            <summary>
            Exmpressao Regular padrao para identificar um endereco de e-mail
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.Consts.RegexURL">
            <summary>
            Exmpressao Regular padrao para identificar um endereco de e-mail
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.Consts.UrlBase">
            <summary>
            Gets the URL base.
            </summary>
            <value>The URL base.</value>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.Consts.EncodeProtocol">
            <summary>Flag que identifica se a URL do PTP e do G2P é criptografada</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.Consts.DefaultEncodeProtocol">
            <summary>Flag que identifica se a URL do PTP e do G2P é criptografada</summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.CRC16">
            <summary>Classe responsavel pela geracao e validação de chaves CRCs</summary>
            <remarks>Responsável: Rafael Leonhardt</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.CRC16.VerifyCRC(System.Byte[],System.Byte[])">
            <summary>Comparar o CRC gerado por um conjunto de dados e comparar com o CRC passado por parâmetro, 
            identificando se o conjunto de dados não está corrompido, ou seja, se possue o mesmo CRC que informado por parâmetro</summary>
            <param name="data">Conjunto de dados a ser validado</param>
            <param name="crc">Chave CRC gerada a ser comparada com a chave CRC que será gerada pelo conjunto de dados</param>
            <returns>Retorna true se o conjunto de dados corresponde ao CRC informado por parametro, caso contrário retorna false</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.CRC16.GenerateCRC(System.Byte[])">
            <summary>Gerar uma chave CRC baseada num conjunto de dados passado por parâmetro</summary>
            <param name="data">Conjunto de dados que dará origem a uma chave CRC</param>
            <returns>Retorna uma chave CRC de dois bytes</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.CriptoString">
            <summary>Classe responsável pela criptografia de uma string utilizando o algoritmo de cifras de transposicao</summary>
            <remarks>
            <para>Algoritmo de  Cifras de Transposição</para>
            <para>Muda a ordem das letras.</para>
            <para>Por exemplo:</para>
            	<para>Para cifrar o texto "transferir um mil"</para>
            	<para>A cifra se baseia em uma chave que é uma palavra ou frase. No exemplo é "disco". </para>
            	<para>A chave servirá de apoio para enumerar as colunas.</para>
            	<para>Palavra chave = "d i .s c o"</para>
            	<para>.............................(2 3 5 1 4) </para>
            	<para>A mensagem é escrita abaixo da chave , de 5 em 5 letras (que é a mesma quantidade de letras da chave).</para>
            	<para>Palavra chave = "d i .s c o"</para>
            	<para>............................(2 3 5 1 4) </para>
            	<para>..............................t .r a n s</para>
            	<para>..............................f .e r .i .r</para>
            	<para>..............................u m m i l </para>
            	<para>O texto é lido na vertical, conforme a ordem dessas colunas.</para>
            	<para>Resultando em "niitfuremsrlarm"</para>
            <para>Responsável: Rafael Leonhardt</para>
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.CriptoString.Criptografar(System.String)">
            <summary>Criptografar uma string passada por parâmetro</summary>
            <param name="valor">String a ser criptografada</param>
            <returns>Retorna string resultante do processo de criptografia</returns>
            <remarks>Ao criptogafar, na string resultante é adicionado dois caracteres ("[" e "]") delimitando 
            o inicio e fim da string. Estes delimitadores são colocados para previnir erros ao descriptografar,
            por exemplo, no caso do ultimo caracter for um espaco em branco o que se utilizado em uma URL daria
            problema pois poderia ser excluido o espaco em branco.</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.CriptoString.Descriptografar(System.String)">
            <summary>Descriptografa uma string passada por parâmetro</summary>
            <param name="valor">String a ser descriptografada</param>
            <returns>Retorna string resultante do processo de descriptografia</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.CriptoString.ToBase64(System.String)">
            <summary>
            Tranforma um texto plano em texto 'base 64'
            </summary>
            <param name="valor"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.CriptoString.FromBase64(System.String)">
            <summary>
            Tranforma um texto 'base 64' em texto plano.
            </summary>
            <param name="valor"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.CriptoString.StrToByteArray(System.String)">
            <summary>
            transforma uma string em um array de bytes sem tratar ou alterar o encoding
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.CriptoString.ByteArrayToStr(System.Byte[])">
            <summary>
            transforma um array de bytes em uma string sem tratar ou alterar o encoding
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="F:Benner.Tecnologia.Common.Legacy.CriptoString.InitializationVector">
            <summary>
            Vetor de Initialização utilizado nas rotinas de criptografia
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.CriptoString.Encrypt(System.String,System.String)">
            <summary>
            Encrypts the text using RijndaelManaged 256-bits encryption. Using the provided encryption key
            </summary>
            <param name="textToEncrypt">The text to encrypt.</param>
            <param name="encryptKey">The encryption key (24 characters).</param>
            <returns>A base64 encoded string that represents the encrypted data</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.CriptoString.Decrypt(System.String,System.String)">
            <summary>
            Decrypts the text using RijndaelManaged 256-bits encryption. Using the provided encryption key
            </summary>
            <param name="textToDecrypt">The base64 encrypted string.</param>
            <param name="decryptKey">The encryption key (24 characters).</param>
            <returns>A decrypted string</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.EncoderString">
            <summary>
            Classe responsável pela codificação e decodificação de textos 
            para que seja possível o uso do texto em uma URL</summary>
            <remarks>Responsável: Rafael Leonhardt</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.EncoderString.Encode(System.String)">
            <summary>Codificar texto para suportar uso em uma URL, substituindo alguns caracteres por outros</summary>
            <param name="str">Texto a ser codificado</param>
            <returns>Retorna o texto resultante da codificação</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.EncoderString.Decode(System.String)">
            <summary>Decodificar texto que foi codificado para suportar uso em uma URL</summary>
            <param name="str">Texto a ser decodificado</param>
            <returns>Retorna o texto resultante da decodificação</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.StringSubType">
            <summary>
            Enumeracao que indica o subtipo de uma string
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Legacy.StringSubType.None">
            <summary>Indica que o subTipo é nada (valor default)</summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Legacy.StringSubType.URLHTTP">
            <summary>Indica que o subTipo é URL HTTP</summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Legacy.StringSubType.EMail">
            <summary>Indica que o subTipo é E-Mail</summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.SortMode">
            <summary>
            Enumeracao que indica o modo de ordenacao de ordenacao
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Legacy.SortMode.Ascend">
            <summary>Indica uma ordenacao Ascendente</summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Legacy.SortMode.Descend">
            <summary>Indica uma ordenacao Descendente</summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.EnumTagAttribute">
            <summary>
            Classe que implementa um Custom Attribute que guarda um valor string para Enums
            </summary>
            <remarks>Responsável: João Paulo Melo</remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.EnumTagAttribute.Tag">
            <summary>
            Pega o valor da Tag do Custom Attribute
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.EnumTagAttribute.#ctor(System.String)">
            <summary>
            Constutor customizado
            </summary>
            <param name="tag"></param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.ExceptionContext">
            <summary>
            Classe que implementa um objeto ExceptionContext
            abrange um conjunto de informacoes referente ao contexto do ambiente no momento da excecao
            </summary>
            <remarks>Responsável: João Paulo Melo</remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ExceptionContext.ReportDateFormated">
            <summary>
            Pega a data e hora formatado em 01/05/2004 12:45:01
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ExceptionContext.CompanyName">
            <summary>
            Pega ou altera o nome do cliente atual
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ExceptionContext.SystemName">
            <summary>
            Pega ou altera o nome da sistema atual
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ExceptionContext.SendMailTo">
            <summary>
            Pega a lista de emails que este relatorio deverá ser enviado
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ExceptionContext.FileName">
            <summary>
            Pega o nome do relatorio atual
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.ExceptionContext.#ctor">
            <summary>
            Construtor Default
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.ExceptionContext.#ctor(Benner.Tecnologia.Common.Legacy.BennerException,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Construtor Customizado
            </summary>
            <param name="exception">a excecao do contexto</param>
            <param name="userReport">o texto criado pelo usuario</param>
            <param name="driver">o driver de Banco de dados utilizado</param>
            <param name="pyxisVersion">a versao do pyxis</param>
            <param name="companyName">o nome do cliente</param>
            <param name="moreDetails">mais informacoes</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.ExceptionContext.SetReportId">
            <summary>
            Atribui um identificador unico ao relatorio corrente
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.ExceptionContext.CreateReportId(System.String)">
            <summary>
            Cria um identificador unico apartir do reportDate
            </summary>
            <param name="reportDate"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.ExceptionContext.ToString">
            <summary>
            Converte o objeto atual para uma string em formato xml
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.ExceptionContext.FromString(System.String)">
            <summary>
            Le a string q deve vir em formato xml e atribui os valores para o objeto atual
            </summary>
            <param name="contextException"></param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.ExceptionContextComparer">
            <summary>
            Classe que implementa um Comparer utilizado para ordenar objetos do tipo ExceptionContext
            </summary>
            <remarks>Responsável: João Paulo Melo</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.ExceptionContextComparer.#ctor(Benner.Tecnologia.Common.Legacy.SortMode)">
            <summary>
            Costrutor Default
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.ExceptionRecordNotFound">
            <summary>
            Summary description for ExceptionRecordNotFound.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.FilterExceptionFieldNotFound">
            <summary>
            Representa uma exceção ao aplicar um filtro sobre um conjunto de dados.
            Esta exceção é dispara quando é aplicado um filtro que contém um campo 
            o qual não existe na visão.</summary>
            <remarks>Responsável: Rafael Leonhardt</remarks>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.HtmlAccessKey">
            <summary>
            Classe responsável pela montagem das propriedades 
            de uma tag HTML para uso de teclas de atalho
            </summary>
            <remarks>Responsável: Rafael Leonhardt</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.HtmlAccessKey.GetTagToLink(System.String,System.Char)">
            <summary>Obtem as propriedades html que formam uma tecla de atalho na web</summary>
            <param name="title">Hint para ser exibido sobre o link. Exemplo: "Salvar (ALT + S)"</param>
            <param name="key">Tecla de atalho</param>
            <returns>Retorna string com as propriedades html preenchidas</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.HtmlAccessKey.GetTag(System.Char)">
            <summary>Obtem as propriedades html que formam uma tecla de atalho na web</summary>
            <param name="key">Tecla de atalho</param>
            <returns>Retorna string com as propriedades html preenchidas</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.HtmlUtils">
            <summary>Classe de métodos utilitários e estáticos referente ao tratamento de textos html</summary>
            <remarks>Responsável: Rafael Leonhardt</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.HtmlUtils.RemoveTags(System.String)">
            <summary>Remove todas as tags htmls de um texto</summary>
            <param name="text">Texto a ser analisado</param>
            <returns>Retorna texto sem as tags htmls</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.HtmlUtils.GetUrlPath(System.String,System.Web.HttpRequest)">
            <summary>Monta o caminho do cubo para utilizar com o document.aspx</summary>
            <param name="href">Url sem o caminho</param>
            <param name="request"></param>
            <returns>Url com o caminho</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.ImagesUtils">
            <summary>Classe responsavel pela geração de ThumbNail de uma imagem</summary>
            <remarks>Referências:
            	<para>+ http://www.eggheadcafe.com/articles/20030515.asp</para>
            	<para>+ http://www.dotnetjunkies.com/404/?aspxerrorpath=/tutorials.aspx?tutorialid=488</para>
            	<para>+ http://www.dotnetjunkies.com/Article/34847D05-3AE0-4471-9AFA-0FB80FA81F1E.dcik</para>
            	<para>Responsável: Rafael Leonhardt</para>
            </remarks>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.ImagesUtils.GridImageSize">
            <summary>Enumerador que indica o tamanho que um campo imagem deve assumir para Grids</summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Legacy.ImagesUtils.GridImageSize.Small">
            <summary>Indica que o tamanho da imagem deve ser Pequeno</summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Legacy.ImagesUtils.GridImageSize.Medium">
            <summary>Indica que o tamanho da imagem deve ser Médio</summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Legacy.ImagesUtils.GridImageSize.Large">
            <summary>Indica que o tamanho da imagem deve ser Grande</summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.ImagesUtils.FormImageSize">
            <summary>Enumerador que indica o tamanho que um campo imagem deve assumir para Forms</summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Legacy.ImagesUtils.FormImageSize.Small">
            <summary>Indica que o tamanho da imagem deve ser Pequeno</summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Legacy.ImagesUtils.FormImageSize.Medium">
            <summary>Indica que o tamanho da imagem deve ser Médio</summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Legacy.ImagesUtils.FormImageSize.Large">
            <summary>Indica que o tamanho da imagem deve ser Grande</summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Legacy.ImagesUtils.FormImageSize.Unlimited">
            <summary>Indica que o tamanho da imagem deve ter sua Altura com tamanho Original</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.ImagesUtils.GetImageDimension(Benner.Tecnologia.Common.Legacy.ImagesUtils.GridImageSize,System.Int32@,System.Int32@)">
            <summary>Obtem as dimensões padrão de uma imagem para ser exibida no grid</summary>
            <param name="imgSize">Tamanho desejado da imagem</param>
            <param name="width">Parâmetro de retorno com a largura máxima da imagem</param>
            <param name="height">Parâmetro de retorno com a altura máxima da imagem</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.ImagesUtils.GetImageDimension(Benner.Tecnologia.Common.Legacy.ImagesUtils.FormImageSize,System.Int32@,System.Int32@)">
            <summary>Obtem as dimensões padrão de uma imagem para ser exibida no formulário</summary>
            <param name="imgSize">Tamanho desejado da imagem</param>
            <param name="width">Parâmetro de retorno com a largura máxima da imagem</param>
            <param name="height">Parâmetro de retorno com a altura máxima da imagem</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.ImagesUtils.GetThumbNail(System.IO.MemoryStream,System.Drawing.Imaging.ImageFormat,System.Int32,System.Int32)">
            <summary>Gerar um ThumbNail de uma imagem passada por parametro</summary>
            <param name="imageStream">Imagem de origem no formato de stream</param>
            <param name="format">Formato a ser gerado o ThumbNail</param>
            <param name="width">Largura do thumbnail em pixels</param>
            <param name="height">Altura do thumbnail em pixels</param>
            <returns>Retorna o thumbnail gerado na forma de stream</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.ImagesUtils.GetThumbNail(System.IO.MemoryStream,System.Drawing.Imaging.ImageFormat,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>Gerar um ThumbNail de uma imagem passada por parametro</summary>
            <param name="imageStream">Imagem de origem no formato de stream</param>
            <param name="format">Formato a ser gerado o ThumbNail</param>
            <param name="width">Largura do thumbnail em pixels</param>
            <param name="height">Altura do thumbnail em pixels</param>
            <param name="ratio">Manter a proporção da imagem</param>
            <param name="squareImage">Cortar a imagem para que fique quadrada</param>
            <returns>Retorna o thumbnail gerado na forma de stream</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.ImagesUtils.GetThumbNail(System.String,System.Drawing.Imaging.ImageFormat@,System.Int32,System.Int32)">
            <summary>Gerar um ThumbNail de uma imagem passada por parametro</summary>
            <param name="imagePath">Path completo da imagem de origem</param>
            <param name="format">Formato a ser gerado o ThumbNail</param>
            <param name="width">Largura do thumbnail em pixels</param>
            <param name="height">Altura do thumbnail em pixels</param>
            <returns>Retorna o thumbnail gerado na forma de stream</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.ImagesUtils.GetThumbNail(System.String,System.Drawing.Imaging.ImageFormat@)">
            <summary>Gerar um ThumbNail de uma imagem passada por parametro</summary>
            <param name="imagePath">Path completo da imagem de origem</param>
            <param name="format">Formato a ser gerado o ThumbNail</param>
            <returns>Retorna a imagem no tamanho original na forma de stream</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.ImagesUtils.GetThumbNail(System.String,System.Drawing.Imaging.ImageFormat@,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>Gerar um ThumbNail de uma imagem passada por parametro</summary>
            <param name="imagePath">Path completo da imagem de origem</param>
            <param name="format">Formato a ser gerado o ThumbNail</param>
            <param name="width">Largura do thumbnail em pixels</param>
            <param name="height">Altura do thumbnail em pixels</param>
            <param name="ratio">Manter a proporção da imagem</param>
            <param name="squareImage">Cortar a imagem para que fique quadrada</param>
            <returns>Retorna o thumbnail gerado na forma de stream</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.ImagesUtils.GetThumbNail(System.Drawing.Image,System.Drawing.Imaging.ImageFormat,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>Gerar um ThumbNail de uma imagem passada por parâmetro.</summary>
            <param name="image">Imagem de origem</param>
            <param name="format">Formato a ser gerado o ThumbNail</param>
            <param name="width">Largura do thumbnail em pixels</param>
            <param name="height">Altura do thumbnail em pixels</param>
            <param name="ratio">Manter a proporção da imagem</param>
            <param name="squareImage">Cortar a imagem para que fique quadrada</param>
            <returns>Retorna o thumbnail gerado na forma de stream</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.ImagesUtils.GetThumbNailVoid(System.Drawing.Imaging.ImageFormat,System.Int32,System.Int32)">
            <summary>Criar um ThumbNail com o texto "Sem imagem"</summary>
            <param name="format">Formato a ser gerado o ThumbNail</param>
            <param name="width">Largura do thumbnail em pixels</param>
            <param name="height">Altura do thumbnail em pixels</param>
            <returns>Retorna o thumbnail criado na forma de stream</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.ImagesUtils.GetImageStreamFromBytes(System.Byte[])">
            <summary>
            Obtém o MemoryStream da imagem a partir de um array de bytes.
            </summary>
            <param name="bytes">Array de bytes da imagem</param>
            <returns>O MemoryStream da imagem</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.ImagesUtils.GetImageFormat(System.IO.MemoryStream)">
            <summary>
            Obtém o formato da imagem armazenada no stream
            </summary>
            <remarks>Responsável: Paulo Henrique da Silva</remarks>
            <param name="imageStream">Stream com a imagem</param>
            <returns>O formato da imagem</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.InfoDescriptionControl">
            <summary>Representa o objeto de acesso à mensagem de InfoDescription</summary>
            <remarks>Responsável: Rafael Leonhardt</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.InfoDescriptionControl.ExistMessage">
            <summary>Identifica se existe uma mensagem de InfoDescription para ser exibida</summary>
            <returns>Retorna 'true' se existe uma mensagem de InfoDescription. Caso contrário retorna 'false'.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.InfoDescriptionControl.GetMessage">
            <summary>Obtem a mensagem de InfoDescription. Após obtê-la, a mesma é retirada da sessão.</summary>
            <returns>Retorna a mesnagem de InfoDescription armazenada na sessão.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.InfoDescriptionControl.Clear">
            <summary>Limpa da sessão a mensagem de InfoDescription</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.InfoDescriptionControl.SetMessage(System.String)">
            <summary>Armazena a mensagem de InfoDescription na sessão</summary>
            <param name="msg">Mensagem de InfoDescription a ser armazenada na sessão</param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.IOHelper">
            <summary>
            Classe dedicada a manipular principalmente criacao de diretorios
            </summary>
            <remarks>Responsável: João Paulo Melo</remarks>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.LegacyConsts">
            <summary>
            Constantes transcritas do Delphi para .NET
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.ManagerFile">
            <summary>
            Gerenciador de Configurações. Fornecendo acesso a diversas configurações do sistema.
            </summary>
            <remarks>Responsável: João Paulo Melo</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.ManagerFile.#ctor">
            <summary>
            Construtor Customizado
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.StartPoint">
            <summary>Ponto inicial</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.ApplicationHandle">
            <summary>O Handle da Applicacao Atual</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.CustomerName">
            <summary>
            Nome do Cliente
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.UrlHelpBennerWiki">
            <summary>
            Url para do Help Online
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.SystemName">
            <summary>
            Nome do Sistema
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.AdminMailList">
            <summary>
            Lista de mails de administradores do sistema, que devemos enviar relatorios de erro, emails separados por vírgula
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.GridMasterRecordsToView">
            <summary>Fração de registros a ser mostrado no grid principal</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.GridChildRecordsToView">
            <summary>Fração de registros a ser mostrado no grid filho</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.ShouldTranslate">
            <summary>Indica se a aplicacao deve utilizar ou nao o recurso de traducoes e jargoes</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.Title">
            <summary>Título</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.PoolName">
            <summary>Nome do pool</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.PathAuthentication">
            <summary>Diretório onde é gerado os arquivos de autenticação</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.ServicesDirPath">
            <summary>Diretório onde estao os servicos customizados (projeto hydra)</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.CacheDirPath">
            <summary>Diretório onde estao os arquivos de cache do sistema</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.TempDirectory">
            <summary>
            Diretório utilizado para uploads e outros
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.LibraryFullPath">
            <summary>O full path do arquivo de cache de bibliotecas</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.PermissionAccessFullPath">
            <summary>O full path do arquivo de cache de permissoes de acesso por aplicacoes</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.WildCard">
            <summary>Flag que identifica se é permitido o uso de coringa numa string sql</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.OneLinkPerLine">
            <summary>Indica se os links devem ocupar uma linha cada um no formulário</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.ShowClosedGridLink">
            <summary>
            Indica se devemos mostrar link em grids fechados.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.IgnoreAuthenticationAgainstLDAP">
            <summary>
            Indica se o login de usuário deverá ignorar a autenticação de usuário para este aplicativo.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.ExternalLogin">
            <summary>Flag que identifica se o login está sendo feito por uma pagina externa</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.LogoffDestination">
            <summary>
            Propriedade que identifica a URL de destino depois de um LogOff
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.LoginDestination">
            <summary>
            Indica qual o arquivo que implementa a interface do login
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.IsCustomLogin">
            <summary>
            Indica qual o arquivo que implementa a interface do login
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.IdentifyText">
            <summary>
            Texto utilizado para o label de identificacao no formulario de login
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.SendReportError">
            <summary>
            Indica se é permitido enviar relatórios de erros para o servidor da benner
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.AnonymousLoginInfo">
            <summary>
            Pega as informacoes sobre login anonimo
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.ValidateUserIP">
            <summary>
            Indica quando é necessário validar o ip do usuario, caso este item esteja ausente no arquivo, será assumido true
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.LoginCaption">
            <summary>Legenda do item 'Login'</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.LogoffCaption">
            <summary>Legenda do item 'Logoff'</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.ShowTime">
            <summary>Identifica se a aplicação deverá exibir dados estatísticos de tempo de execução</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.IntegrateCompanyAndBranch">
            <summary>Identifica se a aplicação deverá exibir dados estatísticos de tempo de execução</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.ShowVersion">
            <summary>Identifica se a aplicação deverá exibir informações sobre o produto ou o servidor.</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.PingEnabled">
            <summary>Identifica se a aplicação executar o keepalive evitando a expiração da sessão.</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.Statistics">
            <summary>Indica o LowerBound de estatisticas de tempo, caso nao exista, retorna -1</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.AllowedFileExtensions">
            <summary>Indica as extenções de arquivos suportados por campos tipo arquivo.</summary>
            <remarks>
            podendo ser mais do que um (separados por ponto-e-vírgula): "DOC; DOT; XLS"
            caso nenhum seja especificado, é retornado uma string vaiza: ""
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.ShowBranchLink">
            <summary>
            Indica quando deve ser mostrado o link de empresa.
            </summary>
            <value><c>true</c> if [show branch link]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.ShowUserLink">
            <summary>
            Indica quando deve ser mostrado o link de usuário.
            </summary>
            <value><c>true</c> if [show user link]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.DbCommandTimeout">
            <summary>
            Recupera o tempo em segundos da configuração de dbCommandTimeout. Senão configurada utiliza a ExecutionTimeout
            </summary>
            <remarks>Esta configuração é utilizada e configura no DbCommand.CommandTimeout</remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.ExecutionTimeout">
            <summary>
            Recupera o tempo em segundos da configuração httpRuntime executionTimeOut. O default é 110, e a configuração só funciona se o debug no compilation for false.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.DefaultPathAuthentication">
            <summary>Diretório onde é gerado os arquivos de autenticação</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.DefaultCachePath">
            <summary>Diretório onde esta os arquivos gsv com os DataStyles</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.UseNewQueryWflInbox">
            <summary>Indica que a caixa de entrada ("Minhas tarefas") do Workflow irá utilizar as novas querys</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ManagerFile.UseCitibankQueryInbox">
            <summary>Indica que a query da caixa de entrada será uma query especial para o cliente Citibank</summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.Measurer">
            <summary>
            Objeto Measurer que representa ...
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.Measurer.#ctor(System.Web.HttpApplicationState)">
            <summary>Contrutor da classe Measurer</summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.MeasurerItem">
            <summary>
            Objeto MeasurerItem que representa ...
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.PerfCounterDef">
            <summary>
            Definição de contador, um atalho para o Factory de contadores
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.PerfCounterDef.#ctor(Benner.Tecnologia.Common.Legacy.PerfCountersFactory,System.Int32)">
            <summary>
            Cria uma definição de contador a partir do índice
            </summary>
            <param name="countersFactory">Factory de contadores</param>
            <param name="counterId">Índice da definição de contador</param>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.PerfCounterDef.Item(System.String)">
            <summary>
            Obtém um PerformaceCounter
            </summary>
            <param name="instanceName">Nome da instância do contador</param>
            <returns>Retorma um PerformanceCounter</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.PerfCounterDef.counter_Disposed(System.Object,System.EventArgs)">
            <summary>
            Remove contador do cache quando for liberado
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.PerfCountersFactory">
            <summary>
            Factory para criação de contadores
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.PerfCountersFactory.Registered">
            <summary>
            Retorna true se os contadores podem ser utilizados
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.PerfCountersFactory.RegisterException">
            <summary>
            Erro 
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.PerfCountersFactory.#ctor(System.String,System.String)">
            <summary>
            Instancia o Factory de contadores
            </summary>
            <param name="categoryName">Nome da categoria de contadorse</param>
            <param name="categoryHelp">Texto com a descrição da categoria do contador</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.PerfCountersFactory.AddCounterDef(System.String,System.String,System.Diagnostics.PerformanceCounterType)">
            <summary>
            Adiciona uma definição de contador no Factory
            </summary>
            <param name="name">Nome do contador</param>
            <param name="help">Texto com a descrição do contador</param>
            <param name="type">Tipo do contador</param>
            <returns>Retorna uma definição de contador. A partir dela é possível obter o contador de fato</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.PerfCountersFactory.RegisterCounters">
            <summary>
            Cria os contadores no Windows
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.PerfCountersFactory.TestCounters">
            <summary>
            Testa os contadores definidos
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.PerfCountersFactory.NewCounterInstance(System.Int32,System.String)">
            <summary>
            Obtém uma nova instância contador de performance baseado no índice da sua definição
            </summary>
            <param name="counterId">Índice da definição do contador</param>
            <param name="instance">Nome da instância</param>
            <returns>Retorna um PerformanceCounter</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.PermissionAccess">
            <summary>
            Objeto que descreve um grupo permissao de uma aplicacao
            </summary>
            <remarks>Responsável: João Paulo Melo</remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.PermissionAccess.GroupName">
            <summary>
            [get/set] O nome do grupo de usuarios
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.PermissionAccess.GroupHandle">
            <summary>
            [get/set] O handle do grupo de usuarios
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.PermissionAccess.#ctor">
            <summary>
            Construtor Default
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.PermissionAccess.#ctor(System.Xml.XmlNode)">
            <summary>
            Construtor Customizado
            </summary>
            <param name="groupNode"></param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.ProcessTimeControl">
             <summary>Responsável pelo controle do tempo de processamento do sistema.</summary>
             <remarks>
            	/-----------------------------------------------------------------------------\
            	Controle de Tempo
             O controle de tempo pode ser iniciado pelo FormPost, PageMain ou PagePopup. 
             Após iniciado o controle de tempo ele é pausado ou parado. Sendo que o tempo 
             só é parado caso entrar na rotina que pinta o tempo na tela. 
             Caso não seja pintado o mesmo é pausado. Isto é devido que o fluxo da web 
             pode inicar por diversos meios, por exemplo:
             1)
               a) Um clique (Salvar) chama o FormPost, que inicia o controle de tempo, 
               executa tudo que precisa e ao final Pausa o controle de tempo.
               
               b) No final do FormPost é feito um redirect para o pagemain, que ao iniciar 
               irá dar um Continue, para somar o tempo consumido no FormPost mais o tempo 
               que será consumido pelo PageMain.
            
            	  c) No final do PageMain é parado o controle de tempo e o mesmo é exibido na tela.
            
            	Observações:
            
            		- Além disso, caso ocorra algum erro entre a navegação, e por acaso cair no 
            		login.aspx ou no PrivateError.aspx, o tempo é resetado para evitar contagem errônea
            		assim que voltar a acessar um pagemain.aspx.
            
            		- Além do tempo total do ProcessTimeControl é posto a quantidade de "Continue"
            		dado pelo controle de tempo, ele é util para verificar se a contagem possue 
            		alguma discrepancia, sendo que um Continue geralmente é dado após um redirect
            		o que desta forma permite controlar quantos redirects foram dados.
            
            		- O Tempo de Macro é composto pelo tempo que vem na ExtendedProperties do DataSet, 
            		que é o tempo de abertura da macro, mais o tempo de macro retornado no ServiceQuery 
            		nos objetos PostInfo e derivados.
            
            		- Sempre que o controle de tempo é iniciado todos os dados são resetados para 
            		iniciar a contagem de tempo.
            	 
            	/-----------------------------------------------------------------------------\
             <para>Utiliza objeto de sessão para armazenar os dados de controle.</para>
             <para>Responsável: Rafael Leonhardt</para></remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.ProcessTimeControl.GetTimeControl">
            <summary>Obtem o atual objeto de controle armazenado na sessão</summary>
            <returns>Retorna o objeto TimeControl mantido na sessão. Caso contrário retorna nulo.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.ProcessTimeControl.SetTimeControl(Benner.Tecnologia.Common.Legacy.ProcessTimeControl.TimeControl)">
            <summary>Atribui na sessão um objeto TimeControl</summary>
            <param name="tc">Objeto TimeControl a ser persistido na sessão</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.ProcessTimeControl.GetTimeMacro">
            <summary>Obtem o atual objeto de controle de macro armazenado na sessão</summary>
            <returns>Retorna o objeto TimeControl mantido na sessão. Caso contrário retorna nulo.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.ProcessTimeControl.SetTimeMacro(System.TimeSpan)">
            <summary>Atribui na sessão um objeto TimeSpan de controle dos tempos de macro</summary>
            <param name="ts">Objeto TimeSpan a ser persistido na sessão</param>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ProcessTimeControl.TimeMacro">
            <summary>[get] Identifica o total de milisegundos consumido pela macro</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ProcessTimeControl.TimeSpanMacro">
            <summary>[get] Identifica o tempo consumido pela macro</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ProcessTimeControl.Continues">
            <summary>[get] Identifica o quantidade de comandos Continue disparado</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ProcessTimeControl.Time">
            <summary>[get] Identifica o tempo total consumido desde que foi disparado o método Start().</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ProcessTimeControl.Status">
            <summary>[get] Identifica o estado do controlador</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.ProcessTimeControl.Start">
            <summary>Inicia o controlador de tempo, zerando qualquer informação anterior a este comando exceto tempos de macro.</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.ProcessTimeControl.StartContinue">
            <summary>Inicia o controlador de tempo. Caso ele esteja Paused, executa um Continue()</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.ProcessTimeControl.Pause">
            <summary>Suspende o controlador de tempo. Para reiniciar deve-se utilizar o método Continue ou StartContinue.</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.ProcessTimeControl.Continue">
            <summary>Reinicia o controlador de tempo a partir deste instante</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.ProcessTimeControl.Stop">
            <summary>Encerra o controlador de tempo</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.ProcessTimeControl.Reset">
            <summary>Encerra o controle de tempo e apaga os dados de controle</summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.ProcessTimeControl.TimeControl">
            <summary>Classe responsável pela lógica de controle de tempos</summary>
            <remarks>Responsável: Rafael Leonhardt</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.ProcessTimeControl.TimeControl.#ctor">
            <summary>Construtor da classe. Inicia o controlador com o status de Stopped</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.ProcessTimeControl.TimeControl.#ctor(System.Boolean)">
            <summary>Construtor da classe. Inicia o controlador já com uma data inicial e com o status de Started</summary>
            <param name="startNow">Identifica se deve iniciar a contagem imediatamente</param>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ProcessTimeControl.TimeControl.Status">
            <summary>[get] Identifica o estado do controlador</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ProcessTimeControl.TimeControl.Continues">
            <summary>[get] Identifica a quantidade de Continue() executados desde o início da contagem</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.ProcessTimeControl.TimeControl.Time">
            <summary>[get] Identifica o tempo total controlado</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.ProcessTimeControl.TimeControl.Start">
            <summary>Inicia a contagem de tempo</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.ProcessTimeControl.TimeControl.StartContinue">
            <summary>Inicia ou continua a contagem de tempo</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.ProcessTimeControl.TimeControl.Pause">
            <summary>Suspende a contagem de tempo. Para reiniciar a contagem deve-se utilizar o método Continue.</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.ProcessTimeControl.TimeControl.Continue">
            <summary>Reinicia a contagem a partir deste instante</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.ProcessTimeControl.TimeControl.Stop">
            <summary>Encerra a contagem de tempo</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.ProcessTimeControl.TimeControl.Reset">
            <summary>Zera a contagem de tempo e coloca em estado Stopped</summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.PyxisCollection">
            <summary>Fornece a funcionalidade base para a criação de listas.</summary>
            <remarks>Responsável: Rafael Leonhardt</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.PyxisCollection.#ctor">
            <summary>Inicializa uma nova instância do objeto PyxisCollection</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.PyxisCollection.Clear">
            <summary>Excluir todos os itens existentes</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.PyxisCollection.Count">
            <summary>[get] Quantidade de itens existentes</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.PyxisCollection.RemoveAt(System.Int32)">
            <summary>Remove um item existente baseado no seu índice (baseado em zero).</summary>
            <param name="index">Índice do item a ser removido</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.PyxisCollection.RemoveRange(System.Int32,System.Int32)">
            <summary>Remove um conjunto de itens</summary>
            <param name="index">Índice do ítem a ser excluído</param>
            <param name="count">Quantidade de ítens a serem removidos</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.PyxisCollection.GetEnumerator">
            <summary>Obtem o enumerador</summary>
            <returns>Enumerador da lista</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.RecordHandleOfTablesManager">
            <summary>
            Gerenciado de record handle of table :P
            </summary>
            <remarks>Responsável: João Paulo Melo</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.RecordHandleOfTablesManager.SetTableOfVision(System.String,System.String)">
            <summary>
            Sets the table of vision.
            </summary>
            <param name="visionName">Name of the vision.</param>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.RecordHandleOfTablesManager.GetTableOfVision(System.String)">
            <summary>
            Gets the table of vision.
            </summary>
            <param name="visionName">Name of the vision.</param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.RecordHandleOfTablesManager.SetRecordHandleOfTables(System.Collections.ArrayList)">
            <summary>
            Sets the record handle of tables.
            </summary>
            <param name="recordHandleList">The record handle list.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.RecordHandleOfTablesManager.GetValues">
            <summary>
            Gets the values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.RecordHandleOfTablesManager.GetArrayValues">
            <summary>
            Gets the values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.RecordHandleOfTablesManager.GetValuesClone">
            <summary>
            Gets the values clone.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.RequestConfirmationControl">
            <summary>Representa o objeto de acesso à mensagem de RequestConfirmation</summary>
            <remarks>Responsável: Rafael Leonhardt</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.RequestConfirmationControl.ExistMessage">
            <summary>Identifica se existe uma mensagem para ser exibida</summary>
            <returns>Retorna 'true' se existe uma mensagem. Caso contrário retorna 'false'.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.RequestConfirmationControl.GetMessage">
            <summary>Obtem a mensagem. Após obtê-la, a mesma é retirada da sessão.</summary>
            <returns>Retorna a mesnagem armazenada na sessão.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.RequestConfirmationControl.Clear">
            <summary>Limpa da sessão a mensagem</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.RequestConfirmationControl.SetMessage(System.String)">
            <summary>Armazena a mensagem na sessão</summary>
            <param name="msg">Mensagem a ser armazenada na sessão</param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.RequestTime">
            <summary>
            Esta classe deve armazenar informacoes sobre o tempo gasto pela execucao das rotinas de uma requisicao
            ela eh parte de um plano para medir locais de gargalo e de baixa performance do sistema
            </summary>
            <remarks>Responsável: João Paulo Melo</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.RequestTime.#ctor">
            <summary>
            Construtor Default
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.RequestTime.StartRoutine(System.String,Benner.Tecnologia.Common.Legacy.ChronometerAccumulator)">
            <summary>
            Adiciona e inicializa um conometro para determinada rotina
            </summary>
            <param name="routineLabel">o nome do metodo</param>
            <param name="accumulator"></param>
            <returns>retorna o identificador deste cronometro</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.RequestTime.Add(Benner.Tecnologia.Common.Legacy.RoutineTime)">
            <summary>
            Adiciona uma rotina a um request
            </summary>
            <param name="routine"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.RequestTime.StopRoutine(System.Int32)">
            <summary>
            Para determinado cronometro
            </summary>
            <param name="routineKey"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.RequestTime.StopAll">
            <summary>
            Dá um stop em todos os cronometros
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.RoutineTime">
            <summary>
            Esta classe deve armazenar informacoes sobre o tempo gasto pela execucao de determinada rotina
            ela eh parte de um plano para medir locais de gargalo e de baixa performance do sistema
            </summary>
            <remarks>Responsável: João Paulo Melo</remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.RoutineTime.IsOpen">
            <summary>
            [get] Indica se esta rotina jah foi finalizada
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.RoutineTime.RoutineLabel">
            <summary>
            [get/set] O identificador da rotina
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.RoutineTime.Begin">
            <summary>
            [get/set] O momento do inicio (em ticks)
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.RoutineTime.End">
            <summary>
            [get/set] O momento do fim (em ticks)
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.RoutineTime.Interval">
            <summary>
            [get] O intervalo em entre o inicio e o fim (em ticks)
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.RoutineTime.Key">
            <summary>
            [get] O identificador unico desta rotina
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.RoutineTime.Children">
            <summary>
            [get] Pega a lista de sub rotinas 
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.RoutineTime.Accumulator">
            <summary>
            [get] Pega o tipo de acumulador ao qual esta rotina pertence
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.RoutineTime.Add(Benner.Tecnologia.Common.Legacy.RoutineTime)">
            <summary>
            Adiciona uma rotina/subrotina na arvore
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.ChronometerAccumulator">
            <summary>
            tipo de acumulador de tempo...
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.RoutineTimeComparer">
            <summary>
            Esta classe é utilizada para ordenar um array objetos RoutioneTime
            ela eh parte de um plano para medir locais de gargalo e de baixa performance do sistema
            </summary>
            <remarks>Responsável: João Paulo Melo</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.RoutineTimeComparer.#ctor(Benner.Tecnologia.Common.Legacy.SortMode)">
            <summary>
            Costrutor Default
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.RequestTimeComparer">
            <summary>
            Esta classe é utilizada para ordenar um array objetos RequestTime
            ela eh parte de um plano para medir locais de gargalo e de baixa performance do sistema
            </summary>
            <remarks>Responsável: João Paulo Melo</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.RequestTimeComparer.#ctor(Benner.Tecnologia.Common.Legacy.SortMode)">
            <summary>
            Costrutor Default
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.SessionTime">
            <summary>
            Esta classe deve armazenar informacoes sobre o tempo gasto pela execucao das rotinas de requisicoes de uma sessao
            ela eh parte de um plano para medir locais de gargalo e de baixa performance do sistema
            </summary>
            <remarks>Responsável: João Paulo Melo</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.SessionTime.#ctor">
            <summary>
            Construtor Default
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.SessionTime.Item(Benner.Tecnologia.Common.Legacy.ChronometerAccumulator)">
            <summary>
            [get/set] Acumular valores a partir deste momento
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.SynchronizedObject">
            <summary>
            Summary description for SynchronizedObject.
            </summary>
            <remarks>Responsável: Paulo Henrique da Silva</remarks>
        </member>
        <member name="F:Benner.Tecnologia.Common.Legacy.SynchronizedObject._millisecondsTimeout">
            <summary>
            Timeout padrão para o Wait do lock
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.AcquireTimeOutException">
            <summary>Exceção caso não consiga aplicar lock em um objeto em tempo hábil</summary>
            <remarks><para>Responsável: Rafael Leonhardt</para>
            Obs: AcquireTimeOutException é necessária ao serviço de Agendamento. Esta é uma forma de sinalizar
            um erro especifico para o servico de agendamento e nao um generico BennerException</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.AcquireTimeOutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Construtor protegido utilizado para Deserialização</summary>
            <param name="info">Informações de serialização</param>
            <param name="context">Contexto</param>
            <remarks>Este metodo é obrigatorio para conseguir fazer a deserializacao. Caso contrario acusa excecao nao tratada</remarks>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.TempUtils">
            <summary>
            Classe gerenciadora de arquivos temporários
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.TempUtils.DeleteAllFilesFrom(System.String,System.String,System.Boolean)">
            <summary>
            Apaga apenas arquivos de forma recursiva, ignorando a arvore de diretorios(caso ela exista ;)
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.TextHelper">
            <summary>
            Classe que auxilia a manipulacao de Strings e Textos
            </summary>
            <remarks>Responsável: João Paulo Melo</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.TextHelper.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.TextHelper.RemoveAccents(System.String,System.Boolean)">
            <summary>
            Remove acentos de uma string e converte para maíusculas
            </summary>
            <param name="s">String que terá os acentos removidos ou transformada para maiúsculas</param>
            <param name="upper">Indica se deve converter s para maiúsculas</param>
            <returns>Retorna a string sem acentos e convertida se solicitado</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.TextHelper.IsNumeric(System.String)">
            <summary>
            Verifica se uma string contém apenas Numeros
            </summary>
            <param name="text">o texto a ser avaliado</param>
            <returns></returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.UsernameTokenHelper">
            <summary>
            Helper para criar e modificar tokens
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.UsernameTokenHelper.CreateTokenFromXml(System.String)">
            <summary>
            Cria um token a partir de uma definição em XML
            </summary>
            <param name="xml">String do XML que pode ser obtido através do método UsernameTokenHelper.GetXml(UsernameToken token)</param>
            <returns>Retorna o Token representado pelo XML passado como parâmetro. Retorna null caso o parâmetro seja nulo ou uma string vazia</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.UsernameTokenHelper.GetXml(Microsoft.Web.Services3.Security.Tokens.UsernameToken)">
            <summary>
            Retorna um XML que representa o Token
            </summary>
            <param name="token">Token</param>
            <returns>Retorna uma string contendo um XML que representa o Token (Pode ser utilizado como parâmetro de entrada no método UsernameTokenHelper.CreateToken(string xml)</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.UsernameTokenHelper.CreateToken(System.String,System.String,System.Int32)">
            <summary>
            Cria um UsernameToken que pode ser lido pelo sistema benner
            </summary>
            <param name="userName">nome do usuário</param>
            <param name="password">senha (em texto plano)</param>
            <param name="company">handle da empresa para selecionada, ou -1 para selecionar automaticamente</param>
            <returns>UsernameToken que pode ser lido pelo sistema Benner</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.VersionConflictResolver">
            <summary>
            Classe que resolve conflitos de versão de dlls.
            </summary>
            <remarks>
            Esta abordagem traz o DLL HELL novamente. Usar com cautela.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.VersionConflictResolver.#ctor">
            <summary>
            Construtor para que esta classe possa ser consumida através do CreateBennerObject no Runner.
            Do contrário poderia ser estático.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.VersionConflictResolver.Solve">
            <summary>
            Adiciona handler para tratar o evento AssemblyResolve, que carrega o assembly disponível sem checar a versão, evitando conflito de versão.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.WebError">
            <summary>
            Objeto de controle das mensagens de erro do sistema.
            </summary>
            <remarks>Responsável: Leandro Salvatti Piscke</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.WebError.#ctor">
            <summary>Contrutor da classe WebError</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.WebError.#ctor(Benner.Tecnologia.Common.Legacy.BennerException)">
            <summary>Contrutor da classe WebError</summary>
            <param name="err">Objeto do tipo BennerException que será armazenado inicialmente na sessão</param>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.WebError.Session">
            <summary>[get] Sessão corrente</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.WebError.Error">
            <summary>[get] Objeto de erro corrente, residente na sessão</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.WebError.LastError">
            <summary>[get] Ultimo erro ocorrido, residente na sessão</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.WebError.SetError(System.String,System.String,System.String,System.String)">
            <summary>Método que cria um BennerException e coloca-o na sessão</summary>
            <param name="message">Mensagem amigavel para o usuário</param>
            <param name="msgDetail">Mensagem detalhada para o desenvolvimento</param>
            <param name="origin">Local de origem da exceção</param>
            <param name="redirect">URL para redirecionamento caso a exceção não for tratada</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.WebError.SetError(System.Exception)">
            <summary>Método que converte um objeto Exception em um objeto BennerException e coloca-o na sessão</summary>
            <param name="err">Objeto do tipo Exception que será convertido e armazenado na sessão</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.WebError.Clear">
            <summary>Método utilizado para limpar a sessão de erros</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.WebError.ExceptionKindNested(Benner.Tecnologia.Common.Legacy.BennerException@,Benner.Tecnologia.Common.Legacy.ExceptionKind[])">
            <summary>
            Este método deve varrer toda a estrutura de excecoes aninhadas, procurando por alguma excecao de determinado tipo
            </summary>
            <param name="kinds"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.WebError.WriteEventLogError(System.String)">
            <summary>Registra mensagem no log de erro</summary>
            <param name="message">Mensagem a ser registrada no log</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.WebError.WriteEventLogError(System.String,System.Exception)">
            <summary>Registra mensagem no log de erro</summary>
            <param name="message">Mensagem a ser registrada no log</param>
            <param name="exception"></param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.WebMenuCodeManager">
            <summary>Gerencia o WebMenuCode na Sessão</summary>
            <remarks>
            Responsável: Rafael Leonhardt
            SMS: 254225
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.WebMenuCodeManager.SetCode(System.String)">
            <summary>Atribui um código na sessão</summary>
            <param name="code">WebMenuCode a ser mantido na sessão</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.WebMenuCodeManager.GetCode">
            <summary>Obtém o código mantido na sessão</summary>
            <returns>Se não existe código na sessão retorna string.Empty.</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.WireHelper">
            <summary>
            Utitlitário para envio de informações by wire
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.WireHelper.PrepareDataSetForTheWire(System.Data.DataSet)">
            <summary>
            Ajusta o DataSet para envio-by-wire
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.WireHelper.PrepareArrayForTheWire(System.Object[])">
            <summary>
            Ajusta array de objetos para o envio-by-wire
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.WireHelper.GetObjectForTheWire(System.Object)">
            <summary>
            Ajusta objeto para o envio-by-wire
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.WorkflowDataProviderBase.FillImage(System.Guid)">
            <summary>Obter uma imagem com a posição atual da instância</summary>
            <param name="modelInstanceId">Identificação da instância do modelo</param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.WorkflowDataProviderHelpers.Clear(System.Data.DataSet)">
            <summary>Apaga o conteúdo de todas as tabelas de workflow</summary>
            <param name="dataSet">DataSet que contém as tabelas de workflow</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.WorkflowDataProviderHelpers.ConcatSqlInOrEqual(System.String,System.String)">
            <summary>
            Método que retorna o campo passado por parâmetro concatenado com "= HANDLE" ou "IN(HANDLE's)"
            </summary>
            <param name="field">campo que será retornado na concatenação dos handles </param>
            <param name="handles">Lista de handle que será verificada e retornada na forma de: "= 1234" quando houver apenas um handle ou "IN(1234,9876)" quando houver mais de um handle</param>
            <returns>Retorna "field" concatenado com "=" ou "IN" e a lista de handle(s)</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Legacy.WorkflowMessage">
            <summary>Representa a mensagem de workflow que é </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Legacy.WorkflowMessage.QueueEventType">
            <summary>[get/set] Identifica o tipo de mensagem de workflow</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.WorkflowMessage.WriteXml(System.Xml.XmlWriter)">
            <summary></summary>
            <param name="writer"></param>
            <remarks>Os parametros podem estar sendo informados no formato tipado ou no formato string. Em ambas as situacoes é necessario converter para string seguindo a culture do workflow.</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Legacy.XmlUtils.StripNonValidXMLCharacters(System.String)">
            <summary>
            Remove caracteres inválidos seguindo os padrões do W3C para XML
            http://www.w3.org/TR/2000/REC-xml-20001006#charsets
            Character Range
            [2] Char ::= #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF] /* any Unicode character, excluding the surrogate blocks, FFFE, and FFFF. */
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.QueryBuilder">
            <summary>
            Construtor fluente de queries complexas
            </summary>
            <remarks>
            O QueryBuilder é baseado no SqlKata.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.QueryBuilder.#ctor">
            <summary>
            Construtor fluente de queries complexas
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.QueryBuilder.Query">
            <summary>
            Inicia uma nova query
            </summary>
            <returns>Objeto SqlKata.Query</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.QueryBuilder.Query(System.String)">
            <summary>
            Inicia uma nova query já passando o nome da tabela principal. Neste método não é necessário chamar o From.
            </summary>
            <returns>Objeto SqlKata.Query</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.QueryBuilder.GetFirstOrDefault(SqlKata.Query)">
            <summary>
            Recupera uma instância da entidade.
            </summary>
            <returns>Caso a condição retorne uma ou mais entidades este método retornará a primeira entidade, 
            caso não haja entidades que cumpram esta condição será retornado nulo.
            </returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.QueryBuilder.GetFirstOrDefault``1(SqlKata.Query)">
            <summary>
            Recupera uma instância da entidade.
            </summary>
            <returns>Caso a condição retorne uma ou mais entidades este método retornará a primeira entidade, 
            caso não haja entidades que cumpram esta condição será retornado nulo.
            </returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.QueryBuilder.FetchMany(SqlKata.Query)">
            <summary>
            Obtém várias instâncias de entidade da origem de dados.
            </summary>
            <overloads>
            Obtém, da origem de dados, várias instâncias da entidade.
            </overloads>
            <param name="criteria">O critério para recuperar a coleção de instâncias da entidade.</param>
            <returns>
            Uma coleção com as instâncias da entidade requisitada.
            </returns>   
        </member>
        <member name="M:Benner.Tecnologia.Common.QueryBuilder.FetchMany``1(SqlKata.Query)">
            <summary>
            Obtém várias instâncias de entidade da origem de dados. Retorna um IEnumerable&lt;T&gt;, possibilitando carregamento sob demanda das entidades.
            </summary>
            <returns>Um IEnumerable para percorrer as instâncias das entidades</returns>   
        </member>
        <member name="M:Benner.Tecnologia.Common.QueryCompiler.Compile(SqlKata.Query)">
            <summary>
            Responsavel por gerar o SqlResult
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.QueryExtensions.GetFirstOrDefault(SqlKata.Query)">
            <summary>
            Recupera uma instância da entidade.
            </summary>
            <returns>Caso a condição retorne uma ou mais entidades este método retornará a primeira entidade, 
            caso não haja entidades que cumpram esta condição será retornado nulo.
            </returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.QueryExtensions.GetSqlCommand(SqlKata.Query)">
            <summary>
             Fornece o SQL gerado 
            </summary>
            <returns>SQL gerado </returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.QueryExtensions.GetParameters(SqlKata.Query)">
            <summary>
             Fornece os parametro dos SQL gerado 
            </summary>
            <returns>parametro dos SQL gerado</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.QueryExtensions.GetFirstOrDefault``1(SqlKata.Query)">
            <summary>
            Recupera uma instância da entidade.
            </summary>
            <returns>Caso a condição retorne uma ou mais entidades este método retornará a primeira entidade, 
            caso não haja entidades que cumpram esta condição será retornado nulo.
            </returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.QueryExtensions.FetchMany(SqlKata.Query)">
            <summary>
            Obtém várias instâncias de entidade da origem de dados.
            </summary>
            <overloads>
            Obtém, da origem de dados, várias instâncias da entidade.
            </overloads>
            <param name="criteria">O critério para recuperar a coleção de instâncias da entidade.</param>
            <returns>
            Uma coleção com as instâncias da entidade requisitada.
            </returns>        
        </member>
        <member name="M:Benner.Tecnologia.Common.QueryExtensions.FetchMany``1(SqlKata.Query)">
            <summary>
            Obtém várias instâncias de entidade da origem de dados. Retorna um IEnumerable&lt;T&gt;, possibilitando carregamento sob demanda das entidades.
            </summary>
            <returns>Um IEnumerable para percorrer as instâncias das entidades</returns>   
        </member>
        <member name="M:Benner.Tecnologia.Common.QueryExtensions.WhereBoolean(SqlKata.Query,System.String,System.Nullable{System.Boolean})">
            <summary>
            Adiciona a validação para coluna Boolean(Lógico).
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.QueryExtensions.WhereClause(SqlKata.Query,Benner.Tecnologia.Common.WhereClause)">
            <summary>
            Adiciona o WhereClause a consulta.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.QueryExtensions.OrWhereClause(SqlKata.Query,Benner.Tecnologia.Common.WhereClause)">
            <summary>
            Adiciona o WhereClause a consulta.
            </summary>        
        </member>
        <member name="M:Benner.Tecnologia.Common.QueryExtensions.WhereClause(SqlKata.Query,System.String,Benner.Tecnologia.Common.Parameter[])">
            <summary>
            Gera um WhereClause e adiciona a consulta.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.QueryExtensions.OrWhereClause(SqlKata.Query,System.String,Benner.Tecnologia.Common.Parameter[])">
            <summary>
            Gera um WhereClause e adiciona a consulta.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.CryptoConvert">
            <summary>
            Classe para auxiliar hash e conversões entre string e array de bytes
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.CryptoConvert.ToMD5ByteArray(System.String)">
            <summary>
            Gera o hash MD5 de uma string
            </summary>
            <param name="plainText">Texto no qual se deseja gerar o hash</param>
            <returns>Array de 16 bytes contento o hash MD5 da string informada</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.CryptoConvert.ToMD5Base16String(System.String)">
            <summary>
            Gera o hash MD5 de uma string
            </summary>
            <param name="plainText">Texto no qual se deseja gerar o hash</param>
            <returns>String de 32 caracteres contento a representação em hexadecimal do array de 16 bytes contento o hash MD5 da string informada </returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.CryptoConvert.ToBase16String(System.Byte[])">
            <summary>
            Transforma um array de bytes em uma string
            </summary>
            <param name="byteArray">Array de bytes que se deseja converter para string</param>
            <returns>String contento a representação hexadecimal do array de bytes, onde cada byte se transforma em dois caracteres com a representação hexadecimal na string de retorno</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.CryptoConvert.FromBase16String(System.String)">
            <summary>
            Transforma uma string em um array de bytes
            </summary>
            <param name="hexString">String contento a representação hexadecimal do array de bytes</param>
            <returns>Array de bytes onde cada 2 caracteres da string gera um byte no array de resultado</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.SymmetricAesCrypto">
            <summary>
            Classe genérica para criptografia com chave pública utilizando Aes
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.SymmetricAesCrypto.Encrypt(System.String,System.String)">
            <summary>
            Encripta um texto com base na chave informada, utilizando o Aes
            </summary>
            <param name="key">Chave para encriptar texto</param>
            <param name="plainText">Texto a ser encriptado</param>
            <returns>Texto encriptado</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.SymmetricAesCrypto.Encrypt(System.Byte[],System.String)">
            <summary>
            Encripta um texto com base na chave informada, utilizando o Aes
            </summary>
            <param name="key">Chave para encriptar texto</param>
            <param name="plainText">Texto a ser encriptado</param>
            <returns>Texto encriptado</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.SymmetricAesCrypto.Decrypt(System.String,System.String)">
            <summary>
            Decripta um texto com base na chave informada, utilizando o Aes
            </summary>
            <param name="key">Chave para decriptar texto</param>
            <param name="encryptedText">Texto a ser decriptado</param>
            <returns>Texto decriptado</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.SymmetricAesCrypto.Decrypt(System.Byte[],System.String)">
            <summary>
            Decripta um texto com base na chave informada, utilizando o Aes
            </summary>
            <param name="key">Chave para decriptar texto</param>
            <param name="encryptedText">Texto a ser decriptado</param>
            <returns>Texto decriptado</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Security.Scramble">
            <summary>
            Criptografia e descriptografia de textos utilizando o algoritmo Benner Scramble.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Security.Scramble.ScrambleEncoding">
            <summary>
            Encoding utilizado pela rotina de Scramble (o padrão é Windows-1252). Embora não seja recomendado, pode ser alterado para qualquer encoding que possua 256 caracteres.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Security.Scramble.ScrambleBytes(System.Byte[])">
            <summary>
            Rotina contendo o algoritmo ultra-secreto Benner Scramble
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Security.Scramble.ScrambleText(System.String)">
            <summary>
            Criptografa/descriptografa uma string utilizando o algoritmo Benner Scramble.
            </summary>
            <param name="text">Texto de entrada. Pode ser texto legível ou já criptografado</param>
            <returns>Caso text seja legível, retorna criptografado. Caso text seja criptografado, retorna texto legível original.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Security.Scramble.GetScrambled(System.String)">
            <summary>
            Método de extensão para strings que criptografa/descriptografa textos utilizando o algoritmo Benner Scramble.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Services.AuthenticationServiceImplementationFactory">
            <inheritdoc/>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.AuthenticationServiceImplementationFactory.CreateServiceConfiguration">
            <inheritdoc/>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.AuthenticationServiceImplementationFactory.CreateServiceImplementation">
            <inheritdoc/>
        </member>
        <member name="T:Benner.Tecnologia.Common.Services.ILGPDAnonymizer">
            <summary>
            API para anonimizar dados pessoais do sistema, conforme mapeamento
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.ILGPDAnonymizer.ByDocument(System.String)">
            <summary>
            Efetua a anonimização de determinado titular, com base no documento informado. 
            Esta operação irá alterar dados do sistema de forma irreversível, as alterações não podem ser desfeitas.
            </summary>
            <param name="document">O documento do titular que será utilizado como busca de informações que serão (re)anonimizadas</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.ILGPDAnonymizer.All">
            <summary>
            Efetua a anonimização de todos os dados pessoais mapeados no sistema. 
            Esta operação irá alterar dados do sistema de forma irreversível, as alterações não podem ser desfeitas.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Services.LGPD.MongoFilterDefinition.FilterDefinition">
            <summary>
            Definição do filtro no mongoDB.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.LGPD.MongoFilterDefinition.Contains(System.String,System.String)">
            <summary>
            Adicionar um filtro de busca para o field que contem o textSearch
            </summary>
            <param name="field">Campo a ser buscado</param>
            <param name="textSearch">Texto a ser buscado no field</param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.LGPD.MongoFilterDefinition.Between(System.String,System.DateTime,System.DateTime)">
            <summary>
            Adicionar um filtro de busca para o field que o valor esteja dentro do begin e do end.
            </summary>
            <param name="field">>Campo a ser buscado</param>
            <param name="begin">Data inicial</param>
            <param name="end">Data Final</param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.LGPD.MongoFilterDefinition.HasFilterApplied">
            <summary>
            Informa se a algum filtro para aplicar
            </summary>
            <returns>Se a algum filtro para aplicar</returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.Services.LGPD.MongoFilterDefinition.StartRowIndex">
            <summary>
            Index do item inicial StartRowIndex
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Services.LGPD.MongoFilterDefinition.MaximumRows">
            <summary>
            Limite de itens na busca
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Services.AuthenticationService">
            <inheritdoc/>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.AuthenticationService.ValidateUser(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.AuthenticationService.ChangePassword(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Benner.Tecnologia.Common.Services.AuthenticationServiceFactory">
            <inheritdoc/>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.AuthenticationServiceFactory.Benner#Tecnologia#Common#Services#IAuthenticationServiceFactory#CreateAuthenticationService">
            <inheritdoc/>
        </member>
        <member name="T:Benner.Tecnologia.Common.Services.BennerNativeAuthenticationServiceImplementation">
            <summary>
            Classe concreta que implementa a autenticação nativa de sistemas Benner, com base no apelido e senha de Z_GRUPOUSUARIOS
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Services.BennerNativeAuthenticationServiceImplementation.Configuration">
            <inheritdoc/>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.BennerNativeAuthenticationServiceImplementation.SetConfiguration(Benner.Tecnologia.Common.Services.IAuthenticationServiceConfiguration)">
            <inheritdoc/>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.BennerNativeAuthenticationServiceImplementation.ValidateUser(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.BennerNativeAuthenticationServiceImplementation.ChangePassword(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Benner.Tecnologia.Common.Services.AuthenticationServiceConfiguration">
            <inheritdoc/>
        </member>
        <member name="P:Benner.Tecnologia.Common.Services.AuthenticationServiceConfiguration.Settings">
            <inheritdoc/>
        </member>
        <member name="T:Benner.Tecnologia.Common.Services.IAuthenticationServiceFactory">
            <summary>
            Factory do IAuthenticationService para autenticação de usuários
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAuthenticationServiceFactory.CreateAuthenticationService">
            <summary>
            Retorna uma instância do serviço de autenticação de usuários
            </summary>
            <returns>Instância de IAuthenticationService</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Services.IAuthenticationServiceConfiguration">
            <summary>
            Interface que define a configuração de um serviço de autenticação
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Services.IAuthenticationServiceConfiguration.AuthenticationMode">
            <summary>
            Indica o tipo de autenticação que deve ser utilizada
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Services.IAuthenticationServiceConfiguration.Settings">
            <summary>
            Configurações do mecanismo de autenticação
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Services.IAuthenticationServiceImplementation">
            <summary>
            Interface que define a implementação concreta de um serviço de autenticação
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Services.IAuthenticationServiceImplementationFactory">
            <summary>
            Factory do IAuthenticationServiceImplementation para autenticação de usuários
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAuthenticationServiceImplementationFactory.CreateServiceImplementation">
            <summary>
            Retorna uma instância de uma implementação de serviço de autenticação de usuários
            </summary>
            <returns>Instância de IAuthenticationServiceImplementation</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAuthenticationServiceImplementationFactory.CreateServiceConfiguration">
            <summary>
            Retorna uma instância que representa a configuração do serviço de autenticação de usuários
            </summary>
            <returns></returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Services.LGPDService">
            <summary>
            Serviço que abriga e centraliza todos os recursos e APIs secundárias relacionadas ao LGPD
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Services.LGPDService.Tracer">
            <summary>
            Recupera o LGPD Repository utilizado para armazenar registros de rastreamento (auditoria) ao acessar informações pessoais
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Services.LGPDService.TracerEnabled">
            <summary>
            Indica se o rastreamento (auditoria) está ativado
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Services.LGPDService.Mapping">
            <summary>
            API para acessar de forma otimizada (através de cache) o mapeamento de tabelas e relatórios com dados pessoais da LGPD
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Services.LGPDService.Anonymizer">
            <summary>
            API para anonimizar (de forma irreversível) dados pessoais do sistema
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.LGPDService.ClearCache">
            <summary>
            Executa a limpeza dos caches de configuração de rastreamento, de mapeamento de tabelas e de relatórios que estiverem em memória neste processo
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Services.ILGPDService">
            <summary>
            Serviço que abriga e centraliza todos os recursos e APIs secundárias relacionadas ao LGPD
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Services.ILGPDService.Tracer">
            <summary>
            Recupera o LGPD Repository utilizado para armazenar registros de rastreamento (auditoria) ao acessar informações pessoais
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Services.ILGPDService.TracerEnabled">
            <summary>
            Indica se o rastreamento (auditoria) está ativado
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Services.ILGPDService.Mapping">
            <summary>
            API para acessar de forma otimizada (através de cache) o mapeamento de tabelas e relatórios com dados pessoais da LGPD
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.ILGPDService.ClearCache">
            <summary>
            Executa a limpeza dos caches de configuração de rastreamento, de mapeamento de tabelas e de relatórios que estiverem em memória neste processo
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Services.LGPDServiceImplementation">
            <inheritdoc />
        </member>
        <member name="P:Benner.Tecnologia.Common.Services.LGPDServiceImplementation.Tracer">
            <inheritdoc />
        </member>
        <member name="P:Benner.Tecnologia.Common.Services.LGPDServiceImplementation.TracerEnabled">
            <inheritdoc />
        </member>
        <member name="P:Benner.Tecnologia.Common.Services.LGPDServiceImplementation.Mapping">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.LGPDServiceImplementation.ClearCache">
            <inheritdoc />
        </member>
        <member name="T:Benner.Tecnologia.Common.Services.ICachedLGPDMapping">
            <summary>
            API para acessar de forma otimizada (através de cache) o mapeamento de tabelas e relatórios com dados pessoais da LGPD
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.ICachedLGPDMapping.RecoverAnonymizableFields(System.String)">
            <summary>
            Recupera a lista de campos mapeados de determinada tabela
            </summary>
            <param name="tableName">Tabela na qual se deseja recuperar a lista de campos mapeados</param>
            <returns>Retorna uma lista de campos mapeados para a tabela informada</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.ICachedLGPDMapping.AuditReportRequired(System.String)">
            <summary>
            Verifica se ao acessar determinado relatório é necessário gerar rastreamento/auditoria
            </summary>
            <param name="reportName">Nome do relatório que está sendo acessado</param>
            <returns>Baseado no relatório informado, retorna um bool indicando se é o caso de gerar auditoria ou não</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.ICachedLGPDMapping.ClearCache">
            <summary>
            Executa a limpeza do cache de mapeamento de tabelas e de relatórios que estiverem em memória neste processo
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Services.CachedLGPDMapping">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.CachedLGPDMapping.AuditReportRequired(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.CachedLGPDMapping.ClearCache">
            <inheritdoc />
        </member>
        <member name="P:Benner.Tecnologia.Common.Services.LgpdTable.Name">
            <summary>
            O nome da tabela em Z_TABELAS
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Services.LgpdTable.TableId">
            <summary>
            O handle da tabela em Z_TABELAS
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Services.LgpdTable.HasAnonymousField">
            <summary>
            Informa se a TABELA tem campo ANONIMIZADO
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Services.LgpdTable.PersonalFields">
            <summary>
            A lista de campos pessoais mapeados
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Services.LgpdTable.MasterTableProperties">
            <summary>
            Caso esta tabela esteja mapeada como mestre, os detalhes estarão aqui, senão esta propriedade estará nula
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Services.LgpdTable.DetailTableList">
            <summary>
            Caso esta tabela esteja mapeada como detalhe de uma ou mais tabelas, esta lista irá abrigar este mapeamento
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Services.LgpdTable.IsMasterTable">
            <summary>
            Indica se esta tabela está mapeada como mestre
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Services.MasterTableProperties.Where">
            <summary>
            O Filtro, caso informado no mapeamento
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Services.MasterTableProperties.KeyFields">
            <summary>
            A lista de campos chave mapeados
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Services.DetailTableProperties.RelationField">
            <summary>
            O nome do campo de relacionamento com a tabela mestre
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Services.DetailTableProperties.RelationClause">
            <summary>
            A cláusuda de relacionamento com a tabela mestre
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Services.DetailTableProperties.ParentTableName">
            <summary>
            O nome da tabela mestre
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Services.DetailTableProperties.ParentTableId">
            <summary>
            O Handle da tabela mestre
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Services.ManagedBusinessWebContext">
            <summary>
            Representa o contexto de camada Business para Web 100% gerenciado para a Thread/task atual. Contexto do BefAnywhere para o WES.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Services.ManagedBusinessWebContext.BoolValue">
            <summary>
            Armazena o estado do contexto na task/thread atual
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Services.ManagedBusinessWebContext.IsManagedBusinessWebContext">
            <summary>
            Indica se esta Thread/Task está com o contexto ManagedBusinessWeb (BefAnywhere para WES) ativado.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.ManagedBusinessWebContext.#ctor">
            <summary>
            Inicializa um novo contexto de camada Business para Web, indicando que deve rodar BefAnywhere na thread atual.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Services.IOpenIDConnectService.Configuration">
            <summary>
            Get configuration
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IOpenIDConnectService.GrantPasswordAccessToken(System.String,System.String)">
            <summary>
            Requests access_token based on user name and password
            </summary>
            <param name="userName"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IOpenIDConnectService.GrantPasswordIdentityToken(System.String,System.String)">
            <summary>
            Requests id_token based on user name and password
            </summary>
            <param name="userName"></param>
            <param name="password"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IOpenIDConnectService.GetUserInfo(System.String,System.String)">
            <summary>
            Gets user information through token requests
            </summary>
            <param name="userName"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IOpenIDConnectService.ValidateJwtSecutiryToken(System.IdentityModel.Tokens.Jwt.JwtSecurityToken)">
            <summary>
            Validate jwt security token
            </summary>
            <param name="jwtSecurityToken"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IOpenIDConnectService.RecoverUserInfoFromJwtPayload(System.IdentityModel.Tokens.Jwt.JwtPayload)">
            <summary>
            Recover user info from jwt payload
            </summary>
            <param name="jwtPayload"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IOpenIDConnectService.RecoverUserInfoFromIdentityServer(System.String)">
            <summary>
            Requests id_token from identity server, based on access_token 
            </summary>
            <param name="accessToken"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IOpenIDConnectService.TranslateGroupNames(System.Collections.Generic.List{System.String})">
            <summary>
            Translate group.Id list received on id_token into group.DisplayName list
            </summary>
            <param name="groups"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IOpenIDConnectService.RecoverUserInfo(System.String,System.Web.HttpRequestBase)">
            <summary>
            Validate and recover user infos received in a TokenResponse
            </summary>
            <param name="tokenResponse"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IOpenIDConnectService.ValidateIdToken(System.String)">
            <summary>
            Validade IdentityToken received
            </summary>
            <param name="idToken"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IOpenIDConnectService.RecoverParamValueFromTemporaryCookie(System.Web.HttpRequestBase,System.String)">
            <summary>
            Recover parameter from a temporary cookie
            </summary>
            <param name="signInCallbackRequest"></param>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.Oidc.UserInfoHelper.BuildAuthSearchCriteria(System.String,System.String,System.String)">
            <summary>
            Monta um critério de busca em ZGrupoUsuarios ou pelo apelido, ou nome, ou pelo e-mail, de  acordo com configurações
            </summary>
            <param name="userName"></param>
            <param name="name"></param>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IBusinessComponentService.Call(System.String,System.String,Benner.Tecnologia.Common.EnterpriseServiceLibrary.Request)">
            <summary>
            Passando o bom e velho Request que deve ser especializado para manipular 
            documentos estruturados de forma tipada e intuitiva
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IBusinessComponentService.Call(System.String,System.String,System.Object[])">
            <summary>
            Passando uma requisição aberta para receber chamadas triviais
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Services.ILanguageTranslatorFactory">
            <summary>
            Factory do LanguageTranslator para tradução de jargões e idiomas
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.ILanguageTranslatorFactory.CreateLanguageTranslator">
            <summary>
            Retorna uma instância do serviço de tradução
            </summary>
            <returns>Instância de ILanguageTranslator</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Services.IBennerVarsFactory">
            <summary>
            Factory para os objetos que permitem o acesso as variáveis Benner
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IBennerVarsFactory.CreateSystemVars">
            <summary>
            Acesso as variáveis de sistema armazenadas em Z_VARIAVEIS
            </summary>
            <returns>Instância de ISystemVarsStorage </returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IBennerVarsFactory.CreateUserVars">
            <summary>
            Acesso as variáveis de usuário armazenadas em Z_VARIAVEIS
            </summary>
            <returns>Instância de IUserVarsStorage</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IBennerVarsFactory.CreateSessionVars">
            <summary>
            Acesso as variáveis de sessão
            </summary>
            <returns>Instância de ISessionVarsStorage</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Services.ILanguageTranslator">
            <summary>
            Tradutor de jargões e idiomas
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.ILanguageTranslator.Translate(System.String)">
            <summary>
            Traduz um texto de acordo com o idioma ou jargão atual
            </summary>
            <param name="text">Texto que deve ser traduzido</param>
            <returns>Texto traduzido</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Services.IInternalAdministrationService">
            <summary>
            Serviço interno da Tecnologia para funcionalidades exclusivas para a ferramenta
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IInternalAdministrationService.GetSessionVar(System.String)">
            <summary>
            Obtém uma variável de sessão 
            </summary>
            <param name="name">Nome da SessionVar (case-insensitive)</param>
            <returns>Valor da SessionVar. Variáveis nulas ou inexistêntes retornam string.Empty.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IInternalAdministrationService.SetSessionVar(System.String,System.String)">
            <summary>
            Configura uma variável de sessão.
            </summary>
            <param name="name">Nome da SessionVar (case-insensitive)</param>
            <param name="value">Valor da SessionVar</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IInternalAdministrationService.GetConnectionString">
            <summary>
            Connection string
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IInternalAdministrationService.GetSqlDriverName">
            <summary>
            Banco de dados
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IInternalAdministrationService.GetIsParadoxLangDriver">
            <summary>
            Se é paradox
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IInternalAdministrationService.NewHandle(System.String)">
            <summary>
            Obtém um novo Handle
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IInternalAdministrationService.WakeUpTasksWorker">
            <summary>
            Ativa o Business Tasks Worker para o processamento de tarefas.
            Em desenvolvimento nem sempre o Business Tasks Worker estará rodando.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IInternalAdministrationService.ResetCounters">
            <summary>
            Avisa o BServer para recarregar os contadores
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IInternalAdministrationService.RunScheduleNow(Benner.Tecnologia.Common.Handle)">
            <summary>
            Dispara um agendamento
            </summary>
            <param name="schedule">Handle do agendamento</param>
            <returns>Handle de Z_PROCESSOS para a execução do agendamento</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IInternalAdministrationService.RefreshSchedules">
            <summary>
            Avisa o BServer para atualizar a lista de agendamentos
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IInternalAdministrationService.GetDesktopHeapMemoryStatus(System.String@)">
            <summary>
            Obtém informações sobre o estado atual da Memória Heap do Provider
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Services.ISessionVars">
            <summary>
            Variáves da sessão do usuário (bloqueado)
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.ISessionVars.GetSessionVar(System.String)">
            <summary>
            Obtém o valor da variável de sessão.
            </summary>
            <param name="name">Nome da variável de sessão</param>
            <returns>Valor string da sessão</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.ISessionVars.SetSessionVar(System.String,System.String)">
            <summary>
            Configura o valor da variável de sessão.
            </summary>
            <param name="name">Nome da variável de sessão</param>
            <param name="value">Valor da sessão</param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Services.ISystemVars">
            <summary>
            Variáves da aplicação persistidas em Z_VARIAVEIS.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.ISystemVars.GetSystemVar(System.String)">
            <summary>
            Obtém o valor da variável de sistema. Esta variável fica persistida em Z_VARIAVEIS.
            </summary>
            <param name="name">Nome da variável de sistema</param>
            <returns>Valor string da variável</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.ISystemVars.SetSystemVar(System.String,System.String)">
            <summary>
            Configura o valor da variável de sistema. Esta variável é persistida em Z_VARIAVEIS.
            </summary>
            <param name="name">Nome da variável de sistema</param>
            <param name="value">Valor da variável</param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Services.IUserVars">
            <summary>
            Variáves do usuário persistidas em Z_VARIAVEIS.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IUserVars.GetUserVar(System.String)">
            <summary>
            Obtém o valor da variável do usuário atual. Esta variável fica persistida em Z_VARIAVEIS.
            </summary>
            <param name="name">Nome da variável de usuário</param>
            <returns>Valor string da variável</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IUserVars.SetUserVar(System.String,System.String)">
            <summary>
            Configura o valor da variável do usuário atual. Esta variável é persistida em Z_VARIAVEIS.
            </summary>
            <param name="name">Nome da variável de sistema</param>
            <param name="value">Valor da variável</param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Services.TemporaryFileStorage.ITemporaryFileStorage">
            <summary>
            API de armazenamento para arquivos temporários
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.TemporaryFileStorage.ITemporaryFileStorage.SetFile(System.IO.Stream)">
            <summary>
            Salva o stream no storage
            </summary>
            <param name="inputStream">Stream que será salvo no storage</param>
            <returns>Guid identificador do arquivo armazenado</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.TemporaryFileStorage.ITemporaryFileStorage.ExistsFile(System.Guid)">
            <summary>
            Verifica se o guid identificador do arquivo existe no storage
            </summary>
            <param name="fileGuid">Guid identificador do arquivo armazenado</param>
            <returns>Retorna true se o arquivo existe no storage, caso contrário false</returns>        
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.TemporaryFileStorage.ITemporaryFileStorage.GetFile(System.Guid)">
            <summary>
            Recupera o stream do arquivo no storage
            </summary>
            <param name="fileGuid">Guid identificador do arquivo armazenado</param>
            <returns>O stream que foi armazenado no storage. Caso não seja encontrado retorna null</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Services.TemporaryFileStorage.TableTemporaryFileStorage">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.TemporaryFileStorage.TableTemporaryFileStorage.ExistsFile(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.TemporaryFileStorage.TableTemporaryFileStorage.GetFile(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.TemporaryFileStorage.TableTemporaryFileStorage.SetFile(System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="T:Benner.Tecnologia.Common.Services.TemporaryFileStorage.FileSystemTemporaryStorage">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.TemporaryFileStorage.FileSystemTemporaryStorage.ExistsFile(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.TemporaryFileStorage.FileSystemTemporaryStorage.GetFile(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.TemporaryFileStorage.FileSystemTemporaryStorage.SetFile(System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="T:Benner.Tecnologia.Common.Services.ITasksService">
            <summary>
            O Serviço de Tasks fornece operações e informações relacionadas a API do BTL.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.ITasksService.StartTask(Benner.Tecnologia.Common.Tasks.Requests.ITaskRequest,System.Type,System.Boolean,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Envia uma mensagem contendo a requisição de execução de tarefa passada para a fila
            </summary>
            <param name="taskRequest">Requisição de execução de tarefa</param>
            <param name="returnType">Tipo do retorno da tarefa</param>
            <param name="notify">Se deve gerar uma notificação</param>
            <param name="transitoryData">Dados transitórios, utilizados pelo mecanismo de notificação</param>
            <returns>ProcessHandle da tarefa criada</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.ITasksService.ClearResultCache">
            <summary>
            Limpa o cache de resultados
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.ITasksService.GetStatus(System.Int64)">
            <summary>
            Obtém o Status da tarefa
            </summary>
            <param name="processHandle">ProcessHandle da tarefa</param>
            <returns>ProcessStatus</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.ITasksService.GetResult(System.Int64,System.Int64)">
            <summary>
            Obtém o resultado da tarefa
            </summary>
            <param name="processHandle">ProcessHandle da tarefa</param>
            <param name="waitMillisecondsTimeout">Tempo limite para aguardar a tarefa terminar. Informe 0 para não aguardar e obter o resultado imediatamente.</param>
            <returns>Retorna uma instância de BusinessTaskResult contendo o resultado atual da tarefa</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.ITasksService.RequestAbort(System.Int64)">
            <summary>
            Solicita o cancelamento da tarefa
            </summary>
            <param name="processHandle">ProcessHandle da tarefa</param>
            <returns>Retorna true se a solicitação de cancelamento foi feita com sucesso.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.ITasksService.GetMessage(System.Int64)">
            <summary>
            Obtém mensagens informativas que a tarefa pode gerar utilizando o ProcessLog
            </summary>
            <param name="processHandle">ProcessHandle da tarefa</param>
            <returns>Mensagem informativa</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.ITasksService.GetHost(System.Int64)">
            <summary>
            Obtém Host em que a tarefa foi disparada.
            </summary>
            <param name="processHandle">ProcessHandle da tarefa.</param>
            <returns>Host</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.ITasksService.GetUser(System.Int64)">
            <summary>
            Obtém o nome do usuário em que a tarefa foi disparada.
            </summary>
            <param name="processHandle">ProcessHandle da tarefa.</param>
            <returns>Usuário</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.ITasksService.GetStartDate(System.Int64)">
            <summary>
            Obtém a data de incio na qual a tarefa foi disparada.
            </summary>
            <param name="processHandle">ProcessHandle da tarefa.</param>
            <returns>StartDate</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.ITasksService.GetBDebuggerLog(System.Int64)">
            <summary>
            Obtém o log de depuração da tarefa
            </summary>
            <param name="processHandle">ProcessHandle da tarefa</param>
            <returns>Log de depuração</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.ITasksService.GetProgressPercent(System.Int64)">
            <summary>
            Obtém o percentual de progresso da tarefa. 
            Calculado com o valor inicial, valor final e valor atual da tarefa
            </summary>
            <param name="processHandle">ProcessHandle da tarefa</param>
            <returns>Percentual calculado.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.ITasksService.GetTaskDescription(System.Int64)">
            <summary>
            Obtém a descrição da tarefa.
            </summary>
            <param name="processHandle">ProcessHandle da tarefa</param>
            <returns>Descrição da tarefa</returns>
        </member>
        <member name="F:Benner.Tecnologia.Common.Services.ContextServicesFactory._businessWebModeDictionary">
            <summary>
            Este dicionário é uma cópia do dicionario Business, porém para o provider em contexto WebMode/WrapperMode, 
            onde o serviço de relatórios deve ser diferente para enfileirar emissões no BTL sem onerar o servidor web.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Services.ContextServicesFactory.TestProcessList">
            <summary>
            Lista de processos que executam testes automatizados
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Services.IAuthenticationService">
            <summary>
            Interface que define um serviço de autenticação de usuários em nossos componentes, ferramentas ou aplicações
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAuthenticationService.ValidateUser(System.String,System.String)">
            <summary>
            Realiza a autenticação do usuário, baseado no username e password
            </summary>
            <param name="userName">identificação do usuário</param>
            <param name="password">senha do usuário</param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAuthenticationService.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Realiza a alteração de senha do usuário
            </summary>
            <param name="userName">identificação do usuário</param>
            <param name="oldPassword">senha atual do usuário</param>
            <param name="newPassword">nova senha do usuário</param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Services.AuthenticationMode">
            <summary>
            Possíveis opções de autenticação
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Services.AuthenticationMode.Native">
            <summary>
            Autenticação Nativa Benner
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Services.AuthenticationMode.Ldap">
            <summary>
            Autenticação via LDAP
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Services.AuthenticationMode.Oidc">
            <summary>
            Autenticação via OIDC
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Services.IEntityFactoryService">
            <summary>
            Define a interface do serviço que instancia entidades de negócio.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IEntityFactoryService.CreateBusinessEntityInstance``1(System.String,System.String,System.Boolean)">
            <summary>
            Cria uma instância da classe mais customizada de uma entidade de negócio.
            </summary>
            <typeparam name="T">Tipo que representará a entidade.</typeparam>
            <param name="entityDefinitionName">Nome da definição da entidade para a qual se deseja uma entidade de negócio.</param>
            <param name="systemInstanceName">Nome da instância do sistema.</param>
            <param name="forceAssociatedType">Força a utilização do tipo associado à entidade</param>
            <returns>Retorna uma instância da classe mais customizada; a última herança configurada para o tipo.</returns>
            <remarks>Se não houver customizações configuradas, retorna uma instância de T.</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IEntityFactoryService.ExistsBusinessEntity(System.String,System.String,System.Type)">
            <summary>
            Verifica se existe alguma entidade especialidade para determinada EntityDefinition.
            </summary>
            <param name="entityDefinitionName">Nome da definição da entidade para a qual deseja verificar a existência de uma entidade.</param>
            <param name="systemInstanceName">Nome da instância do sistema.</param>
            <param name="proposedType">Tipo proposto para a definição.</param>
        </member>
        <member name="P:Benner.Tecnologia.Common.Services.InstrumentationServiceImplementation.Instance">
            <summary>
            Instancia unica da classe (Singleton)
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Services.IServiceFactory">
            <summary>
            Cria instancia de serviços.
            Classe parcial para ser usada no Silverlight
            </summary>
            <summary>
            Cria instâncias de serviços.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Services.IInstrumentationService">
            <summary>
            O Serviço de Instrumentação fornece operações e informações relacionadas ao gerenciamento da instrumentação do aplicativo.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Services.IUrlService">
            <summary>
            Serviço de geração de urls para a aplicação web.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Services.IReportService">
            <summary>
            Serviço com operações e informações de relatórios do sistema.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IReportService.EmitReport(Benner.Tecnologia.Common.Handle,System.String,Benner.Tecnologia.Common.Criteria,System.Boolean,System.Boolean,Benner.Tecnologia.Common.EntityBase,System.Boolean,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Dispara a emissão síncrona de um relatório, pelo HANDLE de R_RELATORIOS
            </summary>
            <param name="reportHandle">Handle do relatório que será emitido.</param>
            <param name="format">Formato do arquivo do relatório.</param>
            <param name="criteria">Critério de seleção para o filtro do relatório.</param>
            <param name="defaultFilter">Indica se é permitido executar um filtro antes da emissão.</param>
            <param name="companyFilter">Indica se os dados do relatório serão filtrados pela empresa corrente.</param>
            <param name="filterEntity">Entidade de entrada de dados.</param>
            <param name="emitToTemporaryTable">Indica se o relatório deve ser emitido e salvo em uma tabela temporária (Z_ARQUIVOSTEMPORARIOS)</param>
            <param name="transitoryData">Dados transitórios que serão passados para a emissão de relatório</param>
            <returns>Retorna o Handle do arquivo temporário (Z_ARQUIVOSTEMPORARIOS) com o relatório emitido caso o parâmetro <paramref name="emitToTemporaryTable"/> for definido igual a true.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IReportService.SendToMail(Benner.Tecnologia.Common.Handle,Benner.Tecnologia.Common.Criteria,System.Boolean,System.Boolean,Benner.Tecnologia.Common.EntityBase,Benner.Tecnologia.Common.Handle,System.String,System.String,System.String,System.String,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Envia um relatório por email
            </summary>
            <param name="reportHandle">Handle do relatório</param>
            <param name="criteria">Critério de seleção para o filtro do relatório.</param>
            <param name="defaultFilter">Indica se é permitido executar um filtro antes da emissão.</param>
            <param name="companyFilter">Indica se os dados do relatório serão filtrados pela empresa corrente.</param>
            <param name="filterEntity">Entidade de entrada de dados.</param>
            <param name="fromSystemUser">Handle do usuário usado como remetente e autenticação no envio do email</param>
            <param name="to">Endereços de email dos destinatários</param>
            <param name="subject">Assunto do email</param>
            <param name="body">Corpo do email</param>
            <param name="fileName">Arquivo do relatório que estará anexo ao email</param>
            <param name="transitoryData">Dados transitórios que serão passados para a emissão de relatório</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IReportService.EmitAsyncReport(Benner.Tecnologia.Common.Handle,System.String,Benner.Tecnologia.Common.Criteria,Benner.Tecnologia.Common.EntityBase,Benner.Tecnologia.Common.TransitoryData,System.Boolean,System.Boolean)">
            <summary>
            Dispara a emissão assíncrona de um relatório, no BTL.
            </summary>
            <param name="reportName"></param>
            <param name="format"></param>
            <param name="criteria"></param>
            <param name="filter"></param>
            <param name="transitoryData">Dados transitórios que serão passados para a emissão de relatório</param>
            <returns>O identificador da tarefa no BTL, para posterior pooling</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IReportService.AsyncReportIsTerminated(System.Int64)">
            <summary>
            Consulta se o processo de emissão assíncrona terminou, no BTL.
            </summary>
            <param name="reportProcessHandle"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IReportService.GetAsyncReport(System.Int64)">
            <summary>Recupera o relatório emitido.</summary>
            <param name="reportProcessHandle">Handle do relatório que deve ser recuperado.</param>
            <returns>Retorna um array de bytes que representam o relatório emitido.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IReportService.GetAsyncReportAndReportFileName(System.Int64,System.String@)">
            <summary> Recupera o relatório emitido. </summary>
            <param name="reportProcessHandle">Handle do relatório que deve ser recuperado.</param>
            <param name="reportFileName">Parametro de retorno do nome do relatório emitido, com sua extensão.</param>
            <returns>Retorna um array de bytes que representam o relatório emitido.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IReportService.EmitReport(System.String,System.String,Benner.Tecnologia.Common.Criteria,System.Boolean,System.Boolean,Benner.Tecnologia.Common.EntityBase,System.Boolean,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Dispara a emissão síncrona de um relatório, pelo CODIGO de R_RELATORIOS
            </summary>
            <param name="reportCode">Código do relatório que será emitido.</param>
            <param name="format">Formato do arquivo do relatório.</param>
            <param name="criteria">Critério de seleção para o filtro do relatório.</param>
            <param name="defaultFilter">Indica se é permitido executar um filtro antes da emissão.</param>
            <param name="companyFilter">Indica se os dados do relatório serão filtrados pela empresa corrente.</param>
            <param name="filterEntity">Entidade de entrada de dados.</param>
            <param name="emitToTemporaryTable">Indica se o relatório deve ser emitido e salvo em uma tabela temporária (Z_ARQUIVOSTEMPORARIOS)</param>
            <param name="transitoryData">Dados transitórios que serão passados para a emissão de relatório</param>
            <returns>Retorna o Handle do arquivo temporário (Z_ARQUIVOSTEMPORARIOS) com o relatório emitido caso o parâmetro <paramref name="emitToTemporaryTable"/> for definido igual a true.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IReportService.SendToMail(System.String,Benner.Tecnologia.Common.Criteria,System.Boolean,System.Boolean,Benner.Tecnologia.Common.EntityBase,Benner.Tecnologia.Common.Handle,System.String,System.String,System.String,System.String,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Envia um relatório por email
            </summary>
            <param name="reportHandle">Código do relatório que será emitido.</param>
            <param name="criteria">Critério de seleção para o filtro do relatório.</param>
            <param name="defaultFilter">Indica se é permitido executar um filtro antes da emissão.</param>
            <param name="companyFilter">Indica se os dados do relatório serão filtrados pela empresa corrente.</param>
            <param name="filterEntity">Entidade de entrada de dados.</param>
            <param name="fromSystemUser">Handle do usuário usado como remetente e autenticação no envio do email</param>
            <param name="to">Endereços de email dos destinatários</param>
            <param name="subject">Assunto do email</param>
            <param name="body">Corpo do email</param>
            <param name="fileName">Arquivo do relatório que estará anexo ao email</param>
            <param name="transitoryData">Dados transitórios que serão passados para a emissão de relatório</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IReportService.EmitAsyncReport(System.String,System.String,Benner.Tecnologia.Common.Criteria,Benner.Tecnologia.Common.EntityBase,Benner.Tecnologia.Common.TransitoryData,System.Boolean,System.Boolean)">
            <summary>
            Dispara a emissão assíncrona de um relatório, no BTL.
            </summary>
            <param name="reportCode"></param>
            <param name="format"></param>
            <param name="criteria"></param>
            <param name="filter"></param>
            <param name="transitoryData">Dados transitórios que serão passados para a emissão de relatório</param>
            <returns>O identificador da tarefa no BTL, para posterior pooling</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Services.IAdministrationService">
            <summary>
            O Serviço de Administração fornece operações e informações relacionadas ao gerenciamento de aplicativos.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAdministrationService.GetSystems">
            <summary>
            Retorna a lista de nomes das instâncias de sistemas configuradas no Pool.Config. É a lista de sistema que este serviço pode atender.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAdministrationService.ClearCache">
            <summary>
            Limpa o cache de entidades.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAdministrationService.ClearCache(System.Boolean)">
            <summary>
            Limpa o cache de entidades.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAdministrationService.ClearCache(System.Int32)">
            <summary>
            Limpa o cache de entidades baseado em categorias.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAdministrationService.GetFarmsWes">
            <summary>
            Limpa o cache de entidades checando se há farm cadastrado.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAdministrationService.IsBennerEnvironment(System.String)">
            <summary>
            Identifica se o ambiente de desenvolvimento é Benner ou Cliente
            </summary>
            <returns>
            Retorna True se o ambiente for Benner. Retorna False se o ambiente for de Cliente.
            </returns>
            <remarks>Este método não identifica se a base de dados é de núcleo (Benner) ou específico. Para isso use IsCustomSystem.</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAdministrationService.IsCustomSystem(System.String)">
            <summary>
            Identifica se a base de dados é Específica ou Benner
            </summary>
            <returns>
            Retorna True se a base de dados é Específica. Retorna False se a base de dados é Benner.
            </returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAdministrationService.IsVerticalSystem(System.String)">
            <summary>
            Identifica se a base de dados é Específica ou Benner
            </summary>
            <returns>
            Retorna True se a base de dados é Específica. Retorna False se a base de dados é Benner.
            </returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.Services.IAdministrationService.DefaultSystemInstanceName">
            <summary>
            Retorna o nome da instância do sistema padrão.
            </summary>
            <remarks>
            Do servidor de aplicativos para cima (apresentação), esta propriedade representa o identificador da pool.
            Do servidor de aplicativos para baixo, esta propriedade representa o nome do sistema no Benner Server.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAdministrationService.GetConfigurationParameter(System.String,System.String,Benner.Tecnologia.Common.ConfigurationParameterType)">
            <summary>
            Obtem um parâmetro de configuração do sistema (Z_VARIAVEIS)
            </summary>
            <param name="key">Chave</param>
            <param name="name">Nome do parâmetro</param>
            <param name="parameterType">Tipo do parâmetro, indica se o parâmetro é de sistema ou de usuário</param>
            <returns>O valor do parâmetro</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAdministrationService.GetConfigurationParameter(System.String,System.String,Benner.Tecnologia.Common.ConfigurationParameterType,System.String)">
            <summary>
            Obtem um parâmetro de configuração do sistema (Z_VARIAVEIS)
            </summary>
            <param name="key">Chave</param>
            <param name="name">Nome do parâmetro</param>
            <param name="parameterType">Tipo do parâmetro, indica se o parâmetro é de sistema ou de usuário</param>
            <returns>O valor do parâmetro</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAdministrationService.SetConfigurationParameter(System.String,System.String,Benner.Tecnologia.Common.ConfigurationParameterType,System.String)">
            <summary>
            Atualiza o valor de um parâmetro de configuração do sistema (Z_VARIAVEIS)
            </summary>
            <param name="key">Chave</param>
            <param name="name">Nome do parâmetro</param>
            <param name="parameterType">Tipo do parâmetro, indica se o parâmetro é de sistema ou de usuário</param>
            <param name="value">Valor do parâmetro</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAdministrationService.SetConfigurationParameter(System.String,System.String,Benner.Tecnologia.Common.ConfigurationParameterType,System.String,System.String)">
            <summary>
            Atualiza o valor de um parâmetro de configuração do sistema (Z_VARIAVEIS)
            </summary>
            <param name="key">Chave</param>
            <param name="name">Nome do parâmetro</param>
            <param name="parameterType">Tipo do parâmetro, indica se o parâmetro é de sistema ou de usuário</param>
            <param name="value">Valor do parâmetro</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAdministrationService.GetCurrentCustomizationLevel(System.String)">
            <summary>
            Indica em que nível de customização o ambiente atual se encontra.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAdministrationService.GetCompanyFieldName(System.String)">
            <summary>
            Obtém o nome de campo empresa configurado para o sistema
            </summary>
            <remarks>
            O valor está armazenado em Z_SISTEMAS.CAMPOEMPRESA.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAdministrationService.GetBranchFieldName(System.String)">
            <summary>
            Obtém o nome de campo filial configurado para o sistema
            </summary>
            <remarks>
            O valor está armazenado em Z_SISTEMAS.CAMPOFILIAL.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAdministrationService.GetBranchActiveFieldName(System.String)">
            <summary>
            Obtém o nome de campo para informar que a filial está ativa configurado para o sistema. 
            </summary>
            <param name="systemName"> O valor está armazenado em Z_SISTEMA.CAMPOFILIALATIVA.</param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAdministrationService.GetCompanyEntityName(System.String)">
            <summary>
            Obtém o nome da tabela de Empresas (Z_SISTEMA.TABELAEMPRESAS)
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAdministrationService.GetBranchEntityName(System.String)">
            <summary>
            Obtém o nome da tabela de Filiais (Z_SISTEMA.TABELAFILIAIS)
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAdministrationService.GetProviderVersion(System.String)">
            <summary>
            Obtém a versão do Provider.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAdministrationService.GetSuperServerVersion(System.String)">
            <summary>
            Obtém a versão do Super Server.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAdministrationService.GetSystemVersion(System.String)">
            <summary>
            Obtém a versão do Sistema.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAdministrationService.ServerDate">
            <summary>
            Retorna a data atual obtida da camada de negócios.
            </summary>
            <returns>Retorna a data atual obtida da camada de negócios.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAdministrationService.ServerDateTime">
            <summary>
            Retorna data e hora atual obtidas da camada de negócios.
            </summary>
            <returns>Retorna data e hora atual obtidas da camada de negócios.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAdministrationService.GetAuditLogs(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Retorna registro de log e auditoria da tabela Z_LOG
            </summary>
            <param name="systemName">Nome do sistema</param>
            <param name="initDate">Data inicial</param>
            <param name="endDate">Data final</param>
            <param name="tableName">Nome da tabela</param>
            <param name="userName">Nome do usuário</param>
            <param name="record">Handle</param>
            <param name="host">Servidor</param>
            <param name="actions">Ação</param>
            <param name="startRowIndex">Indice do primeiro registro</param>
            <param name="maximumRows">Número máximo de linhas</param>
            <param name="count">Retorna o número de registro encontrados</param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAdministrationService.ValidateBefVersion(System.String,System.String)">
            <summary>
            Executa validação de versão dos arquivos que compõem o Business Entity Framework.
            </summary>
            <param name="systemName">Nome do sistema</param>
            <param name="requiredBefVersion">Versão mínima requerida</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAdministrationService.ChangeCompanyAndBranch(Benner.Tecnologia.Common.Handle,Benner.Tecnologia.Common.Handle)">
            <summary>
            Troca a empresa e filial selecionados.
            </summary>
            <param name="companyHandle">Handle da empresa a ser selecionada.</param>
            <param name="branchHandle">Handle da filial a ser selecionada. Informe um handle nulo para selecionar todas as filiais.</param>
            <example>
            BennerContext.Administration.ChangeCompanyAndBranch(companyHandle, branchHandle);
            </example>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAdministrationService.GetDbVersion(System.String)">
            <summary>
            Recupera a versão DB do sistema default
            </summary>
            <returns>Versão DB de Z_SISTEMA</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAdministrationService.GetLicenseInfo(System.String)">
            <summary>
            Obtém informações de licença de uso do sistema
            </summary>
            <param name="systemInstanceName">Nome do sistema</param>
            <returns>Instância de BennerLicenseInfo contendo as informações de licença de uso do sistema</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAdministrationService.GetAllBranchesLabel">
            <summary>
            Obtém o texto que informa que está selecionado todas as filiais (Z_CLIENTES.TODASASFILIAIS)
            </summary>
            <returns></returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.Services.IAdministrationService.BServerHost">
            <summary>
            Nome do servidor do Benner Server
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Services.IAdministrationService.BServerSystemName">
            <summary>
            Nome do sistema no ServerManager.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Services.AuthorizationServiceImplementation">
            <summary>
            Implementação do serviço de autorização.
            </summary>
            <remarks>Busines logic</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.AuthorizationServiceImplementation.GetUserRoles(System.String,System.String)">
            <summary>
            Recupera lista de papéis que determinado usuário pode desempenhar.
            </summary>
            <param name="userName">Identificação do usuário.</param>
            <param name="systemInstanceName">Identificador do sistema.</param>
            <returns>Lista de nome de papéis que o usuário pode desempenhar.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.AuthorizationServiceImplementation.AuthorizeOperation(System.String,System.Collections.Generic.IReadOnlyList{System.String},System.String,System.String)">
            <summary>
            Verifica se determinado usuário pode executar determinada operação ao desempenhar um conjunto de papéis.
            </summary>
            <param name="userName">Identificação do usuário.</param>
            <param name="roleNameList">Lista de nome de papéis considerados para autorizar a operação.</param>
            <param name="operationName">Nome da operação que se deseja autorizar.</param>
            <param name="systemInstanceName">Identificador do sistema.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.AuthorizationServiceImplementation.CanExecuteOperation(System.String,System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            Verifica se determinado usuário pode executar determinada operação ao desempenhar um conjunto de papéis.
            </summary>
            <param name="userName"></param>
            <param name="roleNameList"></param>
            <param name="operationName"></param>
            <param name="systemInstanceName"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.AuthorizationServiceImplementation.Initialize">
            <summary>
            Executa o processamento inicial dos dados de autorização. Acontece a cada WarmUp
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.AuthorizationServiceImplementation.CanAccessUrl(System.String,System.String,System.Boolean)">
            <summary>
            Verifica se o usuário atual pode acessar a url informada.
            </summary>
            <param name="url"></param>
            <param name="systemInstanceName"></param>
            <param name="useAllUserRoles">Verifica a permissão de acesso a url em todos os papeis do usuário.</param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.AuthorizationServiceImplementation.AuthorizeBusinessComponentMethod(System.String,System.String)">
            <summary>
            Executa a validação de autorização de determinado papel sobre um método de um business component
            </summary>
            <param name="businessComponent"></param>
            <param name="methodName"></param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Services.IAuthorizationService">
            <summary>
            Define métodos do serviço de autorização.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAuthorizationService.GetUserRoles(System.String,System.String)">
            <summary>
            Recupera lista de papéis que determinado usuário pode desempenhar.
            </summary>
            <param name="userName">Identificação do usuário.</param>
            <param name="systemInstanceName">Identificador do sistema.</param>
            <returns>Lista de nome de papéis que o usuário pode desempenhar.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAuthorizationService.AuthorizeOperation(System.String,System.Collections.Generic.IReadOnlyList{System.String},System.String,System.String)">
            <summary>
             Verifica se determinado usuário pode executar determinada operação ao desempenhar um conjunto de papéis.
            </summary>
            <param name="userName">Identificação do usuário.</param>
            <param name="roles">Lista de nome de papéis considerados para autorizar a operação.</param>
            <param name="operationName">Nome da operação que se deseja autorizar.</param>
            <param name="systemInstanceName">Identificador do sistema.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAuthorizationService.Initialize">
            <summary>
            Executa processamento inicial de grupos e papéis.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAuthorizationService.GetTasksFromRole(System.String,System.String)">
            <summary>
            Recupera lista de tarefas de determinadao papel.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAuthorizationService.CanAccessUrl(System.String,System.Boolean)">
            <summary>
            Verifica se o usuário atual pode acessar a url informada.
            </summary>
            <param name="url"></param>
            <param name="useAllUserRoles">Verifica a permissão de acesso a url em todos os papeis do usuário.</param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAuthorizationService.CanInsertOnUrl(System.String,System.String)">
            <summary>
            Verifica se o usuário pode acessar a url e possui permissão para inserir na entidade
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAuthorizationService.CanUpdateOnUrl(System.String,System.String)">
            <summary>
            Verifica se o usuário pode acessar a url e possui permissão para atualizar na entidade
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAuthorizationService.CanViewEntity(System.String,System.String)">
            <summary>
            Indica se o usuário pode executar a operação View em uma entidade.
            </summary>
            <param name="systemInstanceName"></param>
            <param name="entityName"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAuthorizationService.AuthorizeBusinessComponentMethod(System.String,System.String)">
            <summary>
            Executa a validação de autorização de determinado papel sobre um metodo de um business component
            </summary>
            <param name="businessComponent"></param>
            <param name="methodName"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAuthorizationService.AuthorizeTaskStart(Benner.Tecnologia.Common.Tasks.Requests.ITaskRequest)">
            <summary>
            Executa a validação de autorização de determinado papel sobre um requisição de start de uma tarefa BTL.
            </summary>
            <param name="taskRequest"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAuthorizationService.CanExecuteReport(System.String)">
            <summary>
            Indica se o usuário pode executar o relatório
            </summary>
            <param name="reportId"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAuthorizationService.CanExecuteReport(Benner.Tecnologia.Common.Handle)">
            <summary>
            Indica se o usuário pode executar o relatório
            </summary>
            <param name="reportHandle"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IAuthorizationService.AuthorizeReport(System.String)">
            <summary>
            Executa a validação de autorização de determinado papel sobre uma emissão de relatório.
            </summary>
            <param name="reportId"></param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Services.LocalAuthorizationService">
            <summary>
            Serviço de autorização local.
            </summary>
            <remarks>Policies pipeline</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.LocalAuthorizationService.GetUserRoles(System.String,System.String)">
            <summary>
            Recupera lista de papéis que determinado usuário pode desempenhar
            * Considera os papéis com atribuição positiva (designados) diretamente usuário e aos grupos nos quais o usuário é membro.
            * Desconsidera os papéis incluídos, supõe-se que se o usuário pode desempenhar um papel, ele também pode desempenhar os respectivos papéis incluídos.
            </summary>
            <param name="userName">Identificação do usuário.</param>
            <param name="systemInstanceName">Identificador do sistema.</param>
            <returns>Lista de nome de papéis que o usuário pode desempenhar.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.LocalAuthorizationService.AuthorizeOperation(System.String,System.Collections.Generic.IReadOnlyList{System.String},System.String,System.String)">
            <summary>
            Verifica se determinado usuário pode executar determinada operação ao desempenhar um determinado conjunto de papéis.
            </summary>
            <param name="userName">Identificação do usuário.</param>
            <param name="roles">Lista de nome de papéis considerados para autorizar a operação.</param>
            <param name="operationName">Nome da operação que se deseja autorizar.</param>
            <param name="systemInstanceName">Identificador do sistema.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.LocalAuthorizationService.Initialize">
            <summary>
            Inicializa o serviço de autorização.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.LocalAuthorizationService.GetTasksFromRole(System.String,System.String)">
            <summary>
            Recupera lista de tarefas de determinado papel.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.LocalAuthorizationService.CanAccessUrl(System.String,System.Boolean)">
            <summary>
            Verifica se o usuário atual pode acessar a url informada.
            </summary>
            <param name="url"></param>
            <param name="useAllUserRoles">Verifica a permissão de acesso a url em todos os papeis do usuário.</param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.LocalAuthorizationService.CanAccessUrl(System.String,System.String,System.Boolean)">
            <summary>
            Verifica se o usuário atual pode acessar a url informada.
            </summary>
            <param name="url"></param>
            <param name="useAllUserRoles">Verifica a permissão de acesso a url em todos os papeis do usuário.</param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.LocalAuthorizationService.CanInsertOnUrl(System.String,System.String)">
            <summary>
            Verifica se o usuário pode acessar a url e possui permissão para inserir na entidade
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.LocalAuthorizationService.CanUpdateOnUrl(System.String,System.String)">
            <summary>
            Verifica se o usuário pode acessar a url e possui permissão para atualizar na entidade
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.LocalAuthorizationService.AuthorizeBusinessComponentMethod(System.String,System.String)">
            <summary>
            Executa a validação de autorização de determinado papel sobre um metodo de um business component
            </summary>
            <param name="businessComponent"></param>
            <param name="methodName"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.LocalAuthorizationService.AuthorizeTaskStart(Benner.Tecnologia.Common.Tasks.Requests.ITaskRequest)">
            <inheritdoc />
        </member>
        <member name="T:Benner.Tecnologia.Common.Services.IEntityService">
            <summary>
            Define métodos para interagir com um provedor de dados.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IEntityService.Create(Benner.Tecnologia.Common.EntityDescription,Benner.Tecnologia.Common.NameValueDictionary,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Cria uma nova instância de entidade.
            </summary>
            <param name="entityDescription">A definição da entidade a ser criada.</param>
            <param name="suggestedValues">Dicionário contendo valores sugeridos, que a nova instância de entidade irá assumir.</param>
            <returns>Uma nova instância de entidade.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IEntityService.Get(Benner.Tecnologia.Common.EntityDescription,Benner.Tecnologia.Common.Criteria,Benner.Tecnologia.Common.GetMode,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Obtém uma instância de entidade da origem de dados.
            </summary>
            <param name="entityDescription">A definição da instância da entidade a ser obtida.</param>
            <param name="criteria">O critério para recuperar a instância da entidade.</param>
            <param name="mode">O modo de obtenção da instância da entidade.</param>
            <returns>Uma instância da entidade requisitada.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IEntityService.GetMany(Benner.Tecnologia.Common.EntityDescription,Benner.Tecnologia.Common.Criteria,Benner.Tecnologia.Common.GetMode,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Obtém várias instâncias de entidade da origem de dados.
            </summary>
            <param name="entityDescription">A definição das instâncias da entidade a ser obtida.</param>
            <param name="criteria">O critério para recuperar a coleção de instâncias da entidade.</param>
            <param name="mode">Modo de recuperação da entidade, determinando seu estado após ser obtida.</param>
            <returns>Uma coleção com as instâncias da entidade requisitada.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IEntityService.FetchMany(Benner.Tecnologia.Common.EntityDescription,Benner.Tecnologia.Common.Criteria,Benner.Tecnologia.Common.GetMode,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Obtém várias instâncias de entidade da origem de dados com lazy load.
            </summary>
            <param name="entityDescription">A definição das instâncias da entidade a ser obtida.</param>
            <param name="criteria">O critério para recuperar a coleção de instâncias da entidade.</param>
            <param name="mode">Modo de recuperação da entidade, determinando seu estado após ser obtida.</param>
            <returns>Uma coleção com as instâncias da entidade requisitada.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IEntityService.GetHandle(Benner.Tecnologia.Common.EntityDescription,Benner.Tecnologia.Common.Criteria,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Obtém o Handle da entidade a partir de um critério.
            </summary>
            <param name="entityDescription">A definição das instâncias da entidade a ser obtida.</param>
            <param name="criteria">O critério para recuperar a coleção de instâncias da entidade.</param>
            <param name="transitoryData">Dados transitorios</param>
            <returns>Handle da entidade selecionada.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IEntityService.GetAggregates(Benner.Tecnologia.Common.EntityDescription,Benner.Tecnologia.Common.Criteria,Benner.Tecnologia.Common.TransitoryData,Benner.Tecnologia.Common.AggregationOperationCollection)">
            <summary>
            Executa operações de agregação sobre um conjunto de entidades (Sum, Average, Count, Max e Min), baseado em um filtro (Criteria).
            </summary>
            <param name="entityDescription"></param>
            <param name="criteria"></param>
            <param name="transitoryData"></param>
            <param name="aggregationOperationCollection"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IEntityService.GetAll(Benner.Tecnologia.Common.EntityDescription,Benner.Tecnologia.Common.GetMode,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Obtém todas as instâncias de uma entidade da origem de dados.
            </summary>
            <param name="entityDescription">A definição das instâncias da entidade a ser obtida.</param>
            <param name="mode">Modo de recuperação da entidade, determinando seu estado após ser obtida.</param>
            <returns>Uma coleção com as instâncias da entidade requisitada.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IEntityService.CountAll(Benner.Tecnologia.Common.EntityDescription,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Conta todas as instâncias de uma entidade da origem de dados.
            </summary>
            <param name="entityDescription">A definição das instâncias da entidade a serem contadas.</param>
            <returns>A quantidade de instâncias da entidade existentes na origem de dados.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IEntityService.CountMany(Benner.Tecnologia.Common.EntityDescription,Benner.Tecnologia.Common.Criteria,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Conta as instâncias de uma entidade da origem de dados que atendem a um determinado critério de seleção.
            </summary>
            <param name="entityDescription">A definição das instâncias da entidade a serem contadas.</param>
            <param name="criteria">O critério para contar as instâncias da entidade.</param>
            <returns>A quantidade de instâncias da entidade existentes na origem de dados.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IEntityService.DeleteMany(Benner.Tecnologia.Common.EntityDescription,Benner.Tecnologia.Common.Criteria,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Exclui as instâncias de uma entidade da origem de dados que atendem a um determinado critério de seleção.
            </summary>
            <param name="entityDescription">A definição das instâncias da entidade a serem excluídas.</param>
            <param name="criteria">O critério para excluir as instâncias da entidade.</param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IEntityService.Delete(Benner.Tecnologia.Common.EntityDescription,Benner.Tecnologia.Common.Handle,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Exclui uma instância de entidade da origem de dados.
            </summary>
            <param name="entityDescription">A definição da instância da entidade a ser excluída.</param>
            <param name="handle">O identificador único da instância da entidade a ser excluída.</param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IEntityService.Save(Benner.Tecnologia.Common.EntityBase,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Persiste uma instância de entidade na origem de dados.
            </summary>
            <param name="entity">A instância da entidade a ser persistida.</param>
            <returns>A instância da entidade já persistida.</returns>
            <remarks>
            A instância da entidade pode ser nova (inclusão) ou já existente (alteração).
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IEntityService.Exists(Benner.Tecnologia.Common.EntityDescription,Benner.Tecnologia.Common.Criteria,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Verifica se existe ao menos uma instância de entidade na origem de dados que atenda a um determinado critério de seleção.
            </summary>
            <param name="entityDescription">A definição da instância da entidade a ser pesquisada.</param>
            <param name="criteria">O critério de pesquisa.</param>
            <returns>true se existir ao menos um objeto que atenda aos critérios; false caso contrário.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IEntityService.Call(Benner.Tecnologia.Common.EntityDescription,Benner.Tecnologia.Common.FunctionDefinition,Benner.Tecnologia.Common.Criteria,Benner.Tecnologia.Common.EntityBase,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Executa uma função de uma entidade.
            </summary>
            <param name="entityDescription">Definição da entidade cuja função será executada.</param>
            <param name="functionDefinition">Definição da função a ser executada.</param>
            <param name="targetCriteria">Critérios de seleção dos registros nos quais a função será executada.</param>
            <param name="dataEntity">Dados adicionais a serem utilizados pela função (opcional).</param>
            <returns>Dicionário de informações que são manipuladas durante a execução de uma função, independente de seu mecanismo.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IEntityService.Call(Benner.Tecnologia.Common.EntityDescription,Benner.Tecnologia.Common.FunctionDefinition,Benner.Tecnologia.Common.Criteria,Benner.Tecnologia.Common.EntityBase,Benner.Tecnologia.Common.EntityBase,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Executa uma função para uma entidade especifica.
            </summary>
            <param name="entityDescription">Definição da entidade cuja função será executada.</param>
            <param name="functionDefinition">Definição da função a ser executada.</param>
            <param name="targetCriteria">Critérios de seleção dos registros nos quais a função será executada.</param>
            <param name="currentEntity">Entidade que será executada a função.</param>
            <param name="dataEntity">Dados adicionais a serem utilizados pela função (opcional).</param>
            <returns>Dicionário de informações que são manipuladas durante a execução de uma função, independente de seu mecanismo.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IEntityService.Execute(Benner.Tecnologia.Common.EntityCommandList,System.Collections.Generic.List{Benner.Tecnologia.Common.TransitoryData})">
            <summary>
            Executa um lote de operações em uma transação.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IEntityService.StoreContents(System.IO.Stream)">
            <summary>
            Armazena um conteúdo em uma área temporária.
            </summary>
            <param name="source">Stream contendo os dados a serem armazenados.</param>
            <returns>Identificador do conteúdo na área de armazenamento temporário.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IEntityService.StoreContents(System.Byte[])">
            <summary>
            Armazena um conteúdo em uma área temporária.
            </summary>
            <param name="source">Array de bytes contendo os dados a serem armazenados.</param>
            <returns>Identificador do conteúdo na área de armazenamento temporário.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IEntityService.RetrieveContents(Benner.Tecnologia.Common.EntityBase,System.String,System.IO.Stream)">
            <summary>
            Recupera o conteúdo associado a um campo de uma entidade.
            </summary>
            <param name="entity">Instância de entidade do conteúdo a ser recuperado.</param>
            <param name="fieldName">Nome do campo do conteúdo a ser recuperado.</param>
            <param name="target">Stream na qual o conteúdo deve ser armazenado.</param>
            <remarks>
            Esta operação não recupera o conteúdo armazenado na área temporária por StoreContents.
            Ela recupera o conteúdo armazenado definitivamente quando o objeto é persistido.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IEntityService.RetrieveContents(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.Handle,System.String)">
            <summary>
            Recupera o conteúdo associado a um campo de uma entidade.
            </summary>
            <param name="entity">Instância de entidade do conteúdo a ser recuperado.</param>
            <param name="fieldName">Nome do campo do conteúdo a ser recuperado.</param>
            <returns>O conteúdo do arquivo.</returns>
            <remarks>
            Esta operação não recupera o conteúdo armazenado na área temporária por StoreContents.
            Ela recupera o conteúdo armazenado definitivamente quando o objeto é persistido.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.IEntityService.SaveFileContents(System.String,Benner.Tecnologia.Common.Handle,System.String,System.String)">
            <summary>
            Salva o conteúdo de um campo tipo arquivo, no local informado
            </summary>
            <param name="entityName">Nome da tabela contendo o campo tipo arquivo</param>
            <param name="handle">Chave do registro contendo o campo tipo arquivo</param>
            <param name="fieldName">Nome do campo tipo arquivo</param>
            <param name="filePath">Path completo onde se deseja gravar o arquivo</param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Services.ISecurityService">
            <summary>
            O Serviço de Segurança fornece operações e informações relacionadas à segurança e permissões de usuários. 
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.ISecurityService.GetLoggedUserName">
            <summary>
            Retorna o nome de usuário do usuário logado.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.ISecurityService.GetLoggedUserHandle">
            <summary>
            Retorna o handle do usuário logado.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.ISecurityService.GetLoggedUserEmail">
            <summary>
            Retorna o email do usuário logado
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.ISecurityService.GetLoggedUserCellPhone">
            <summary>
            Retorna o celular do usuário logado
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.ISecurityService.IsToken2FAValidated">
            <summary>
            Retorna se o token 2FA foi validado
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.ISecurityService.GetCurrentIdiom(System.String)">
            <summary>
            Retorna o handle do idioma do usuário logado.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.ISecurityService.GetCurrentCompany(System.String)">
            <summary>
            Recupera a empresa selecionada, para o usuário atual.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.ISecurityService.GetCurrentBranch(System.String)">
            <summary>
            Recupera a filial selecionada para o usuário atual.
            </summary>
            <param name="systemName"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.ISecurityService.GetCompanyList(System.String)">
            <summary>
            Recupera a lista de empresas e filiais que o usuário atual tem acesso e licença
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.ISecurityService.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Altera a senha do usuário atual.
            </summary>
            <param name="systemName">Nome do sistema.</param>
            <param name="currentPassword">Senha atual.</param>
            <param name="newPassword">Nova senha.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.ISecurityService.ForceChangePassword(System.String,System.String,System.String)">
            <summary>
            Altera a senha do usuário sem informar a senha antiga.
            </summary>
            <param name="systemName">Nome do sistema.</param>
            <param name="userName">Nome do usuário.</param>
            <param name="newPassword">Nova senha.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.ISecurityService.ValidateUser(System.String,System.String)">
            <summary>
            Valida o usuário
            </summary>
            <param name="userName"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.ISecurityService.Token2FAVerified(System.Boolean)">
            <summary>
            Recupera se na autenticação foi usado token 2FA
            </summary>
            <param name="verified"></param>
            <returns>Retorna TRUE se o último token 2FA foi validado com sucesso</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.ISecurityService.GetSessionPath">
            <summary>
            Pasta de trabalho temporária para gravação e leitura de arquivo em todas as ferramentas.
            Não deve ser utilizada para a gravação permanente de arquivos no sistema. 
            </summary>
            <returns>BSistema.SessionPath</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.ISecurityService.GetBinPath">
            <summary>
            Pasta dos binários
            Não deve ser utilizada para a gravação permanente de arquivos no sistema. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.ISecurityService.GetEntityCurrentCompany(System.String)">
            <summary>
            Obtém a empresa mestre de uma tabela (definição de entidade com TableSource)
            </summary>
            <returns>Handle da empresa Mestre</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.ISecurityService.ReloadCompaniesAndBranches">
            <summary>
            Recarrega as empresas e filiais
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.ISecurityService.GetTableFilters(System.String,Benner.Tecnologia.Common.CompanyFilterMode)">
            <summary>
            Obtém filtro de registro e de empresa e filial para uma determinada tabela.
            </summary>
            <param name="tableName"></param>
            <param name="companyFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Services.ISecurityService.IsDeveloper">
            <summary>
            Indica se o usuário possui permissão de desenvolvedor em Z_GRUPOS.
            </summary>
            <returns>Retorna true se o usuário for desenvolvedor, caso contrário, false.</returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.Tasks.Requests.BusinessComponentScheduleTaskRequest.ComponentTypeName">
            <summary>
            Nome completo do BusinessComponent no seguinte formato: Namespace.Componente, Assembly.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Tasks.Requests.BusinessComponentScheduleTaskRequest.SessionVars">
            <summary>
            SessionVars que serão utilizadas na execução da tarefa.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Tasks.Requests.BusinessComponentScheduleTaskRequest.AlwaysGenerateBDebugger">
            <summary>
            Se deve gerar o BDebugger mesmo quando não ocorre erro
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Tasks.Requests.ClearLogTaskRequest">
            <summary>
            TaskRequest para a execução de limpeza de log e auditoria.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Tasks.Requests.ClearLogTaskRequest.LogDefaultDays">
            <summary>
            Dias padrão para manter o log de auditoria.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Tasks.Requests.ClearLogTaskRequest.AlwaysGenerateBDebugger">
            <summary>
            Se deve gerar o BDebugger mesmo quando não ocorre erro
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Tasks.Requests.ClearLogTaskRequest.GetTaskDescription">
            <summary>
            Obtém a descrição da tarefa em execução.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Tasks.Requests.ClearLogTaskRequest.GetSignature">
            <summary>
            Obtém a assinatura da tarefa.
            </summary>
            <returns>Retorna a assinatura informada ou a assinatura padrão da mensagem.</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Tasks.Requests.ReportScheduleTaskRequest">
            <summary>
            TaskRequest para a execução de relatórios agendados.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Tasks.Requests.ReportScheduleTaskRequest.ReportName">
            <summary>
            Nome do relatório
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Tasks.Requests.ReportScheduleTaskRequest.Opts">
            <summary>
            Parametros OPTS do legado
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Tasks.Requests.ReportScheduleTaskRequest.Vars">
            <summary>
            Parametros VARS do legado
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Tasks.Requests.ReportScheduleTaskRequest.SQLs">
            <summary>
            Parametros SQLs do legado
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Tasks.Requests.ReportScheduleTaskRequest.Form">
            <summary>
            Parametros FORM do legado
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Tasks.Requests.ReportScheduleTaskRequest.Period">
            <summary>
            Periodo em Z_PERIODOS do agendamento
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Tasks.Requests.ReportScheduleTaskRequest.AlwaysGenerateBDebugger">
            <summary>
            Se deve gerar o BDebugger mesmo quando não ocorre erro
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Tasks.Requests.ReportScheduleTaskRequest.GetTaskDescription">
            <summary>
            Obtém a descrição da tarefa em execução.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Tasks.Requests.ReportScheduleTaskRequest.GetSignature">
            <summary>
            Obtém a assinatura da tarefa.
            </summary>
            <returns>Retorna a assinatura informada ou a assinatura padrão da mensagem.</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Tasks.Requests.CSServerExecTaskRequest">
            <summary>
            TaskRequest para a execução de CSServerExec (legado).
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Tasks.Requests.CSServerExecTaskRequest.SessionVars">
            <summary>
            SessionVars que serão utilizadas na execução da tarefa.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Tasks.Requests.CSServerExecTaskRequest.DataXml">
            <summary>
            Xml contendo os dados que serão convertidos para um container
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Tasks.Requests.CSServerExecTaskRequest.DataJson">
            <summary>
            JSON contendo os dados que serão convertidos para um container
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Tasks.Requests.CSServerExecTaskRequest.#ctor">
            <summary>
            Cria nova instância de uma solicitação de execução de tarefa de CSServerExec (legado)
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Tasks.Requests.BusinessComponentTaskRequest">
            <summary>
            TaskRequest para execução de componentes de negócio
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Tasks.Requests.BusinessComponentTaskRequest.ComponentTypeName">
            <summary>
            Nome completo do BusinessComponent no seguinte formato: Namespace.Componente, Assembly.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Tasks.Requests.BusinessComponentTaskRequest.RequestValueXml">
            <summary>
            Xml contendo o objeto serializado que será passado como parâmetro de request para a tarefa. 
            Deve ser serializado/deserializado com BusinessComponentTaskRequest.ValueToXml/XmlToValue.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Tasks.Requests.BusinessComponentTaskRequest.AlwaysGenerateBDebugger">
            <summary>
            Se deve gerar o BDebugger mesmo quando não ocorre erro
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Tasks.Requests.BusinessComponentTaskRequest.TaskDescription">
            <summary>
            Descrição da tarefa;
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Tasks.Requests.BusinessComponentTaskRequest.ForceWebMode">
            <summary>
            Define que durante a execução da tarefa o provider vai definir o WebMode=true.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Tasks.Requests.BusinessComponentTaskRequest.#ctor">
            <summary>
            Cria nova instância de uma solicitação de execução de tarefa de BusinessComponent
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Tasks.Requests.BusinessComponentTaskRequest.GetTaskDescription">
            <summary>
            Obtém uma descrição da tarefa
            </summary>
            <returns>Nome do componente de negócio</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Tasks.Requests.BusinessComponentTaskRequest.GetSignature">
            <summary>
            Assinatura
            </summary>
            <returns>Assinatura</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Tasks.Requests.BusinessComponentTaskRequest.GetSaveDebbugerMessages">
            <summary>
            Deve salvar log de depuração?
            </summary>
            <returns>Boolean indicado se deve salvar o log</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Tasks.Requests.CSServerExecDllTaskRequest">
            <summary>
            TaskRequest para a execução de dlls por CSServerExec.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Tasks.Requests.CSServerExecDllTaskRequest.DllClassName">
            <summary>
            Nome da dll/classe que será executada na tarefa.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Tasks.Requests.CSServerExecDllTaskRequest.GetTaskDescription">
            <summary>
            Obtém a descrição da tarefa em execução.
            </summary>
            <returns>Retorna o nome da Dll que será executada.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Tasks.Requests.CSServerExecDllTaskRequest.GetSignature">
            <summary>
            Obtém a assinatura da tarefa.
            </summary>
            <returns>Retorna a assinatura informada ou a assinatura padrão da mensagem.</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Tasks.Requests.CSServerExecMacroTaskRequest">
            <summary>
            TaskRequest para a execução de macros por CSServerExec.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Tasks.Requests.CSServerExecMacroTaskRequest.MacroHandle">
            <summary>
            Handle de macro que será executada. Prefira utilizar a propriedade MacroIdCode.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Tasks.Requests.CSServerExecMacroTaskRequest.MacroIdCode">
            <summary>
            Código de identificação da macro que será executada (Campo CODIGO de Z_MACROS).
            Tem prioridade sobre o MacroHandle.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Tasks.Requests.CSServerExecMacroTaskRequest.GetTaskDescription">
            <summary>
            Obtém a descrição da tarefa em execução.
            </summary>
            <returns>Retorna o handle da macro que será executada.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Tasks.Requests.CSServerExecMacroTaskRequest.GetMacroCode">
            <summary>
            Obtém o código de macro que deve ser executado.
            </summary>
            <returns>Código da macro</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Tasks.Requests.CSServerExecMacroTaskRequest.GetSignature">
            <summary>
            Obtém a assinatura da tarefa.
            </summary>
            <returns>Retorna a assinatura informada ou a assinatura padrão da mensagem.</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Tasks.Requests.ITaskRequest">
            <summary>
            Define a interface de uma TaskRequest.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Tasks.Requests.TaskRequest">
            <summary>
            Representa a estrutura básica de uma TaskRequest.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Tasks.Requests.TaskRequest.ProcessHandle">
            <summary>
            Handle de Z_PROCESSOS referente a tarefa em execução.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Tasks.Requests.TaskRequest.User">
            <summary>
            Apelido do usuário que solicitou a execução da tarefa.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Tasks.Requests.TaskRequest.Company">
            <summary>
            Handle da empresa.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Tasks.Requests.TaskRequest.Branch">
            <summary>
            Handle da filial.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Tasks.Requests.TaskRequest.TaskMessageCorrelationId">
            <summary>
            Id correlacionado com a TaskMessage.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Tasks.Requests.TaskRequest.Description">
            <summary>
            Descrição informativa. É informada pelo programador no momento do disparo.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Tasks.Requests.TaskRequest.Host">
            <summary>
            Host do usuário que solicitou a execução da tarefa.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Tasks.Requests.TaskRequest.RunAs">
            <summary>
            Usuário que deve executar a tarefa.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Tasks.Requests.TaskRequest.CanReprocess">
            <summary>
            Se pode reprocessar a tarefa no caso de reinicialização do BTL
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Tasks.Requests.TaskRequest.Priority">
            <summary>
            Ordem de prioridade das tarefas da fila: 0 = Alta, 1 = Baixa
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Tasks.Requests.TaskRequest.GetTaskDescription">
            <summary>
            Obtém uma descrição/id da tarefa em execução.
            </summary>
            <returns>Retorna uma string informações sobre a tarefa em execução.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Tasks.Requests.TaskRequest.GetSignature">
            <summary>
            Obtém a assinatura da tarefa para execução.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Tasks.Requests.TaskRequest.GetSaveDebbugerMessages">
            <summary>
            Verifica se o log de execução da tarefa deve ser salva.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Tasks.Requests.TaskRequest.SetCorrelationId(System.String)">
            <summary>
            Define o Id correlacionado com o Id da TaskMessage.
            </summary>
            <param name="correlationId"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Tasks.Requests.TaskRequest.GetUserToRun">
            <summary>
            Obtém o usuário que deve executar a tarefa
            </summary>
            <returns>Retorna o RunAs. Porém se RunAs não foi informado, retorna a propriedade User</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Tasks.Requests.TaskRequest.ValueToXml(System.Object)">
            <summary>
            Serializa um objeto para, por exemplo, passar na request
            </summary>
            <param name="obj">Objeto</param>
            <returns>string contendo o XML que representa o objeto serializado</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Tasks.Requests.TaskRequest.ValueToJson(System.Object)">
            <summary>
            Serializa um objeto para, por exemplo, passar na request
            </summary>
            <param name="obj">Objeto</param>
            <returns>String contendo o JSON que representa o objeto serializado</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Tasks.Requests.TaskRequest.JsonToValue``1(System.String)">
            <summary>
            Deserializa um objeto serializado para JSON.
            </summary>
            <typeparam name="T">Tipo do objeto que será deserializado.</typeparam>
            <param name="json">String contendo o JSON.</param>
            <returns>Instância do objeto.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Tasks.Requests.TaskRequest.XmlToValue(System.String)">
            <summary>
            Deserializa um objeto serializado com ObjectToXml
            </summary>
            <param name="xml">string contendo um Xml</param>
            <returns>Instância do objeto</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Tasks.DataPacket.DataPacket">
            <summary>
            Classe auxiliar para transportar dados das listas de objetos simples ou lista de entidades para container.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Tasks.DataPacket.DataParserEntities">
            <summary>
            Classe responsável por realizar o parse de uma lista de entidades para um DataPacket
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Tasks.DataPacket.DataParserObjects">
            <summary>
            Classe responsável por realizar o parse de uma lista de objetos simples para um DataPacket
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Tasks.ITaskExecutionUtils">
            <summary>
            Utilitários para o BTL
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Tasks.ITaskExecutionUtils.CreateBusinessComponent(System.String)">
            <summary>
            Como instanciar BusinessComponents
            </summary>
            <param name="businessComponentType">Tipo completo do BusinessComponent</param>
            <returns>Instância do BusinessComponent solicitado</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Tasks.ISessionVarStorage">
            <summary>
            Repositório de SessionVars para o contexto compartilhado de tarefas (Worker->Provider)
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Tasks.ISessionVarStorage.GetSessionVar(System.String)">
            <summary>
            Obter SessionVar
            </summary>
            <param name="name">Nome da sessionVar</param>
            <returns>Valor da sessionVar</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Tasks.ISessionVarStorage.SetSessionVar(System.String,System.String)">
            <summary>
            Configurar SessionVAr
            </summary>
            <param name="name">Nome da sessionVar</param>
            <param name="value">Valor da sessionVar</param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Tasks.ITaskStartUtils">
            <summary>
            Utilititários utilizados no disparo de tarefas
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Tasks.ITaskStartUtils.NotifyTaskStart(System.Int64,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Notifica o ambiente sobre o disparo de uma tarefa
            </summary>
            <param name="processHandle">ProcessHandle da tarefa disparada</param>        
            <param name="transitoryData">Dados transitórios. Utilizados pelo mecanismo de notificação de processos assíncronos.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Tasks.ITaskStartUtils.Log(System.String)">
            <summary>
            Faz o log utilizando Logger.LogInformation.
            </summary>
            <param name="logDetail">Mensagem que será adicionada ao log.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Tasks.ProcessStatusExtension.IsTerminated(Benner.Tecnologia.Common.Tasks.ProcessStatus)">
            <summary>
            Determina se a tarefa foi terminado
            </summary>
            <param name="processStatus">Status do processo</param>
            <returns>True se foi terminado. False se estiver rodando</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Tasks.RequestValueSerializationBinder">
            <summary>
            Para ajudar o deserializador de valores de request a encontrar as DLLs
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Tasks.RequestValueSerializationBinder.BindToType(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Benner.Tecnologia.Common.Tasks.TaskResult">
            <summary>
            Representa o resultado de uma tarefa
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Tasks.TaskResult.ProcessHandle">
            <summary>
            ProcessHandle da tarefa
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Tasks.TaskResult.Status">
            <summary>
            Status da tarefa
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Tasks.TaskResult.ResultTypeName">
            <summary>
            Nome do tipo do resultado da tarefa
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Tasks.TaskResult.#ctor(System.Int64,Benner.Tecnologia.Common.Tasks.ProcessStatus,System.String)">
            <summary>
            Construtor padrão básico de resultado
            </summary>
            <param name="processHandle">ProcessHandle da tarefa</param>
            <param name="status">Status da tarefa</param>
            <param name="resultTypeName">Nome do tipo do resultado da tarefa</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Tasks.TaskResult.GetValue">
            <summary>
            Obtém o valor do resultado, fazendo todo o processamento necessário
            </summary>
            <returns>Resultado da tarefa</returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.Tasks.TaskResult.Definitive">
            <summary>
            É um resultado definitivo? Se for, pode, por exemplo, ir para cache.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Tasks.TaskResult.StatusDescription">
            <summary>
            Descrição do <see cref="P:Benner.Tecnologia.Common.Tasks.TaskResult.Status"/> da tarefa.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Tasks.TaskResultFailure">
            <summary>
            Representa o resultado de uma tarefa que falhou (ou por abort ou por erro)
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Tasks.TaskResultFailure.ErrorMessage">
            <summary>
            Mensagem de erro da tarefa
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Tasks.TaskResultFailure.Exception">
            <summary>
            Exceção ocorrida na tarefa
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Tasks.TaskResultFailure.#ctor(System.Int64,Benner.Tecnologia.Common.Tasks.ProcessStatus,System.String,System.Exception,System.String)">
            <summary>
            Construtor de resultado de falha
            </summary>
            <param name="processHandle">ProcessHandle da tarefa</param>
            <param name="status">Status atual da tarefa</param>
            <param name="errorMessage">Mensagem de erro ocorrida na tarefa</param>
            <param name="exception">Exceção ocorrida na tarefa</param>
            <param name="resultTypeName">Nome do tipo do resultado da tarefa</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Tasks.TaskResultFailure.GetValue">
            <summary>
            Obtém o valor do resultado, fazendo todo o processamento necessário.
            Neste caso, irá lançar a exceção pois é um BusinessTaskResultFailure.
            </summary>
            <returns>Resultado da tarefa</returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.Tasks.TaskResultFailure.Definitive">
            <summary>
            É um resultado definitivo? Neste caso é, pois a tarefa terminou de executar e gerou um erro. Pode ir para cache.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Tasks.TaskResultSuccess">
            <summary>
            Representa o resultado de uma tarefa que executou com sucesso.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Tasks.TaskResultSuccess.#ctor(System.Int64,Benner.Tecnologia.Common.Tasks.ProcessStatus,System.Object,System.String)">
            <summary>
            Construtor de resultado de sucesso
            </summary>
            <param name="processHandle">ProcessHandle da tarefa</param>
            <param name="status">Status atual da tarefa</param>
            <param name="resultTypeName">Nome do tipo do resultado da tarefa</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Tasks.TaskResultSuccess.GetValue">
            <summary>
            Obtém o valor do resultado, fazendo todo o processamento necessário.
            </summary>
            <returns>Resultado da tarefa</returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.Tasks.TaskResultSuccess.Definitive">
            <summary>
            É um resultado definitivo? Neste caso é, pois a tarefa terminou de executar e gerou um resultado. Pode ir para cache.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Tasks.TaskResultUndefined">
            <summary>
            Resultado não definido (A tarefa está rodando)
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Tasks.TaskResultUndefined.#ctor(System.Int64,Benner.Tecnologia.Common.Tasks.ProcessStatus,System.String)">
            <summary>
            Construtor de resultado não definido
            </summary>
            <param name="processHandle">ProcessHandle da tarefa</param>
            <param name="status">Status atual da tarefa</param>
            <param name="resultTypeName">Nome do tipo do resultado da tarefa</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Tasks.TaskResultUndefined.GetValue">
            <summary>
            Obtém o valor do resultado, fazendo todo o processamento necessário.
            Neste caso, irá lançar a exceção NotFinishedTaskException pois é um BusinessTaskResultUndefined.
            </summary>
            <returns>Resultado da tarefa</returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.Tasks.TaskResultUndefined.Definitive">
            <summary>
            É um resultado definitivo? Neste caso não é, pois é resultado indefinido.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Tasks.ProcessStatus">
            <summary>
            Status da tarefa (Z_PROCESSOS)
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Tasks.ProcessStatus.None">
            <summary>
            A tarefa não existe.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Tasks.ProcessStatus.Running">
            <summary>
            A tarefa está sendo executada por um Worker.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Tasks.ProcessStatus.AbortRequested">
            <summary>
            Foi solicitado o cancelamento da tarefa.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Tasks.ProcessStatus.Aborted">
            <summary>
            A tarefa foi cancelada.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Tasks.ProcessStatus.Error">
            <summary>
            A tarefa terminou com erro.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Tasks.ProcessStatus.Success">
            <summary>
            A tarefa foi executada com sucesso. Possíveis retornos estão disponíveis.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Tasks.ProcessStatus.Pending">
            <summary>
            A tarefa foi disparada porém nenhum Worker começou a executá-la.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Tasks.IProcessLogService">
            <summary>
            Serviço do ProcessLog
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Utils.CultureUtils.ForceCulturePtBR">
            <summary>
            Aplica o CultureInfo 'pt-BR' no application domain atual, refletindo nas threads existentes e em novas threads
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Utils.CultureUtils.ForceCulture(System.Globalization.CultureInfo)">
            <summary>
            Aplica um determinado CultureInfo no application domain atual, refletindo nas threads existentes e em novas threads
            </summary>
            <param name="cultureInfo">CultureInfo desejado</param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Utils.AsyncObject`1">
            <summary>
            Objeto com identificação da Task/Thread
            </summary>
            <typeparam name="T">Tipo do objeto</typeparam>
        </member>
        <member name="P:Benner.Tecnologia.Common.Utils.AsyncObject`1.AsyncId">
            <summary>
            Identificação da Task ou Thread
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Utils.AsyncObject`1.Object">
            <summary>
            Objeto
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Utils.AsyncObject`1.GetCurrentAsyncId">
            <summary>
            Obtém um Id único para a Task ou Thread atual
            </summary>
            <returns>string que representa o id</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Utils.AsyncObjectContainer`1">
            <summary>
            Garante uma instância de T exclusiva para cada thread/task.
            </summary>
            <typeparam name="T">Classe com construtor padrão sem parâmetros</typeparam>
        </member>
        <member name="M:Benner.Tecnologia.Common.Utils.AsyncObjectContainer`1.GetCurrentAsyncObject">
            <summary>
            Obtém uma instância de T exclusiva para a Task/Thread atual
            </summary>
            <returns>Instância de T</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Utils.MigrationsUtils.AdjustsCommandsGroupsMigrations(System.String)">
            <summary>
            Subistituir a classe dos comando que 'vai para o grid'.
            De 'EntityLinkDefinition' para 'GridLinkDefinition' dentro de Grupos de Comandos 'CommandGroup'.
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Utils.DataSourceExporter">
            <summary>
            Classe utilitária para exportar consultas para arquivos
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Utils.DataSourceExporter.#ctor(System.Collections.Generic.IEnumerable{Benner.Tecnologia.Common.DataReaderRecord})">
            <summary>
            Instancia um exportador de consultas a partir de um enumerador de registros.
            </summary>
            <param name="records">O enumerador de registros</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Utils.DataSourceExporter.#ctor(Benner.Tecnologia.Common.DataSources.DataSourceReader)">
            <summary>
            Instancia um exportador de consultas a partir de um <see cref="T:Benner.Tecnologia.Common.DataSources.DataSourceReader"/>
            </summary>
            <param name="dataSourceReader">O objeto da consulta</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Utils.DataSourceExporter.ExportToCsvFile(System.String)">
            <summary>
            Exporta a consulta para CSV. Caso o arquivo já exista, é recriado.
            </summary>
            <param name="fileName">O caminho completo do arquivo a ser criado</param>
            <remarks>O separador utilizado é ';'</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Utils.JsonUtils.Compress(System.String)">
            <summary>
            Compacta um JSON e retorna uma string Base64.
            </summary>
            <param name="json">JSON que será compactada.</param>
            <returns>String Base64 do JSON compactado.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Utils.JsonUtils.Decompress(System.String)">
            <summary>
            Descompacta uma string Base64 e retorna um JSON.
            </summary>
            <param name="source">String Base64 gerada a partir de um JSON.</param>
            <returns>String com o JSON.</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.HttpClientFactory">
            <summary>
            Factory para fornecer uma instância de HttpClient saudável
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.HttpClientFactory.Instance">
            <summary>
            Recupera uma instância de HttpClient saudável
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.HttpClientFactory.HttpClientEx">
            <summary>
            HttpClient que permite descobrir se está saudável ou não sem a necessidade de emitir uma ObjectDisposedException
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.HttpClientFactory.HttpClientEx.Dispose(System.Boolean)">
            <summary>
            Despeja o objeto
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Benner.Tecnologia.Common.HttpClientFactory.HttpClientEx.Disposed">
            <summary>
            Indica se esse objeto está ou não despejado
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.BennerLicenseInfo">
            <summary>
            Classe responsável por disponibilizar propriedades da licença de uso do sistema Benner
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerLicenseInfo.Version">
            <summary>
            Indica a versão do arquivo de licença de uso do sistema.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerLicenseInfo.System">
            <summary>
            Nome do produto licenciado
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerLicenseInfo.Client">
            <summary>
            Nome do cliente licenciado
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerLicenseInfo.ClientId">
            <summary>
            Id do cliente licenciado
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerLicenseInfo.Users">
            <summary>
            Quantidade de usuários permitida
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerLicenseInfo.ExpirationDate">
            <summary>
            Data de validade da licença de uso do sistema
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerLicenseInfo.ConsessionOn">
            <summary>
            Data de concessão da licença (período de uso liberado)
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerLicenseInfo.Companies">
            <summary>
            Quantidade de empresas licençiadas
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerLicenseInfo.MailsComunicate">
            <summary>
            Endereços de email que devem receber avisos referentes a licença de uso
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerLicenseInfo.DaysToAlert">
            <summary>
            Com quantos dias de atencedência em relação a data de expiração serão enviados avisos informando que a licença está expirando.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerLicenseInfo.MustValidateSystem">
            <summary>
            Indica se deve validar o nome do Produto
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerLicenseInfo.MustValidateCompanies">
            <summary>
            Indica se deve validar o número de empresas licenciadas
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerLicenseInfo.MustValidateUsers">
            <summary>
            Indica se deve validar o número de usuários licenciados
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerLicenseInfo.MustValidateClient">
            <summary>
            Indica se deve validar o nome do cliente licenciado
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerLicenseInfo.MustValidateDate">
            <summary>
            Indica se deve considerar a data de expiração da licença
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerLicenseInfo.MustValidateTools">
            <summary>
            Indica se deve validar as ferramentas licenciadas
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerLicenseInfo.MustValidateModules">
            <summary>
            Indica se deve validar os módulos licenciados
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerLicenseInfo.MustValidateCNPJs">
            <summary>
            Indica se deve validar os CNPJs das empresas
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerLicenseInfo.IsPartner">
            <summary>
            Indica se é uma licença de parceiro 
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerLicenseInfo.Modules">
            <summary>
            Lista de módulos licenciados
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerLicenseInfo.ClientModules">
            <summary>
            Lista de módulos de camada cliente licenciados
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerLicenseInfo.Tools">
            <summary>
            Lista de ferramentas licenciadas
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerLicenseInfo.CompaniesLicenses">
            <summary>
            Lista de CNPJs licenciados
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerLicenseInfo.CompaniesConcessions">
            <summary>
            Lista de CNPJs com data de concessão
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerLicenseInfo.BuilderMaxConcurrentUserCount">
            <summary>
            Quantidade usuários concorrentes licenciados para a ferramenta Builder
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerLicenseInfo.BiMaxConcurrentUserCount">
            <summary>
            Quantidade usuários concorrentes licenciados para a ferramenta de BI
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerLicenseInfo.GenericProperties">
            <summary>
            Propriedades genéricas da licença
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerLicenseInfo.UseLicense">
            <summary>
            Retorna se o sistema deve utilizar e controlar licença
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerLicenseInfo.AllowCustomization">
            <summary>
            Retorna se o sistema deve utilizar e controlar licença
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.BennerLicenseInfo.ParseLicense(System.String)">
            <summary>
            Realiza o parse do texto da licença vindo do BServer
            </summary>
            <param name="licenseInfoText">Texto da licença</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.BennerLicenseInfo.ParseLicenseInfo(Benner.Tecnologia.Common.IniParser.IniFormatReader)">
            <summary>
            Recupera as informações da seção [INFO] 
            </summary>
            <param name="licenseIni">Leitor Ini do License</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.BennerLicenseInfo.ParseLicenseModules(Benner.Tecnologia.Common.IniParser.IniFormatReader)">
            <summary>
            Recupera as informações da seção [MODULES] 
            </summary>
            <param name="licenseIni">Leitor Ini do License</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.BennerLicenseInfo.ParseLicenseClientModules(Benner.Tecnologia.Common.IniParser.IniFormatReader)">
            <summary>
            Recupera as informações da seção [CLIENTMODULES] 
            </summary>
            <param name="licenseIni">Leitor Ini do License</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.BennerLicenseInfo.ParseLicenseTools(Benner.Tecnologia.Common.IniParser.IniFormatReader)">
            <summary>
            Recupera as informações da seção [TOOLS] 
            </summary>
            <param name="licenseInfoText">Arquivo License</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.BennerLicenseInfo.ParseLicenseGenericProperties(Benner.Tecnologia.Common.IniParser.IniFormatReader)">
            <summary>
            Recupera as informações da seção [GENERIC PROPERTIES] 
            </summary>
            <param name="licenseIni">Leitor Ini do License</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.BennerLicenseInfo.ParseLicenseCompaniesLicences(Benner.Tecnologia.Common.IniParser.IniFormatReader)">
            <summary>
            Recupera as informações da seção [COMPANIES LICENSES] 
            </summary>
            <param name="licenseIni">IniData do License</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.BennerLicenseInfo.ParseLicenseCompaniesConcessions(Benner.Tecnologia.Common.IniParser.IniFormatReader)">
            <summary>
            Recupera as informações da seção [COMPANIES CONCESSIONS] 
            </summary>
            <param name="licenseIni">Leitor Ini do License</param>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerLicenseInfo.Current">
            <summary>
            Retorna uma instância de BennerLicenseInfo com as informações da licença de uso do sistema
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerLicenseInfo.SystemLicenseIsExpired">
            <summary>
            O vencimento da licença do sistema é verificado durante o warmpup.
            Caso expirado o sistema deverá ficar impossibilitado de desenvolver, 
            executar funções de entidades, editar, excluir e criar registros. Podendo assim, 
            somente visualizar registros, emitir relatórios e executar comandos de página.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.BennerLicenseInfo.Clear">
            <summary>
            Limpa a licença de uso do sistema
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.CompanyLicenseControl">
            <summary>
            Controle de licença de empresas
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.CompanyLicenseControl.Start(Benner.Tecnologia.Common.BennerLicenseInfo)">
            <summary>
            Inicia nova contagem de empresas licenciadas
            </summary>
            <param name="license">Licença</param>
            <returns>Instância de CompanyLicenseControl</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.CompanyLicenseControl.GetNextCompanyLicense(System.String,System.Nullable{System.DateTime}@)">
            <summary>
            Contabiliza empresa e retorna true se ela pode ser utilizada
            </summary>
            <param name="cnpj">CNPJ da empresa</param>
            <returns>Boolean indicando se pode ser utilizada</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.NetworkHelper.GetAvailablePort(System.Int32,System.Int32)">
            <summary>
            Retorna uma porta disponível para uso. 
            Informe o número inicial e final da pesquisa por portas disponíveis.
            </summary>
            <param name="startSuggestedPort">Porta inicial.</param>
            <param name="endSuggestedPort">Porta final.</param>
        </member>
        <member name="T:Benner.Tecnologia.Common.ReportTaskRequest">
            <summary>
            Requisição para execução uma tarefa de relatórios
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.ReportTaskRequest.ReportCode">
            <summary>
            Código do relatório
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.ReportTaskRequest.ReportHandle">
            <summary>
            Handle do relatório.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.ReportTaskRequest.Format">
            <summary>
            Formato do relatório, exemplo .pdf
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.ReportTaskRequest.Criteria">
            <summary>
            Criterio de seleção
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.ReportTaskRequest.Filter">
            <summary>
            Xml contendo o a entidade de filtro, geralmente uma entidade de Tabela Virtual, para o relatório que será executado
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.ReportTaskRequest.FilterDescription">
            <summary>
            Xml contendo a o EntityDescription da definição da entidade de filtro
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.ReportTaskRequest.DefaultFilter">
            <summary>
            Indica se é permitido executar algum filtro antes da emissão do relatório.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.ReportTaskRequest.CompanyFilter">
            <summary>
            Indica se os dados do relatório serão filtrados pela empresa corrente.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.ReportTaskRequest.SendToMail">
            <summary>
            Indica que o relatório será enviado por e-mail.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.ReportTaskRequest.MailFrom">
            <summary>
            Remetente do e-mail.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.ReportTaskRequest.MailTo">
            <summary>
            Destinatário do e-mail.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.ReportTaskRequest.MailSubject">
            <summary>
            Assunto do e-mail.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.ReportTaskRequest.MailBody">
            <summary>
            Corpo do e-mail.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.ReportTaskRequest.MailFileName">
            <summary>
            Nome do arquivo que será enviado no anexo do e-mail.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.ReportTaskRequest.EmitToTemporaryTable">
            <summary>
            Indica que o relatório deve ser emitido e salvo em Z_ARQUIVOSTEMPORARIOS.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.ReportTaskRequest.TransitoryData">
            <summary>
            TransitoryData que será enviado para o relatório 
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.ReportTaskRequest.MailFromSystemUser">
            <summary>
            Usuário de remetente do e-mail.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.ReportTaskRequest.#ctor">
            <summary>
            Cria nova requisição para executar relatório
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.StimulReportFormat.HTML">
            <summary>
            HTML 5, alterado para html para salvar arquivo como .html
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Scripting.UserInterface.FieldBaseAttribute.FieldName">
            <summary>
            Campo cuja alteração irá executar o método
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Scripting.UserInterface.FieldBaseAttribute.ExecutionOrder">
            <summary>
            Ordem de execução do método em relação aos outros para o mesmo campo na mesma classe
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Scripting.UserInterface.FieldBaseAttribute.#ctor(System.String)">
            <summary>
            Executa o método quando o campo for alterado
            </summary>
            <param name="fieldName">Campo cuja alteração irá executar o método</param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Scripting.UserInterface.FieldChangedAttribute">
            <summary>
            Executa o método quando o campo for alterado
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Scripting.UserInterface.FieldChangedAttribute.#ctor(System.String)">
            <summary>
            Executa o método quando o campo for alterado
            </summary>
            <param name="fieldName">Campo cuja alteração irá executar o método</param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Scripting.UserInterface.FieldPopupAttribute">
            <summary>
            Executa o método antes do campo lookup abrir
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Scripting.UserInterface.FieldPopupAttribute.#ctor(System.String)">
            <summary>
            Executa o método quando o campo for alterado
            </summary>
            <param name="fieldName">Campo cuja alteração irá executar o método</param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Scripting.UserInterface.IScriptUIContextService">
            <summary>
            Serviço provedor de informações para o contexto do script de interface
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Scripting.UserInterface.IScriptUIContextService.GetBreadcrumbEntityHandle(System.String)">
            <summary>
            Obtém o último handle do selecionado numa entidade do breadcrumb
            </summary>
            <param name="entityDefinitionName">Nome da entidade</param>
            <returns>Handle do registro selecionado, ou Handle inválido caso a entidade não esteja no Breadcrumb</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Scripting.UserInterface.LoadFieldsAttribute">
            <summary>
            Adiciona campos que devem ser carregados mesmo que eles não estejam na visão.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Scripting.UserInterface.LoadFieldsAttribute.Fields">
            <summary>
            Campos a ser carregados na visão
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Scripting.UserInterface.LoadFieldsAttribute.#ctor(System.String[])">
            <summary>
            Adiciona campos mesmo que eles não estejam na visão.
            </summary>
            <param name="fields">Campos a ser carregados na visão</param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Scripting.UserInterface.ScriptUIContext">
            <summary>
            Contexto de Script de interface
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Scripting.UserInterface.ScriptUIContext.GetBreadcrumbEntityHandle(System.String)">
            <summary>
            Obtém o último handle selecionado no Breadcrumb da interface
            </summary>
            <param name="physicalTableName">Nome da entidade</param>
            <returns>Handle do registro selecionado, ou Handle inválido caso a entidade não esteja no Breadcrumb</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Scripting.UserInterface.ScriptUIMethodBaseAttribute">
            <summary>
            Método que será executando quando ocorre um evento de interface
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Scripting.UserInterface.ScriptUIMethodBaseAttribute.EntityViewName">
            <summary>
            Nome da EntityView da Web na qual o método será executado
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Scripting.UserInterface.ScriptUIMethodBaseAttribute.NodeInternalCode">
            <summary>
            Código da carga do Runner na qual o método será executado
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Scripting.UserInterface.ScriptUIMethodBaseAttribute.#ctor">
            <summary>
            Método que será executando quando ocorre um evento de interface
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Scripting.UserInterface.ScriptUIService">
            <summary>
            Responsável pela execução de scripts de interface
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Scripting.UserInterface.ScriptUIService.Factory">
            <summary>
            Factory do ScriptUIService
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Scripting.UserInterface.ScriptUIService.EntityViewName">
            <summary>
            Nome da visão web
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Scripting.UserInterface.ScriptUIService.NodeInternalCode">
            <summary>
            Código interno de carga do Desktop
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Scripting.UserInterface.ScriptUIService.#ctor(Benner.Tecnologia.Common.EntityBase)">
            <summary>
            Construtor do executor de scripts de interface
            </summary>
            <param name="entity">Instância da entidade que possui o script de interface</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Scripting.UserInterface.ScriptUIService.#ctor(Benner.Tecnologia.Common.Scripting.UserInterface.IScriptUIContextService,Benner.Tecnologia.Common.EntityBase)">
            <summary>
            Construtor do executor de scripts de interface
            </summary>
            <param name="entity">Instância da entidade que possui o script de interface</param>
            <param name="contextService">Serviço com informações de contexto</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Scripting.UserInterface.ScriptUIService.HasScriptUI(System.Type)">
            <summary>
            Verifica se um tipo BusinessEntity possui o atributo ScriptUI
            </summary>
            <param name="entityType">Tipo da entidade</param>
            <returns>Retorna true se existir o atributo ScriptUI na classe da entidade</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Scripting.UserInterface.ScriptUIService.GetMustLoadFields(System.Type)">
            <summary>
            Obtém os campos especificados com o atributo LoadFieldAttribute
            </summary>
            <param name="entityType">Tipo da entidade</param>
            <returns>Lista com os nomes dos campos</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Scripting.UserInterface.ScriptUIService.FireViewLoaded">
            <summary>
            Dispara o evento ViewLoaded na entidade executando dos os métodos decorados com o atributo ViewLoaded
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Scripting.UserInterface.ScriptUIService.FireFieldChanged(System.String)">
            <summary>
            Dispara o evento FieldChanged de um campo na entidade executando dos os métodos decorados com o atributo FieldChanged
            </summary>
            <param name="fieldName">Nome do campo</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Scripting.UserInterface.ScriptUIService.HasFieldChangedMethod(System.String)">
            <summary>
            Verifica se determinado campo possui o evento HasFieldChanged implementado
            </summary>
            <param name="fieldName">Nome do campo</param>
            <returns>Retorna true se o campo passado possui evento FieldChanged implementado</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Scripting.UserInterface.ScriptUIService.FireFieldPopup(System.String)">
            <summary>
            Dispara o evento Popup de um campo na entidade executando dos os métodos decorados com o atributo FieldChanged
            </summary>
            <param name="fieldName">Nome do campo</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Scripting.UserInterface.ScriptUIService.HasFieldPopupMethod(System.String)">
            <summary>
            Verifica se determinado campo possui o evento HasFieldPopup implementado
            </summary>
            <param name="fieldName">Nome do campo</param>
            <returns>Retorna true se o campo passado possui evento FieldPopup implementado</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Scripting.UserInterface.ScriptUIServiceFactory">
            <summary>
            Factory do ScriptUIService
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Scripting.UserInterface.ScriptUIServiceFactory.CreateScriptUIService(Benner.Tecnologia.Common.EntityBase)">
            <summary>
            Cria uma instância do serviço de script de interface em c#
            </summary>
            <param name="entity">Entidade para rodar o script C#</param>
            <returns>Serviço do Script de interface em C#</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Scripting.UserInterface.ViewLoadedAttribute">
            <summary>
            Executa o método quando a view é exibida para o usuário
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Scripting.UserInterface.ViewLoadedAttribute.#ctor">
            <summary>
            Executa o método quando a view é exibida para o usuário
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Scripting.ScriptErrorListener">
            <summary>
            Classe que recebe a lista de erros ocorridas durante a compilação de algum Script IronPython.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Scripting.ICommandsPanelProxy">
            <summary>
            Definição para classes de painel de comandos para uso em scripts.
            </summary>
            <remarks>
            Esta classe fornece uma interface independente de tecnologia de apresentação para
            utilização em scripts.
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.Scripting.ICommandsPanelProxy.Commands">
            <summary>
            Coleção de comandos.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Scripting.ICommandsPanelProxy.View">
            <summary>
            Definição de visão.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Scripting.IFormProxy">
            <summary>
            Definição para classes de formulário para uso em scripts.
            </summary>
            <remarks>
            Esta classe fornece uma interface independente de tecnologia de apresentação para
            utilização em scripts.
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.Scripting.IFormProxy.View">
            <summary>
            Definição da estrutura do formulário.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Scripting.IGridProxy">
            <summary>
            Definição para classes de grid para uso em scripts.
            </summary>
            <remarks>
            Esta classe fornece uma interface independente de tecnologia de apresentação para
            utilização em scripts.
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.Scripting.IGridProxy.AllowEditing">
            <summary>
            Indica se a edição é permitida.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Scripting.IGridProxy.Hidden">
            <summary>
            Indica se a visibilidade do grid.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Scripting.IGridCellProxy">
            <summary>
            Definição para classes de célula de grid para uso em scripts.
            </summary>
            <remarks>
            Esta classe fornece uma interface independente de tecnologia de apresentação para
            utilização em scripts.
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.Scripting.IGridCellProxy.Row">
            <summary>
            A linha de grid que contém a célula.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Scripting.IGridCellProxy.AllowEditing">
            <summary>
            Indica se a edição é permitida.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Scripting.IGridCellProxy.Text">
            <summary>
            Conteúdo da célula
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Scripting.IGridCellProxy.BackgroundColor">
            <summary>
            Define cor de fundo
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Scripting.IGridCellProxy.TextColor">
            <summary>
            Define a cor do texto
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Scripting.IGridCellProxy.FontIcon">
            <summary>
            Adiciona a imagem
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Scripting.IGridCellProxy.Tooltip">
            <summary>
            Define o titulo da célula
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Scripting.IGridCellProxy.Align">
            <summary>
            Define o alinhamento para o FontIcon
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Scripting.IGridRowProxy">
            <summary>
            Definição para classes de linha de grid para uso em scripts.
            </summary>
            <remarks>
            Esta classe fornece uma interface independente de tecnologia de apresentação para
            utilização em scripts.
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.Scripting.IGridRowProxy.Grid">
            <summary>
            O grid que contém a linha.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Scripting.IGridRowProxy.GetCellByName(System.String)">
            <summary>
            Obtém uma célula da linha de grid.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Scripting.IGridRowProxy.GetCellByIndex(System.Int32)">
            <summary>
            Obtém uma célula da linha de grid.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Scripting.IWidgetProxy">
            <summary>
            Definição para classes de componente visual para uso em scripts.
            </summary>
            <remarks>
            Esta classe fornece uma interface independente de tecnologia de apresentação para
            utilização em scripts.
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.Scripting.IWidgetProxy.Entity">
            <summary>
            A entidade que está representada ou selecionada no componente visual, ou null se não houver.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Scripting.IWidgetProxy.ProviderWidget">
            <summary>
            O componente visual que é fornecedor (mestre) do componente atual na
            cadeia de conexões de componentes, ou null se não houver.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Scripting.ScriptTracer">
            <summary>
            Mantém um rastro de execução a partir de um script.
            </summary>
            <remarks>
            Esta classe fornece uma interface para o mecanismo de diagnóstico do .NET que é fácil
            de ser utilizada a partir de um script e que encaminha as mensagens para um destino 
            previamente configurado para esta finalidade.
            </remarks>
        </member>
        <member name="T:Benner.Tecnologia.Common.Scripting.Script">
            <summary>
            Código em linguagem de tipo script.
            </summary>
            <remarks>
            O objeto de script em si não diferencia ambiente de execução -- web, desktop, Silverlight, etc.
            Se necessário, o código-fonte do script pode assumir comportamentos diferenciados de acordo com o ambiente.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Scripting.Script.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Scripting.Script.Entity">
            <summary>
            Entidade.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Scripting.Script.EntityName">
            <summary>
            Nome da definição de entidade.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Scripting.Script.EntityView">
            <summary>
            Visão.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Scripting.Script.EntityViewName">
            <summary>
            Nome da visão de entidade.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Scripting.Script.FunctionName">
            <summary>
            Nome da função ou evento do script.
            </summary>
            <remarks>
            Se estiver vazio, indica que o script declara várias funções.
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.Scripting.Script.Layer">
            <summary>
            Camada de personalização à qual o script pertence.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Scripting.Script.LanguageName">
            <summary>
            Nome da linguagem na qual o script foi escrito.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Scripting.Script.SourceCode">
            <summary>
            Código-fonte do script.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Scripting.Script.Run(Microsoft.Scripting.Hosting.ScriptEngine,Microsoft.Scripting.Hosting.ScriptScope,System.Collections.ArrayList)">
            <summary>
            Executa o script.
            </summary>
            <param name="engine">Instância do mecanismo de execução de scripts.</param>
            <param name="scope">Escopo do script.</param>
            <param name="parameters">Parâmetros a serem passados para o script.</param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Scripting.ScriptService">
            <summary>
            Serviços relacionados com Scripts.
            </summary>
            <remarks>
            Esta classe segue o padrão Services de Domain-Driven Design -- http://en.wikipedia.org/wiki/Domain-driven_design
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Scripting.ScriptService.Run(System.String,System.String,System.String,System.Collections.ArrayList)">
            <summary>
            Executa um script.
            </summary>
            <param name="systemInstanceName">Nome do sistema.</param>
            <param name="entityName">Nome da entidade.</param>
            <param name="viewName">Nome da visão de entidade.</param>
            <param name="functionName">Nome da função a ser executada.</param>
            <param name="parameters">Parâmetros a serem passados para a função.</param>
            <remarks>
            Caso tenham sido definidos scripts em diversas camadas de apresentação,
            os conjuntos de scripts são executados na seqüência das camadas.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Scripting.ScriptService.LoadAssemblies(Microsoft.Scripting.Hosting.ScriptRuntime)">
            <summary>
            Carrega algumas assemblies comuns no ambiente para evitar que seja necessário
            adicionar a referência explicitamente no script.
            </summary>
            <param name="environment">Objeto de ambiente no qual as assemblies devem ser carregadas.</param>
            <remarks>
            Estas assemblies ficam disponíveis para importação no script sem precisar adicionar as referências.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Scripting.ScriptService.Initialize">
            <summary>
            Carga dos scripts. Obtem todos os scripts e executa um script fictício.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Scripting.ScriptSet">
            <summary>
            Um conjunto de scripts.
            </summary>
            <remarks>
            É equivalente a um programa ou uma classe. Contém todos os scripts de uma determinada camada
            pertencentes a um determinado escopo (view, entidade, sistema).
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Scripting.ScriptSet.#ctor">
            <summary>
            Exige que sejam fornecidos os parâmetros mínimos de identificação do objeto.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Scripting.ScriptSet.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Cria um conjunto de scripts.
            </summary>
            <param name="systemInstanceName">Nome do sistema.</param>
            <param name="entityName">Nome da entidade.</param>
            <param name="viewName">Nome da visão.</param>
            <param name="layer">Camada de personalização.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Scripting.ScriptSet.Run(System.String,System.String,System.Collections.ArrayList,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Executa uma função do conjunto de scripts.
            </summary>
            <param name="functionName">Nome da função a ser executada.</param>
            <param name="parameters">Parâmetros a serem passados para a função.</param>
            <remarks>
            Segue o padrão de hosting do DLR, documentado provisoriamente em:
            http://compilerlab.members.winisp.net/dlr-spec-hosting.doc
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Scripting.ScriptSet.FindScript(System.String)">
            <summary>
            Localiza um objeto de script dentro do conjunto.
            </summary>
            <param name="functionName">Nome da função a ser localizada.</param>
            <returns>Uma instância de objeto de script que define a função especificada ou null se nenhum script for encontrado.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Scripting.ScriptSet.CompileScripts(Benner.Tecnologia.Common.Scripting.Script,Microsoft.Scripting.Hosting.ScriptEngine,Microsoft.Scripting.Hosting.ScriptScope)">
            <summary>
            Compila o conjunto de scripts, preparando-o para a execução.
            </summary>
            <param name="languageName">Nome da linguagem a ser utilizada para a compilação.</param>
            <param name="engine">Instância de mecanismo de scripts.</param>
            <param name="scope">Escopo do script.</param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Scripting.ScriptSetRepository">
            <summary>
            Repositório de conjuntos de scripts.
            </summary>
            <remarks>
            <para>
            Implementa o padrão Repository -- http://martinfowler.com/eaaCatalog/repository.html
            e utiliza o padrão Singleton -- http://www.codeproject.com/KB/architecture/GenericSingletonPattern.aspx
            </para>
            <para>
            Como a classe é Singleton, os dados são obtidos somente uma vez.
            </para>
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Scripting.ScriptSetRepository.#ctor">
            <summary>
            O construtor não deve ser utilizado diretamente.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Scripting.ScriptSetRepository.Instance">
            <summary>
            A instância única do repositório.
            </summary>
            <remarks>
            O repositório é criado sob demanda na primeira vez que esta propriedade é utilizada.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Scripting.ScriptSetRepository.GetScriptSets(System.String)">
            <summary>
            Obtém a coleção de conjuntos de scripts de um sistema.
            </summary>
            <param name="systemInstanceName">Nome da instância de sistema.</param>
            <returns>Uma lista dos conjuntos de scripts do sistema.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Scripting.ScriptSetRepository.GetScriptsFromDatabase(System.String)">
            <remarks>Método virtual para facilitar a escrita de testes unitarios sem envolver o banco de dados</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Scripting.ScriptSetRepository.CopyScripts(System.String,Benner.Tecnologia.Common.Handle,System.String,System.Int32,Benner.Tecnologia.Common.Handle)">
            <summary>Faz a copia dos scrips de uma visão para outra visão da mesma entidade e da mesma camada</summary>
            <param name="systemInstanceName">Nome do sistema da visão</param>
            <param name="entityHandle">Handle da definição de entidade das visões</param>
            <param name="sourceViewName">Nome da visão de origem dos scripts</param>
            <param name="targetViewLayer">Camada de customização da qual será copiado os scripts</param>
            <param name="viewHandleTarget">Handle da visão de destino dos scripts</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Scripting.ScriptSetRepository.GetScripts(System.String,Benner.Tecnologia.Common.Handle)">
            <summary>Obtém os scripts associados à uma visão</summary>
            <param name="systemInstanceName">Nome do sistema da visão</param>
            <param name="viewHandle">Handle da visão</param>
            <returns>Coleção de scripts referente à visão informada por parâmetro</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Scripting.ScriptSetRepository.GetScripts(System.String,System.String)">
            <summary>Obtém os scripts associados à uma visão</summary>
            <param name="systemInstanceName">Nome do sistema da visão</param>
            <param name="viewHandle">Nome da visão</param>
            <returns>Coleção de scripts referente à visão informada por parâmetro</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.InternalCompany.Clone">
            <summary>
            Clona instância da empresa
            </summary>
            <returns>Novo objeto empresa</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Serialization.XmlSerializerHelper">
            <summary>
            Classe helper para utilização de XmlSerializer
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Serialization.XmlSerializerHelper.XmlSerializersCacheDictionary">
            <summary>
            Cache do objeto XmlSerializer. Isto para evitar o custo de criar uma instância de XmlSerializer a cada uso.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Serialization.XmlSerializerHelper.GetXmlSerializer(System.Object)">
            <summary> Recupera um XmlSerializer para o type do obj informado, gardando a instancia para a proxima utilização. </summary>
            <param name="obj">XmlSerializer para este object</param>
            <returns></returns>
            <remarks> Recupera um XmlSerializer para o type informado, gardando a instancia para a proxima utilização.</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Serialization.XmlSerializerHelper.GetXmlSerializer(System.Type)">
            <summary> Recupera um XmlSerializer para o type informado, gardando a instancia para a proxima utilização.  </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Serialization.XmlSerializerHelper.GetXmlSerializer``1">
            <summary> Recupera um XmlSerializer para o type informado, gardando a instancia para a proxima utilização. </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Benner.Tecnologia.Common.Translation.LanguageTranslatorFactory" -->
        <!-- Badly formed XML comment ignored for member "M:Benner.Tecnologia.Common.Translation.LanguageTranslatorFactory.CreateLanguageTranslator" -->
        <member name="T:Benner.Tecnologia.Common.ISessionRepository`1">
            <summary>
            Interface de repositório para sessão
            </summary>
            <typeparam name="T">O tipo de objeto que será manipulado na sessão por este mecanismo</typeparam>
        </member>
        <member name="P:Benner.Tecnologia.Common.ISessionRepository`1.Key">
            <summary>
            A chave de sessão do tipo de objeto que este repositório está manipulando
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.ISessionRepository`1.Recover">
            <summary>
            Recupera o objeto da sessão
            </summary>
            <returns>A instância do objeto ou null caso não exista na sessão</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Benner.Tecnologia.Common.ISessionRepository`1.Store(`0)" -->
        <member name="M:Benner.Tecnologia.Common.ISessionRepository`1.Remove">
            <summary>
            Remove o objeto da sessão
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.ISessionRepository`1.HasValue">
            <summary>
            Indica se existe instância de objeto (diferente de null) em sessão neste repositório
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.EntitySerializationNormalizer">
            <summary>
            Esta classe é responsável por transformar entidades especializadas em algo serializavel pelo BinaryFormatter
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntitySerializationNormalizer.NormalizeToWrite(System.Object)">
            <summary>
            Varre a estrutura de um objeto, ou coleção de objetos, identifica e transforma qualquer BusinessEntity em EntityBase
            </summary>
            <param name="value">Instância de objeto que deve ser normalizado</param>
            <returns>Instancia de objeto normalizado</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntitySerializationNormalizer.NormalizeAfterRead(System.Object)">
            <summary>
            Varre a estrutura de um objeto, ou coleção de objetos, identifica e transforma qualquer EntityBase em um BusinessEntity, quando a transformação faz sentido
            </summary>
            <param name="value">Instância de objeto que deve ser normalizado</param>
            <returns>Instancia de objeto normalizado</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.LocalSession">
            <summary>
            Classe de abstração do objeto de sessão.
            Evite utilizar esta classe diretamente, em vez disso utilize SessionRepository ou ValueTypeRepository
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.LocalSession.Item(System.String)">
            <summary>
            Manipula objetos de sessão
            </summary>
            <param name="key">A chave do objeto de sessão</param>
            <returns>A instância do objeto de sessão</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.LocalSessionFlusher">
            <summary>
            Classe responsável por sincronizar a sessão distribuída com os objetos manipulados em um determinado Request
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.LocalSessionFlusher.Ping">
            <summary>
            Força uma comunicação com a sessão, principalmente importante quando se tratar de uma sessão distribuída, como Redis.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.LocalSessionFlusher.Flush">
            <summary>
            Envia para a sessão distribuída (Redis) os objetos em sessão local e remove do cache local apos o envio para o Redis.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.SessionRepository`1">
            <summary>
            Classe para manipular objetos na sessão do ASP.Net (o HttpContext.Current.Session), servindo como uma camada de abstração sobre a sessão. 
            Essa classe serve como uma camada intermediário pois o ambiente de produção poderá estar configurado com uma sessão distribuída (como o Redis).
            </summary>
            <remarks>
            O objetivo dessa classe é evitar inconsistências pois se você manipular a referência de um objeto depois de ter atribuido ele ao Redis, a instância que já está no Redis ficaria desatualizada.
            Além de evitar inconsistências esse objeto também evita perda de performance, pois as instâncias são enviadas ao Redis somente ao final do processamento do Request, e recuperados sob demanda e mantendo em cache que vive somente naquele Request.
            </remarks>
            <typeparam name="T">O tipo de objeto que será manipulado na sessão por este mecanismo.</typeparam>
        </member>
        <member name="P:Benner.Tecnologia.Common.SessionRepository`1.Key">
            <summary>
            A chave de sessão do tipo de objeto que este repositório está manipulando
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.SessionRepository`1.#ctor(System.String)">
            <summary>
            Construtor padrão para instanciar um repositório de sessão
            </summary>
            <param name="key">A chave de sessão do tipo de objeto que este repositório está manipulando</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.SessionRepository`1.Remove">
            <summary>
            Remove o objeto da sessão
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.SessionRepository`1.Recover">
            <summary>
            Recupera o objeto da sessão
            </summary>
            <returns>A instância do objeto ou null caso não exista na sessão</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.SessionRepository`1.Store(`0)">
            <summary>
            Armazena um objeto na sessão
            </summary>
            <param name="item">A instância do objeto que deve ser armazenada na sessão</param>
        </member>
        <member name="P:Benner.Tecnologia.Common.SessionRepository`1.HasValue">
            <summary>
            Indica se existe instância de objeto (diferente de null) em sessão neste repositório
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.ValueTypeSessionRepository`1">
            <summary>
            Classe para manipular objetos na sessão do ASP.Net (o HttpContext.Current.Session), servindo como uma camada de abstração sobre a sessão. 
            Essa classe serve como uma camada intermediário pois o ambiente de produção poderá estar configurado com uma sessão distribuída (como o Redis).
            </summary>
            <remarks>
            O objetivo dessa classe é evitar inconsistências pois se você manipular a referência de um objeto depois de ter atribuido ele ao Redis, a instância que já está no Redis ficaria desatualizada.
            Além de evitar inconsistências esse objeto também evita perda de performance, pois as instâncias são enviadas ao Redis somente ao final do processamento do Request, e recuperados sob demanda e mantendo em cache que vive somente naquele Request.
            </remarks>
            <typeparam name="T">O tipo de objeto que será manipulado na sessão por este mecanismo.</typeparam>
        </member>
        <member name="P:Benner.Tecnologia.Common.ValueTypeSessionRepository`1.Key">
            <summary>
            A chave de sessão do tipo de objeto que este repositório está manipulando
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.ValueTypeSessionRepository`1.#ctor(System.String,`0)">
            <summary>
            Construtor padrão para instanciar um repositório de sessão
            </summary>
            <param name="key">A chave de sessão do tipo de objeto que este repositório está manipulando</param>
            <param name="defaultValue">Valor padrão a ser considerado caso a sessão não possua valor para este repositório</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.ValueTypeSessionRepository`1.Remove">
            <summary>
            Remove o objeto da sessão
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.ValueTypeSessionRepository`1.Recover">
            <summary>
            Recupera o objeto da sessão
            </summary>
            <returns>A instância do objeto ou o valor default (passado no construtor) caso não exista na sessão</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.ValueTypeSessionRepository`1.RecoverNullable">
            <summary>
            Recupera o objeto da sessão
            </summary>
            <returns>A instância do objeto ou null caso não exista na sessão</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.ValueTypeSessionRepository`1.Store(`0)">
            <summary>
            Armazena um objeto na sessão
            </summary>
            <param name="item">A instância do objeto que deve ser armazenada na sessão</param>
        </member>
        <member name="P:Benner.Tecnologia.Common.ValueTypeSessionRepository`1.HasValue">
            <summary>
            Indica se existe instância de objeto (diferente de null) em sessão neste repositório
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.StringNormalizer">
            <summary>
            Normaliza strings.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.StringNormalizer.Normalize(System.String,System.Boolean)">
            <summary>
            Normaliza strings (retira os acentos).
            </summary>
            <param name="source">String que deve ser normalizada.</param>
            <param name="toUpper">Determina se, além de retirar os acentos, deve converter para maiúsculas.</param>
            <returns>Retorna a string normalizada.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.StringNormalizer.GetNormalized(System.String,System.Boolean)">
            <summary>
            Normaliza strings (retira os acentos).
            </summary>
            <param name="source">String que deve ser normalizada.</param>
            <param name="toUpper">Determina se, além de retirar os acentos, deve converter para maiúsculas.</param>
            <returns>Retorna a string normalizada.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.StringNormalizer.RemoveSpecialCharacters(System.String)">
            <summary>
            Remove todos os caracteres diferentes de (a-z, A-Z, 0-9, _)
            </summary>
            <param name="str">String que deve ser removida os caracteres especiais</param>
            <returns>Retorna a string sem caracteres especiais</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.StringNormalizer.RemoveInvalidFileNameChars(System.String)">
            <summary>
            Remove todos caracteres inválidos para um nome de arquivo, baseado no metodo Path.GetInvalidFileNameChars()
            </summary>
            <param name="fileName">Nome do arquivo que deve ser sanitizado</param>
            <returns>Nome do arquivo sanitizado</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.StringNormalizer.ReplaceInvalidFileNameChars(System.String,System.String)">
            <summary>
            Substitui todos caracteres inválidos para um nome de arquivo, baseado no metodo Path.GetInvalidFileNameChars()
            </summary>
            <param name="fileName">Nome do arquivo que deve ser sanitizado</param>
            <param name="newString">Valor que pelo qual os caracteres inválidos serão subtituidos</param>
            <returns>Nome do arquivo sanitizado</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.ReportTaskResponse">
            <summary>
            Retorno de uma tarefa de emissão de relatório
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.ReportTaskResponse.TemporaryFileHandle">
            <summary>
            Handle do registro em Z_ARQUIVOSTEMPORARIOS
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.UrlHelper.SafeUrl(System.String)">
            <summary>
            Retorna uma URL relativa segura, ou seja, garante que a URL seja do domínio.
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.UrlHelper.GetNormalizedApplicationPath">
            <summary>
            Caso o Request.ApplicationPath possua "/" no final o caractere será removido.
            </summary>
            <returns>ApplicationPath normalizado.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.UrlHelper.IsStaticFile(System.Web.HttpRequest)">
            <param name="request">The HTTP request instance to extend.</param>
            <returns>True if the request is for a static file on disk, false otherwise.</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.ReportFormat">
            <summary>
            Formatos de relatórios
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.SerializableKeyValuePair`2">
            <summary>
            Classe para simular um KeyValuePair que é serializável, para isso, tanto TKey quanto TValue devem ser de tipos serializáveis
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="P:Benner.Tecnologia.Common.SerializableKeyValuePair`2.Key">
            <summary>
            Obtém a chave do objeto KeyValuePair
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.SerializableKeyValuePair`2.Value">
            <summary>
            Obtém o valor do objeto KeyValuePair
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.SerializableKeyValuePair`2.#ctor(`0,`1)">
            <summary>
            Construtor inicializando os valores com os parâmetros
            </summary>
            <param name="key">Chave do objeto</param>
            <param name="value">Valor do objeto</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.SerializableKeyValuePair`2.#ctor">
            <summary>
            Construtor inicializando os valores com o valor default dos tipos definidos
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.SerializableKeyValuePair`2.CheckTypesForSerialize">
            <summary>
            Verifica se os tipos definidos são serializáveis
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.SerializableKeyValuePair`2.IsSerializable(System.Type)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.SimpleChartType">
            <summary>
            Tipos de SeriesChartType suportados pelo SimpleChart
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.CustomSystemAttribute">
            <summary>
            Indica métodos de camada específica em campos tipo Lista, Radio e Tab.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.ColorField.OleColorToHtmlHex(System.Int32)">
            <summary>
            Converte a cor Microsoft Access Color para Hexadecimal
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.ColorField.HtmlHexToOleColor(System.String)">
            <summary>
            Converte a cor Hexadecimal para Microsoft Access Color
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.ColorField.FromHtmlHex(System.String)">
            <summary>
            Converte um campo Hex para ColorField
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.ColorFieldDefinition.ToDBValue(System.Object)">
            <summary>
            Converte para um tipo do Builder.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.ColorFieldDefinition.FromDBValue(System.Object)">
            <summary>
            Converte para um tipo do .NET.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.ColorFieldDefinition.ToUI(System.Object)">
            <summary>
            Converter para apresentação
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.ColorFieldDefinition.FromUI(System.String)">
            <summary>
            Converter do formato de apresentação para o tipo nativo
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.FontFieldDefinition.ToDBValue(System.Object)">
            <summary>
            Converte para um tipo do Builder.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.FontFieldDefinition.FromDBValue(System.Object)">
            <summary>
            Converte para um tipo do .NET.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.FontFieldDefinition.ToUI(System.Object)">
            <summary>
            Converter para apresentação
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.FontFieldDefinition.FromUI(System.String)">
            <summary>
            Converter do formato de apresentação para o tipo nativo
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.EntityAggregationItems">
            <summary>
            Lista de itens de um campo do tipo Filtro (EntityAggregation).
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityAggregationItems.Item(Benner.Tecnologia.Common.Handle)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">
            The key of the value to get or set.
            </param>
            <returns>
            The value associated with the specified key. If the specified key is not 
            found, a get operation throws a System.Collections.Generic.KeyNotFoundException, 
            and a set operation creates a new element with the specified key.
            </returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityAggregationItems.Add(Benner.Tecnologia.Common.Handle,System.String)">
            <summary>
            Adds the specified key and value to the dictionary.
            </summary>
            <param name="key">
            The key of the element to add.
            </param>
            <param name="value">
            The value of the element to add. The value can be null for reference types.
            </param>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityAggregationItems.Remove(Benner.Tecnologia.Common.Handle)">
            <summary>
            Removes the value with the specified key from the System.Collections.Generic.Dictionary TKey,TValue.
            </summary>
            <param name="key">
            The key of the element to remove.
            </param>
            <returns>
            true if the element is successfully found and removed; otherwise, false. 
            This method returns false if key is not found in the System.Collections.Generic.Dictionary TKey,TValue.
            </returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityAggregationItems.Clear">
            <summary>
            Removes all keys and values from the System.Collections.Generic.Dictionary TKey,TValue.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.EntityPropertyBase">
            <summary>
            Prov� informa��es de aspectos comportamentais e de estado de uma propriedade de entidade especializada
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityPropertyBase.InternalOriginalValue">
            <summary>
            Representa o valor original de uma propriedade, antes de ela ter sido alterada pela regra de neg�cio ou pelo usu�rio.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityPropertyBase.OriginalValue">
            <summary>
            Representa o valor original de uma propriedade, antes de ela ter sido alterada pela regra de neg�cio ou pelo usu�rio.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityPropertyBase.Changed">
            <summary>
            True se o valor da propriedade foi modificado pela regra de neg�cio ou pelo usu�rio, caso contr�rio (n�o foi alterado), false.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityPropertyBase.Label">
            <summary>
            R�tulo do campo na interface com o usu�rio
            </summary>
            <remarks>
            Na camada de neg�cios, este objeto serve apenas para configurar um novo estado para o campo e n�o para verificar o seu estado atual. 
            Altera��es nas propriedades deste objeto ser�o refletidas na interface, mas as altera��es na interface n�o ser�o refletidas neste objeto. 
            N�o � recomendado verificar o estado do campo para tomar decis�es de neg�cio.
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityPropertyBase.Mask">
            <summary>
            M�scara de edi��o do campo na interface
            </summary>
            <remarks>
            Na camada de neg�cios, este objeto serve apenas para configurar um novo estado para o campo e n�o para verificar o seu estado atual. 
            Altera��es nas propriedades deste objeto ser�o refletidas na interface, mas as altera��es na interface n�o ser�o refletidas neste objeto. 
            N�o � recomendado verificar o estado do campo para tomar decis�es de neg�cio.
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityPropertyBase.ReadOnly">
            <summary>
            Determina se o campo poder� ser alterado pelo usu�rio na interface
            </summary>
            <remarks>
            Na camada de neg�cios, este objeto serve apenas para configurar um novo estado para o campo e n�o para verificar o seu estado atual. 
            Altera��es nas propriedades deste objeto ser�o refletidas na interface, mas as altera��es na interface n�o ser�o refletidas neste objeto. 
            N�o � recomendado verificar o estado do campo para tomar decis�es de neg�cio.
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityPropertyBase.Required">
            <summary>
            Determina se o campo ser� requerido ao usu�rio (V�lido apenas para interface com o usu�rio)
            </summary>
            <remarks>
            Na camada de neg�cios, este objeto serve apenas para configurar um novo estado para o campo e n�o para verificar o seu estado atual. 
            Altera��es nas propriedades deste objeto ser�o refletidas na interface, mas as altera��es na interface n�o ser�o refletidas neste objeto. 
            N�o � recomendado verificar o estado do campo para tomar decis�es de neg�cio.
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityPropertyBase.Tooltip">
            <summary>
            Dica do campo na interface com o usu�rio
            </summary>
            <remarks>
            Na camada de neg�cios, este objeto serve apenas para configurar um novo estado para o campo e n�o para verificar o seu estado atual. 
            Altera��es nas propriedades deste objeto ser�o refletidas na interface, mas as altera��es na interface n�o ser�o refletidas neste objeto. 
            N�o � recomendado verificar o estado do campo para tomar decis�es de neg�cio.
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityPropertyBase.Visible">
            <summary>
            Determina se o campo ser� vis�vel na interface do usu�rio.
            </summary>
            <remarks>
            Na camada de neg�cios, este objeto serve apenas para configurar um novo estado para o campo e n�o para verificar o seu estado atual. 
            Altera��es nas propriedades deste objeto ser�o refletidas na interface, mas as altera��es na interface n�o ser�o refletidas neste objeto. 
            N�o � recomendado verificar o estado do campo para tomar decis�es de neg�cio.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityPropertyBase.SetTabVisible(System.Int32,System.Boolean)">
            <summary>
            Configura visilibidade de tab na interface do usu�rio.
            </summary>
            <param name="tabIndex">�ndice do Tab</param>
            <param name="visible">Visivel</param>
            <remarks>
            Na camada de neg�cios, este objeto serve apenas para configurar um novo estado para o campo e n�o para verificar o seu estado atual. 
            Altera��es nas propriedades deste objeto ser�o refletidas na interface, mas as altera��es na interface n�o ser�o refletidas neste objeto. 
            N�o � recomendado verificar o estado do campo para tomar decis�es de neg�cio.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityPropertyBase.SetRadioItemVisible(System.String,System.Boolean)">
            <summary>
            Configura visilibidade de tab na interface do usu�rio.
            </summary>
            <param name="radioItemIndex">�ndice do Tab</param>
            <param name="visible">Visivel</param>
            <remarks>
            Na camada de neg�cios, este objeto serve apenas para configurar um novo estado para o campo e n�o para verificar o seu estado atual. 
            Altera��es nas propriedades deste objeto ser�o refletidas na interface, mas as altera��es na interface n�o ser�o refletidas neste objeto. 
            N�o � recomendado verificar o estado do campo para tomar decis�es de neg�cio.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityPropertyBase.SetListItemVisible(System.Int32,System.Boolean)">
            <summary>
            Configura visilibidade do ListItem na interface do usu�rio.
            </summary>
            <param name="listItemIndex">�ndice do ListItem</param>
            <param name="visible">Visivel</param>
            <remarks>
            Na camada de neg�cios, este objeto serve apenas para configurar um novo estado para o campo e n�o para verificar o seu estado atual. 
            Altera��es nas propriedades deste objeto ser�o refletidas na interface, mas as altera��es na interface n�o ser�o refletidas neste objeto. 
            N�o � recomendado verificar o estado do campo para tomar decis�es de neg�cio.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityPropertyBase.SetTabVisibleByValue(System.Int32,System.Boolean)">
            <summary>
            Configura visibilidade de tab na interface do usu�rio, pelo valor da Tab.
            </summary>
            <param name="value">Valor do Tab</param>
            <param name="visible">Visivel</param>
            <remarks>
            Na camada de neg�cios, este objeto serve apenas para configurar um novo estado para o campo e n�o para verificar o seu estado atual. 
            Altera��es nas propriedades deste objeto ser�o refletidas na interface, mas as altera��es na interface n�o ser�o refletidas neste objeto. 
            N�o � recomendado verificar o estado do campo para tomar decis�es de neg�cio.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityPropertyBase.SetRadioItemVisibleByValue(System.String,System.Boolean)">
            <summary>
            Configura visibilidade do RadioItem na interface do usu�rio, pelo valor do RadioItem.
            </summary>
            <param name="value">Valor do RadioItem</param>
            <param name="visible">Visivel</param>
            <remarks>
            Na camada de neg�cios, este objeto serve apenas para configurar um novo estado para o campo e n�o para verificar o seu estado atual. 
            Altera��es nas propriedades deste objeto ser�o refletidas na interface, mas as altera��es na interface n�o ser�o refletidas neste objeto. 
            N�o � recomendado verificar o estado do campo para tomar decis�es de neg�cio.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityPropertyBase.SetListItemVisibleByValue(System.Int32,System.Boolean)">
            <summary>
            Configura visibilidade do ListItem na interface do usu�rio, pelo valor do ListItem.
            </summary>
            <param name="value">Valor do ListItem</param>
            <param name="visible">Visivel</param>
            <remarks>
            Na camada de neg�cios, este objeto serve apenas para configurar um novo estado para o campo e n�o para verificar o seu estado atual. 
            Altera��es nas propriedades deste objeto ser�o refletidas na interface, mas as altera��es na interface n�o ser�o refletidas neste objeto. 
            N�o � recomendado verificar o estado do campo para tomar decis�es de neg�cio.
            </remarks>
        </member>
        <member name="T:Benner.Tecnologia.Common.FriendlyFieldValueBase">
            <summary>
            Provê recursos para a manipulação amigável e fortemente tipada das propriedades das entidades especializadas.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.FriendlyFieldValueBase.FieldDefinition">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.FriendlyFieldValueBase.GetValueIsNull(System.Object)">
            <summary>
            Jeito mais rápido para verificar se o valor é nulo (não irá pesquisar o valor novamente no dicionario de valores)
            </summary>
            <param name="value">Valor</param>
            <returns>True se for nulo.</returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.FriendlyFieldValueBase.IsNull">
            <inheritdoc />
        </member>
        <member name="P:Benner.Tecnologia.Common.FriendlyFieldValueBase.Value">
            <inheritdoc />
        </member>
        <member name="P:Benner.Tecnologia.Common.FriendlyFieldValueBase.ValueDictionary">
            <summary>
            Armazena uma referencia ao dicionário de valores dos campos da entidade.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.FriendlyFieldValueBase.FieldDefinitionList">
            <summary>
            Acesso rápido à definição de campos da entidade.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.FriendlyFieldValueBase.Definition">
            <summary>
            Armazena uma referencia a definição da entidade
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.FriendlyFieldValueBase.FieldName">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.FriendlyFieldValueBase.GetString">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.FriendlyFieldValueBase.GetInt64">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.FriendlyFieldValueBase.GetInt32">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.FriendlyFieldValueBase.GetBoolean">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.FriendlyFieldValueBase.GetDateTime">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.FriendlyFieldValueBase.GetDBValue">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.FriendlyFieldValueBase.GetDecimal">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.FriendlyFieldValueBase.Set``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.FriendlyFieldValueBase.SetNull">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.FriendlyFieldValueBase.SetDBValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.FriendlyFieldValueBase.SetString(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.FriendlyFieldValueBase.SetInt32(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.FriendlyFieldValueBase.SetInt64(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.FriendlyFieldValueBase.SetBoolean(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.FriendlyFieldValueBase.SetDateTime(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.FriendlyFieldValueBase.SetDecimal(System.Decimal)">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.FriendlyFieldValueBase.SetInt32(System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.FriendlyFieldValueBase.SetInt64(System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.FriendlyFieldValueBase.SetBoolean(System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.FriendlyFieldValueBase.SetDateTime(System.Nullable{System.DateTime})">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.FriendlyFieldValueBase.SetDecimal(System.Nullable{System.Decimal})">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.FriendlyFieldValueBase.GetHttpValue">
            <inheritdoc />
        </member>
        <member name="M:Benner.Tecnologia.Common.FriendlyFieldValueBase.SetHttpValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Benner.Tecnologia.Common.IEntityProperty">
            <summary>
            Define meios de se recuperar informações comportamentais e de estado de uma propriedade de entidade especializada.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.IEntityProperty.Changed">
            <summary>
            Deve retornar true caso o valor da propriedade tenha sido alterado, caso contrário, false.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.IEntityProperty.OriginalValue">
            <summary>
            Valor original da propriedade, antes de ter sido alterado.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.IFriendlyFieldValue">
            <summary>
            Define um objeto capaz de prover recursos para a manipulação amigável e fortemente tipada de propriedades das entidades especializadas.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.IFriendlyFieldValue.FieldDefinition">
            <summary>
            Definição do campo
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.IFriendlyFieldValue.IsNull">
            <summary>
            True se o valor campo é nulo, caso contrário, false. 
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.IFriendlyFieldValue.Value">
            <summary>
            Valor nativo do campo, sem efetuar nenhuma conversão
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.IFriendlyFieldValue.FieldName">
            <summary>
            Nome do campo
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.IFriendlyFieldValue.GetString">
            <summary>
            Obtém o valor nativo do campo e tenta convertê-lo para String
            </summary>
            <returns>Um objeto do tipo String que representa o valor do campo.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.IFriendlyFieldValue.GetInt32">
            <summary>
            Obtém o valor nativo do campo e tenta convertê-lo para Int32. Para campo Handle utilize GetInt64().
            </summary>
            <returns>Um objeto do tipo Int32 que representa o valor do campo.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.IFriendlyFieldValue.GetInt64">
            <summary>
            Obtém o valor nativo do campo e tenta convertê-lo para Int64. Deve ser utilizado para campos Handle.
            </summary>
            <returns>Um objeto do tipo Int64 que representa o valor do campo.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.IFriendlyFieldValue.GetBoolean">
            <summary>
            Obtém o valor nativo do campo e tenta convertê-lo para Boolean.
            </summary>
            <returns>Um objeto do tipo Boolean que representa o valor do campo.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.IFriendlyFieldValue.GetDateTime">
            <summary>
            Obtém o valor nativo do campo e tenta convertê-lo para DateTime.
            </summary>
            <returns>Um objeto do tipo DateTime que representa o valor atual da propriedade.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.IFriendlyFieldValue.GetDBValue">
            <summary>
            Obtém o valor nativo do campo e tenta convertê-lo para o valor que será gravado na base de dados
            </summary>
            <returns>Um valor do tipo Object convertido para o valor gravado na base de dados.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.IFriendlyFieldValue.GetDecimal">
            <summary>
            Obtém o valor nativo do campo e tenta convertê-lo para Decimal.
            </summary>
            <returns>Um objecto do tipo Decimal que representa o valor do campo.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.IFriendlyFieldValue.GetHttpValue">
            <summary>
            Obtém o valor nativo do campo e tenta convertê-lo para um objeto JSON (ExpandoObject).
            </summary>
            <returns>Objeto JSON (ExpandoObject) que representa o valor.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.IFriendlyFieldValue.SetNull">
            <summary>
            Atribui nulo ao valor do campo
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.IFriendlyFieldValue.Set``1(``0)">
            <summary>
            Atribui valor passado ao campo tentando converter para o valor nativo
            </summary>
            <typeparam name="T">Tipo do valor</typeparam>
            <param name="value">Valor do tipo T</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.IFriendlyFieldValue.SetDBValue(System.Object)">
            <summary>
            Atribui o valor que é gravado no banco de dados tentando converter para o valor nativo.
            </summary>
            <param name="value">Valor do tipo Object do mesmo tipo que é gravado na base de dados.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.IFriendlyFieldValue.SetString(System.String)">
            <summary>
            Atribui valor string ao campo tentando converter para o valor nativo.
            </summary>
            <param name="value">Valor string</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.IFriendlyFieldValue.SetInt32(System.Int32)">
            <summary>
            Atribui valor Int32 ao campo tentando converter para o valor nativo.
            </summary>
            <param name="value">Valor Int32</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.IFriendlyFieldValue.SetInt64(System.Int64)">
            <summary>
            Atribui valor Int64 ao campo tentando converter para o valor nativo.
            </summary>
            <param name="value">Valor Int64</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.IFriendlyFieldValue.SetBoolean(System.Boolean)">
            <summary>
            Atribui valor Boolean ao campo tentando converter para o valor nativo.
            </summary>
            <param name="value">Valor Boolean</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.IFriendlyFieldValue.SetDateTime(System.DateTime)">
            <summary>
            Atribui valor DateTime ao campo tentando converter para o valor nativo.
            </summary>
            <param name="value">Valor DateTime</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.IFriendlyFieldValue.SetDecimal(System.Decimal)">
            <summary>
            Atribui valor Int32 ao campo tentando converter para o valor nativo.
            </summary>
            <param name="value">Valor decimal</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.IFriendlyFieldValue.SetInt32(System.Nullable{System.Int32})">
            <summary>
            Atribui valor Nullable&lt;Int32&gt; ao campo tentando converter para o valor nativo.
            </summary>
            <param name="value">Valor Nullable&lt;Int32&gt;</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.IFriendlyFieldValue.SetInt64(System.Nullable{System.Int64})">
            <summary>
            Atribui valor Nullable&lt;Int64&gt; ao campo tentando converter para o valor nativo.
            </summary>
            <param name="value">Valor Int64</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.IFriendlyFieldValue.SetBoolean(System.Nullable{System.Boolean})">
            <summary>
            Atribui valor Nullable&lt;Boolean&gt; ao campo tentando converter para o valor nativo.
            </summary>
            <param name="value">Valor Nullable&lt;Boolean&gt;</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.IFriendlyFieldValue.SetDateTime(System.Nullable{System.DateTime})">
            <summary>
            Atribui valor Nullable&lt;DateTime&gt; ao campo tentando converter para o valor nativo.
            </summary>
            <param name="value">Valor Nullable&lt;DateTime&gt;</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.IFriendlyFieldValue.SetDecimal(System.Nullable{System.Decimal})">
            <summary>
            Atribui valor Nullable&lt;Decimal&gt; ao campo tentando converter para o valor nativo.
            </summary>
            <param name="value">Valor Nullable&lt;Decimal&gt;</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.IFriendlyFieldValue.SetHttpValue(System.Object)">
            <summary>
            Atribui valor objeto JSON (ExpandoObject) tentando converter para o valor nativo.
            </summary>
            <param name="value">Objeto JSON (ExpandoObject) que representa o valor</param>
        </member>
        <member name="T:Benner.Tecnologia.Common.EntityPropertyDictionary">
            <summary>
            Representa uma lista que contém aspectos comportamentais e de estado de uma propriedade de entidade especializada.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityPropertyDictionary.#ctor">
            <summary>
            Cria uma nova instância de EntityPropertyDictionary.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityPropertyDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Cria uma nova instância de EntityPropertyDictionary.
            </summary>
            <param name="info">Um objeto do tipo System.Runtime.Serialization.SerializationInfo contendo a informação necessária para serializar este dicionário.</param>
            <param name="context">Uma estrutura do tipo System.Runtime.Serialization.StreamingContext contendo a fonte e o destino do stream serializado associado a este dicionário.</param>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityPropertyDictionary.HasChanges">
            <summary>
            Indica se existe algum campo deste dicionário que foi alterado (onde o valor atual é diferente do valor original)
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.AspNetSessionTraceListener">
            <summary>
            TraceListener que armazena as mensagens na sessão do ASP.NET.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.BuilderUtils">
            <summary>
            Classe utilitária referente a ferramenta Builder
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BuilderUtils.ValidSelectCommand">
            <summary>
            Expressão regular para reconhecimento do SELECT
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BuilderUtils.ArrobaCampo">
            <summary>
            Expressão regular para o reconhecimento do @Campo
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BuilderUtils.ArrobaTilCampo">
            <summary>
            Expressão regular para o reconhecimento do @~Campo
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BuilderUtils.RegexOrderBy">
            <summary>
            Expressão regular para reconhecimento de order by
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.BuilderUtils.IsValidSelectCommand(System.String)">
            <summary>
            Verifica se o comando SQL é um comando SELECT válido
            </summary>
            <param name="sqlCommand">Comando SQL</param>
            <returns>Retorna true se for um comando SELECT válido</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.BuilderUtils.IndexOfOrderBy(System.String)">
            <summary>
            Retorna a primeira posição do OrderBy no comando SQL
            </summary>
            <param name="sqlCommand">Comando sql</param>
            <returns>Retorna o indice do OrderBy no sqlCommand, ou -1 se não encontrou order by</returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.BuilderUtils.ArrobaRegularExpression">
            <summary>
            Expressão regular para o reconhecimento do @NomeDoCampo
            </summary>
            <remarks>
            Reconhece um identificador de campo com as seguintes exceções:
            @EMPRESA
            @FILIAL
            @FILIAIS
            @USUARIO
            @TABELA
            @TRUNCDATE
            @HOJE
            @TODAY
            @AGORA 
            @NOW
            @MODULO
            @ARVORE
            @SEMESTRE
            @TRIMESTRE
            @BIMESTRE
            @SEMANA
            @QUINZENA
            @ANO
            @MES    
            @NULL 
            @NOTNULL
            </remarks> 
        </member>
        <member name="P:Benner.Tecnologia.Common.BuilderUtils.ArrobaArrobaRegularExpression">
            <summary>
            Expressão regular para o reconhecimento do @@NomeDoCampo
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.BuilderUtils.TranslateSpecialSelectionToCriteriaWhereClause(System.String,System.String,System.String@,System.Collections.Generic.List{System.String}@)">
            <summary>
            Traduz seleção especial do campo tipo tabela em uma cláusula where
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.BuilderUtils.ResolveFunction(System.String)">
            <summary>
            Traduz a função @NomeDoCampo e @@NomeDoCampo para @CAMPO(NomeDoCampo)
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.BuilderUtils.InternalGetDependencyFieldsName(System.String,System.Boolean)">
            <summary>
            Obtém o nome dos campos de dependência de uma seleção especial
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.BuilderUtils.GetDependencyFieldsNameForClient(System.String)">
            <summary>
            Obtém o nome dos campos de dependência de uma seleção especial, mas o que é "@~CAMPO" virá como "~NOMECAMPO"
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.BuilderUtils.GetDependencyFieldsName(System.String)">
            <summary>
            Obtém o nome dos campos de dependência de uma seleção especial, SEM especificar o que é @~CAMPO
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.BuilderUtils.ChangeTableColumnAlias(System.String,System.String)">
            <summary>
            Troca o apelido da tabela de cada campo para A
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.BuilderUtils.IsReadOnlyCommandText(System.String)">
            <summary>
            Valida que o comando somente irá retornar dados, não é permitido o uso de DELETE, INSERT ou UPDATE.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.CallEntityCommand">
            <summary>
            Operação Call para execução em lote
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.CallEntityCommand.Definition">
            <summary>
            Obtém a definição de entidade.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.CallEntityCommandResult">
            <summary>
            Resultado da execução da operação Call
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.DeleteEntityCommandResult">
            <summary>
            Resultado da execução da operação Save
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.DeleteEntityCommand">
            <summary>
            Operação Delete para execução em lote
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.EntityCommand">
            <summary>
            Classe base de um comando para execução em lote
            </summary>
            <remarks>
            O evento Executed e disparado quando o resultado da execução é atualizado no comando
            </remarks>    
        </member>
        <member name="T:Benner.Tecnologia.Common.EntityCommandList">
            <summary>
            Lista de comandos para execução em lote dentro da mesma transação
            </summary>    
        </member>
        <member name="T:Benner.Tecnologia.Common.EntityCommandResult">
            <summary>
            Classe base para o resultado da execução de um comando
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.CommandResultList">
            <summary>
            Lista de retornos dos comandos executados em lote
            </summary>    
        </member>
        <member name="T:Benner.Tecnologia.Common.EntityCommandVerb">
            <summary>
            Operações suportadas para execução em lote
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.IEntityCommandDefinition">
            <summary>
            Definição de entidade de um comando para possibilitar a criação de um EntityService
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.SaveEntityCommand">
            <summary>
            Operação Save para execução em lote
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.SaveEntityCommandResult">
            <summary>
            Resultado da execução da operação Save
            </summary>    
        </member>
        <member name="M:Benner.Tecnologia.Common.ExceptionExtensions.ConcatInnerMessages(System.Exception)">
            <summary>
            Obtém as mensagens de exceções concatenadas de toda a pilha de exceções (InnerExceptions)
            </summary>
            <remarks>
            Este método dá fim ao uso do método ConcatInnerExceptions do ExceptionHelper e FaultException
            </remarks>
        </member>
        <member name="T:Benner.Tecnologia.Common.KnowTypes">
            <summary>
            Tipos conhecidos para serem utilizados pelo mecanismo de serialização do dicionário chave valor
            </summary>
            <summary>
            Tipos conhecidos para serem utilizados pelo mecanismo de serialização do dicionário chave valor
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.EntityFieldVisualizationDefinition">
            <summary>
            Definições de visualização de um campo na interface com o usuário.
            </summary>
            <remarks>
            Na camada de negócios, este objeto serve apenas para configurar um novo estado para o campo e não para verificar o seu estado atual. 
            Alterações nas propriedades deste objeto serão refletidas na interface, mas as alterações na interface não serão refletidas neste objeto. 
            Não é recomendado verificar o estado do campo para tomar decisões de negócio.
            </remarks>
        </member>
        <member name="F:Benner.Tecnologia.Common.EntityFieldVisualizationDefinition.GetEntityDefinitionAction">
            <summary>
            Repositório da definição da entidade
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityFieldVisualizationDefinition.FieldDefinition">
            <summary>
            Definição do campo. Pode ser nulo
            </summary>
        </member>
        <member name="E:Benner.Tecnologia.Common.EntityFieldVisualizationDefinition.ReadOnlyChanged">
            <summary>
            Evento disparado quando a propriedade ReadOnly do objeto é alterada.
            </summary>
        </member>
        <member name="E:Benner.Tecnologia.Common.EntityFieldVisualizationDefinition.VisibleChanged">
            <summary>
            Evento disparado quando a propriedade Visible do objeto é alterada.
            </summary>
        </member>
        <member name="E:Benner.Tecnologia.Common.EntityFieldVisualizationDefinition.MaskChanged">
            <summary>
            Evento disparado quando a propriedade Mask do objeto é alterada.
            </summary>
        </member>
        <member name="E:Benner.Tecnologia.Common.EntityFieldVisualizationDefinition.LabelChanged">
            <summary>
            Evento disparado quando a propriedade Label do objeto é alterada.
            </summary>
        </member>
        <member name="E:Benner.Tecnologia.Common.EntityFieldVisualizationDefinition.TabVisibleChanged">
            <summary>
            Evento disparado quando a propriedade Visible da Tab do campo é alterada
            </summary>
        </member>
        <member name="E:Benner.Tecnologia.Common.EntityFieldVisualizationDefinition.RadioItemVisibleChanged">
            <summary>
            Evento disparado quando a propriedade Visible de um RadioItem do campo é alterada
            </summary>
        </member>
        <member name="E:Benner.Tecnologia.Common.EntityFieldVisualizationDefinition.ListItemVisibleChanged">
            <summary>
            Evento disparado quando a propriedade Visible de um RadioItem do campo é alterada
            </summary>
        </member>
        <member name="E:Benner.Tecnologia.Common.EntityFieldVisualizationDefinition.TooltipChanged">
            <summary>
            Evento disparado quando a propriedade Tooltip do objeto é alterada.
            </summary>
        </member>
        <member name="E:Benner.Tecnologia.Common.EntityFieldVisualizationDefinition.RequiredChanged">
            <summary>
            Evento disparado quando a propriedade Required do objeto é alterada.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityFieldVisualizationDefinition.Name">
            <summary>
            Nome do campo.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityFieldVisualizationDefinition.Data">
            <summary>
            Uso interno. Informações serializáveis
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityFieldVisualizationDefinition.ReadOnly">
            <summary>
            Determina se o campo poderá ser alterado pelo usuário.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityFieldVisualizationDefinition.Visible">
            <summary>
            Determina se o campo será visível ao usuário.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityFieldVisualizationDefinition.Mask">
            <summary>
            Máscara de edição do campo
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityFieldVisualizationDefinition.Label">
            <summary>
            Rótulo do campo
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityFieldVisualizationDefinition.Required">
            <summary>
            Determina se o campo será requerido ao usuário.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityFieldVisualizationDefinition.Tooltip">
            <summary>
            Dica do campo
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityFieldVisualizationDefinition.GetTabVisible(System.Int32)">
            <summary>
            Obtém a visibilidade da tab
            </summary>
            <param name="tabIndex">Índice do Tab</param>
            <param name="visible">Visivel</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityFieldVisualizationDefinition.SetTabVisible(System.Int32,System.Boolean)">
            <summary>
            Configura visibilidade de tab em campos do tipo Tab
            </summary>
            <param name="tabIndex">Índice do Tab</param>
            <param name="visible">Visivel</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityFieldVisualizationDefinition.GetTabVisibleByValue(System.Int32)">
            <summary>
            Obtém a visibilidade da Tab pelo valor da Tab
            </summary>
            <param name="value">Valor da tab</param>
            <returns>Retorna se a Tab está visível ou não</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityFieldVisualizationDefinition.SetTabVisibleByValue(System.Int32,System.Boolean)">
            <summary>
            Configura visibilidade de campos do tipo Tabs, pelo valor da Tab
            </summary>
            <param name="value">Valor do Tab</param>
            <param name="visible">Visibilidade</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityFieldVisualizationDefinition.GetRadioItemVisible(System.String)">
            <summary>
            Obtém a visibilidade do Radio Item
            </summary>
            <param name="radioItemIndex">Índice do Radio Item</param>
            <param name="visible">Visivel</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityFieldVisualizationDefinition.SetRadioItemVisible(System.String,System.Boolean)">
            <summary>
            Configura visibilidade de Itens em campos Radio
            </summary>
            <param name="radioItemIndex">Índice do RadioItem</param>
            <param name="visible">Visivel</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityFieldVisualizationDefinition.GetRadioItemVisibleByValue(System.String)">
            <summary>
            Obtém a visibilidade do Radio Item .
            </summary>
            <param name="value">Valor do RadioItem</param>
            <returns>Retorna se o Radio Item está visível ou não</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityFieldVisualizationDefinition.SetRadioItemVisibleByValue(System.String,System.Boolean)">
            <summary>
            Configura visibilidade de Radio Item em campos do tipo Radio, pelo valor do Radio Item
            </summary>
            <param name="value">Valor do RadioItem</param>
            <param name="visible">Visibilidade</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityFieldVisualizationDefinition.GetListItemVisible(System.Int32)">
            <summary>
            Obtém a visibilidade do List Item
            </summary>
            <param name="listItemIndex">Índice do List Item</param>
            <param name="visible">Visivel</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityFieldVisualizationDefinition.SetListItemVisible(System.Int32,System.Boolean)">
            <summary>
            Configura visibilidade de Itens em campos List
            </summary>
            <param name="listItemIndex">Índice do ListItem</param>
            <param name="visible">Visivel</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityFieldVisualizationDefinition.GetListItemVisibleByValue(System.Int32)">
            <summary>
            Obtém a visibilidade do List Item .
            </summary>
            <param name="value">Valor do ListItem</param>
            <returns>Retorna se o List Item está visível ou não</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityFieldVisualizationDefinition.SetListItemVisibleByValue(System.Int32,System.Boolean)">
            <summary>
            Configura visibilidade de List Item em campos do tipo List, pelo valor do List Item
            </summary>
            <param name="value">Valor do ListItem</param>
            <param name="visible">Visibilidade</param>
        </member>
        <member name="T:Benner.Tecnologia.Common.EntityFunctionVisualizationDefinition">
            <summary>
            Definições de visualização de uma função na interface com o usuário.
            </summary>
        </member>
        <member name="E:Benner.Tecnologia.Common.EntityFunctionVisualizationDefinition.EnabledChanged">
            <summary>
            Evento disparado quando a propriedade Enabled do objeto é alterada.
            </summary>
        </member>
        <member name="E:Benner.Tecnologia.Common.EntityFunctionVisualizationDefinition.VisibleChanged">
            <summary>
            Evento disparado quando a propriedade Visible do objeto é alterada.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityFunctionVisualizationDefinition.Name">
            <summary>
            Nome da função.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityFunctionVisualizationDefinition.Data">
            <summary>
            Uso interno. Informações serializáveis
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityFunctionVisualizationDefinition.Enabled">
            <summary>
            Determina se a função poderá ser acionada pelo usuário.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityFunctionVisualizationDefinition.Visible">
            <summary>
            Determina se a função será visível ao usuário.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.DatabaseVirtualizationSource">
            <summary>
            Possibilita o uso de comandos SQL como fonte de dados de entidades.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.DatabaseVirtualizationSource.GetCommandText">
            <summary>
            Comando SQL, podendo ser uma Query ou nome de uma Stored Procedure
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.DatabaseVirtualizationSource.GetManyCommandText">
            <summary>
            Comando SQL, podendo ser uma Query ou nome de uma Stored Procedure
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.DatabaseVirtualizationSource.ProviderHandle">
            <summary>
            Nome da do provedor de virtualização (campo NOME em Z_VIRTUALIZACAODBPROVEDORES)
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DatabaseVirtualizationSource.#ctor(Benner.Tecnologia.Common.Handle)">
            <summary>
            Cria uma instância de DatabaseVirtualizationSource.
            </summary>
            <param name="systemInstanceName">Nome da do provedor de virtualização (campo NOME em Z_VIRTUALIZACAODBPROVEDORES)</param>
            <param name="commandText">Comando SQL.</param>
        </member>
        <member name="P:Benner.Tecnologia.Common.DatabaseVirtualizationSource.GetCommandType">
            <summary>
            Tipo do comando SQL (Query ou Stored Procedure)
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.DatabaseVirtualizationSource.GetManyCommandType">
            <summary>
            Tipo do comando SQL (Query ou Stored Procedure)
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityAggregation`1.Count">
            <summary>
            Indica a quantidade de items selecionados no filtro.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityAggregation`1.TargetEntityDefinition">
            <summary>
            Definição de entidade de destido do filtro.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityAggregation`1.GetSelectedEntities">
            <summary>
            Carrega da base uma lista de instância de entidades que representa os registros selecionados neste filtro.
            Internamente será disparado um GetMany()
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityAggregation`1.BuildInSqlClause(System.String)">
            <summary>
            Monta uma cláusula sql IN, quebrando-a em condições OR quando houver muitos itens. É útil porque alguns bancos têm limite para a quantidade de itens dentro dos parênteses de uma clásula IN (250 em Sybase, 1000 em Oracle, por exemplo). 
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
            <example>
            string inClause = Usuarios.BuildInSqlClause("A.HANDLE");
            
            // desta forma será montado uma string semelhante ao seguinte:
            "(A.HANDLE IN (6,5,7,9,14))"
            
            // caso exista mais de 250 itens selecionados, para contornar limitações de alguns bancos, será criado uma nova clausula IN, separada por OR:
            "(A.HANDLE IN (6,5,7,9,14,...) OR A.HANDLE IN (65,298,457,1,5,...))"
            </example>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityAggregation`1.ToHandleList">
            <summary>
            Cria uma lista contendo os handles dos registros selecionados no filtro atualmente.
            As alterações aplicadas à lista de retornada aqui não irão refletir na lista de items selecionados neste filtro.
            </summary>
            <returns>Uma lista contendo os handles dos registros selecionados no filtro atualmente</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityAggregation`1.Clear">
            <summary>
            Remove os registros selecionados no filtro.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityAggregation`1.Add(Benner.Tecnologia.Common.Handle[])">
            <summary>
            Adiciona registros aos items selecionados no filtro, através de handle(s), ignorando os registros já existentes.
            </summary>
            <param name="handles"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityAggregation`1.Add(`0[])">
            <summary>
            Adiciona registros aos items selecionados no filtro, através de entidade(s), ignorando os registros já existentes.
            </summary>
            <param name="entityInstances"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityAggregation`1.Add(Benner.Tecnologia.Common.EntityBase[])">
            <summary>
            Adiciona registros aos items selecionados no filtro, através de entidade(s), ignorando os registros já existentes.
            </summary>
            <param name="entityInstances"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityAggregation`1.Add(System.Collections.Generic.List{`0})">
            <summary>
            Adiciona registros aos items selecionados no filtro, através de entidade(s), ignorando os registros já existentes.
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityAggregation`1.Add(System.Collections.Generic.List{Benner.Tecnologia.Common.Handle})">
            <summary>
            Adiciona registros aos items selecionados no filtro, através de handle(s), ignorando os registros já existentes.
            </summary>
            <param name="handles"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityAggregation`1.Add(System.Collections.Generic.List{System.Int64})">
            <summary>
            Adiciona registros aos items selecionados no filtro, através de handle(s), ignorando os registros já existentes.
            </summary>
            <param name="handles"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityAggregation`1.Add(System.Collections.Generic.List{Benner.Tecnologia.Common.EntityBase})">
            <summary>
            Adiciona registros aos items selecionados no filtro, através de entidade(s), ignorando os registros já existentes.
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityAggregation`1.Contains(`0)">
            <summary>
            Indica se um determinado item está na selecionado.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityAggregation`1.Contains(Benner.Tecnologia.Common.EntityBase)">
            <summary>
            Indica se um determinado item está na selecionado.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Benner.Tecnologia.Common.EntityAggregation`1.Contains(Benner.Tecnologia.Common.Handle)" -->
        <member name="M:Benner.Tecnologia.Common.EntityAggregation`1.Remove(Benner.Tecnologia.Common.Handle)">
            <summary>
            Remove um item da lista de itens selecionados.
            </summary>
            <param name="handle"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityAggregation`1.Remove(Benner.Tecnologia.Common.EntityBase)">
            <summary>
            Remove um item da lista de itens selecionados.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityAggregation`1.Remove(`0)">
            <summary>
            Remove um item da lista de itens selecionados.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="T:Benner.Tecnologia.Common.FileField">
            <summary>
            Campo tipo arquivo.
            </summary>    
        </member>
        <member name="M:Benner.Tecnologia.Common.FileField.#ctor">
            <summary>
            Inicializa um novo objeto.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.FileField.#ctor(System.String)">
            <summary>
            Inicializa um novo objeto. Atribuinto o arquivo na property Content.
            </summary>
            <param name="path">Caminho completo do arquivo para ser carregado na property Content</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.FileField.#ctor(System.IO.MemoryStream,System.String)">
            <summary>
            Inicializa um novo objeto. Atribuinto o MemoryStream na property Content.
            </summary>
            <param name="nome">Nome do arquivo para ser carregado na property Content</param>
        </member>
        <member name="P:Benner.Tecnologia.Common.FileField.Name">
            <summary>
            Nome do arquivo.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.FileField.TemporaryId">
            <summary>
            Identificação do arquivo na área de armazenamento temporário após o upload e antes de salvar a entidade.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.FileField.LocalFileName">
            <summary>
            Caminho do arquivo completo. Esta informação é preenchida pela camada Runner/Provider
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.FileField.Content">
            <summary>
            Conteúdo do arquivo, utilizado com intermediador para a persistência. Dado não trafegável.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.FileField.StoreContents(Benner.Tecnologia.Common.EntityBase,System.IO.Stream)">
            <summary>
            Associa um conteúdo ao campo tipo arquivo.
            </summary>
            <param name="entity">Entidade do conteúdo a ser armazenado.</param>
            <param name="source">Stream do conteúdo do arquivo.</param>
            <remarks>
            O arquivo é salvo em uma área de armazenamento temporária.
            A identificação do arquivo nesta área é salva na propriedade TemporaryId.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.FileField.StoreContents(Benner.Tecnologia.Common.EntityBase,System.Byte[])">
            <summary>
            Associa um conteúdo ao campo tipo arquivo.
            </summary>
            <param name="entity">Entidade do conteúdo a ser armazenado.</param>
            <param name="source">Array de bytes contendo os dados a serem armazenados.</param>
            <remarks>
            O arquivo é salvo em uma área de armazenamento temporária.
            A identificação do arquivo nesta área é salva na propriedade TemporaryId.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.FileField.StoreContents(Benner.Tecnologia.Common.EntityDefinition,System.IO.Stream)">
            <summary>
            Armazena conteúdo do campo tipo arquivo
            </summary>
            <param name="entityDefinition">Definição da entidade</param>
            <param name="source">Stream do conteúdo do arquivo</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.FileField.RetrieveContents(Benner.Tecnologia.Common.EntityBase,System.String,System.IO.Stream)">
            <summary>
            Obtém o conteúdo do arquivo.
            </summary>
            <param name="entity">Entidade do conteúdo a ser recuperado.</param>
            <param name="fieldName">Campo do conteúdo a ser recuperado.</param>
            <param name="target">Stream na qual o conteúdo do arquivo deve ser armazenado.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.FileField.ToString">
            <summary>
            Retorna a representação textual de um FileField
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.ExtensionMethods">
            <summary>
            Classe para os métodos de extensão
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.ExtensionMethods.ToStringForLogging(System.Object)">
            <summary>
            Converte para uma string trocando caracteres de controle (Tab, Nova linha, Enter, etc) por literais do C# (\t, \n, \r, etc) e se for nulo por "(null)".
            </summary>
            <param name="value">String com caraceteres de controle</param>
            <returns>Retorna a string traduzida</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.ExtensionMethods.Encrypt(System.String)">
            <summary>
            Utiliza AES (Advanced Encryption Standard) para criptografar uma string
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.ExtensionMethods.Decrypt(System.String)">
            <summary>
            Utiliza AES (Advanced Encryption Standard) para descriptografar uma string
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.ExtensionMethods.Alias(Benner.Tecnologia.Common.Layer)">
            <summary>
            Retorna o apelido desta camada da arquitetura. Por exemplo: Layer.Business = "negócios".
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.ExtensionMethods.Description(Benner.Tecnologia.Common.Layer)">
            <summary>
            Retorna a descrição desta camada da arquitetura. Por exemplo: Layer.Business = "[BUSINESS LAYER]".
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.ExtensionMethods.GetDescription(System.Enum)">
            <summary>
            Obtem a descrição de um enumerador
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.ExtensionMethods.ContentEquals(System.Byte[],System.Byte[])">
            <summary>
            Este método compara o conteúdo de um array de bytes e indica se os arrays são iguais ou não.
            Pois o byte[].Equals retorna false mesmo que o conteúdo de dois arrays seja o mesmo.
            SMS 635924
            </summary>
            <param name="firstArray"></param>
            <param name="secondArray"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.ExtensionMethods.GetSha256Hash(System.String)">
            <summary>
            Gera um hash Sha256 da string
            </summary>
            <param name="randomString"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.ExtensionMethods.Truncate(System.String,System.Int32)">
            <summary>
            Truncate string
            </summary>
            <param name="value"></param>
            <param name="maxLength"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.ExtensionMethods.RemoveAccentuation(System.String)">
            <summary>
            Remove a acentuação
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.ExtensionMethods.RemoveNewLines(System.String)">
            <summary>
            Remove quebra de linha
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.FunctionScriptProxy">
            <summary>
            Proxy para a chamada de uma função de contexto tabela pelo script
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.FunctionScriptProxy.Call(Benner.Tecnologia.Common.EntityDefinition,System.String)">
            <summary>
            Executa uma função de uma entidade.
            </summary>
            <param name="entityDefinition">Definição da entidade cuja função será executada.</param>
            <param name="functionName">Nome da função</param>        
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.FunctionScriptProxy.Call(Benner.Tecnologia.Common.EntityDefinition,System.String,Benner.Tecnologia.Common.EntityBase)">
            <summary>
            Executa uma função de uma entidade.
            </summary>        
            <param name="entityDefinition">Definição da entidade cuja função será executada.</param>        
            <param name="functionName">Nome da função</param>
            <param name="dataEntity">Dados adicionais a serem utilizados pela função (opcional).</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.FunctionScriptProxy.Call(Benner.Tecnologia.Common.EntityDefinition,System.String,Benner.Tecnologia.Common.NameValueDictionary)">
            <summary>
            Executa uma função de uma entidade.
            </summary>        
            <param name="entityDefinition">Definição da entidade cuja função será executada.</param>        
            <param name="functionName">Nome da função</param>
            <param name="transitoryVars">Dados adicionais a serem utilizados pela função (opcional).</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.FunctionScriptProxy.Call(Benner.Tecnologia.Common.EntityDefinition,System.String,Benner.Tecnologia.Common.EntityBase,Benner.Tecnologia.Common.NameValueDictionary)">
            <summary>
            Executa uma função de uma entidade.
            </summary>
            <param name="entityDefinition">Definição da entidade cuja função será executada.</param>
            <param name="functionName">Nome da função</param>        
            <param name="dataEntity">Dados adicionais a serem utilizados pela função (opcional).</param>
            <param name="transitoryVars">Dados adicionais a serem utilizados pela função (opcional).</param>
            <returns>Retorno da execução da função</returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.ICompanyEntityRecord.EmpresaMestre">
            <summary>
            Empresa Mestre
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.ICompanyEntityRecord.Handle">
            <summary>
            Handle Empresa Mestre
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.ITableCompanyMasterRecord.NomeTabela">
            <summary>
            Handle da tabela 
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.ITableCompanyMasterRecord.Table">
            <summary>
            Nome da tabela com empresa mestre
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.ListItemEnum.op_Equality(Benner.Tecnologia.Common.ListItemEnum,Benner.Tecnologia.Common.ListItemEnum)">
            <summary>
            Verifica se ListEnum possuem o mesmo Index.
            </summary>
            <param name="x">Um dos ListEnum a serem comparados.</param>
            <param name="y">Outro ListEnum a ser comparado.</param>
            <returns>true se o Index dos dois ListEnum for o mesmo, ou se ambos forem nulos; false se os valores forem diferentes.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.ListItemEnum.op_Inequality(Benner.Tecnologia.Common.ListItemEnum,Benner.Tecnologia.Common.ListItemEnum)">
            <summary>
            Verifica se dois ListEnum possuem valores diferentes.
            </summary>
            <param name="x">Um dos ListEnum a serem comparados.</param>
            <param name="y">Outro ListEnum a ser comparado.</param>
            <returns>true se os valores dos dois ListEnum forem diferentes; false se os valores forem iguais, ou se ambos forem nulos.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.ListItems`1.GetByIndex(System.Int32)">
            <summary>
            Obtém um item da lista pelo índice
            </summary>
            <param name="index">Índice do item da lista (começando em 1)</param>
            <returns>Se encontrado, será retornado o item da lista. Caso não seja encontrado, será retornado um item com índice passado e descrição vazia (Index=index, Description=string.Empty)</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.ListItems`1.GetByDescription(System.String)">
            <summary>
            Obtém um item da lista pela Descricao
            </summary>
            <param name="description">Descrição do item da lista</param>
            <returns>Se encontrado, será retornado o item da lista. Caso não seja encontrado, será retornado um item com índice passado e descrição vazia (Index=index, Description=string.Empty)</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.ListKeyValuePairHelper.ListItemCompareByText(System.Collections.Generic.KeyValuePair{System.String,System.String},System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>Método de comparação para Sort de uma coleção de ListItem de um CheckBoxList</summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Mask.MaskDefinition">
            <summary>
            Definição da Máscara de um campo string
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Mask.MaskHelper.CreateMaskDefinitionFromDelphiMask(System.String)">
            <summary>
            Cria uma definição de máscara a partir de uma máscara do delphi
            </summary>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Mask.MaskHelper.ConvertDelphiMaskMaskToInputMaskFormatter(Benner.Tecnologia.Common.Mask.MaskDefinition)">
            <summary>
            Faz a conversão da máscara do delphi para a máscara do .net
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Mask.MaskHelper.IsMaskPersisted(System.String)">
            <summary>
            Analisa uma máscara e descobre se a máscara é persistida na base de dados ou é utilizada apenas na interface
            </summary>
            <param name="mask">A máscara a ser analisada.</param>
            <returns>True caso a mascara seja persistida na base de dados, caso contrário, false.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Mask.MaskHelper.ClearPromptCharacterFromText(System.String,System.String,System.Boolean)">
            <summary>
            Limpa os caracteres da máscara que não foram preenchidos
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Mask.MaskHelper.TrimEndMaskCharacters(System.String,System.Char[])">
            <summary>
            Limpa os caracteres da máscara não preenchidos ao final do valor
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.ParameterCollection">
            <summary>
            Coleção de parâmetros do Criteria.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.ParameterCollection.Item(System.String)">
            <summary>
            Retorna um parâmetro pelo nome.
            </summary>
            <param name="name">Nome do parâmetro que será retornado.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.ParameterCollection.Add(System.String,System.Int32)">
            <summary>
            Adiciona um parâmetro do tipo Integer na coleção de parâmetros.
            </summary>
            <param name="name">Nome do parâmetro.</param>
            <param name="value">Valor do parâmetro.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.ParameterCollection.Add(System.String,System.Nullable{System.Int32})">
            <summary>
            Adiciona um parâmetro do tipo Integer na coleção de parâmetros.
            </summary>
            <param name="name">Nome do parâmetro.</param>
            <param name="value">Valor do parâmetro.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.ParameterCollection.Add(System.String,System.String)">
            <summary>
            Adiciona um parâmetro do tipo String na coleção de parâmetros.
            </summary>
            <param name="name">Nome do parâmetro.</param>
            <param name="value">Valor do parâmetro.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.ParameterCollection.Add(System.String,System.Decimal)">
            <summary>
            Adiciona um parâmetro do tipo Decimal na coleção de parâmetros.
            </summary>
            <param name="name">Nome do parâmetro.</param>
            <param name="value">Valor do parâmetro.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.ParameterCollection.Add(System.String,System.Nullable{System.Decimal})">
            <summary>
            Adiciona um parâmetro do tipo Decimal na coleção de parâmetros.
            </summary>
            <param name="name">Nome do parâmetro.</param>
            <param name="value">Valor do parâmetro.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.ParameterCollection.Add(System.String,System.DateTime)">
            <summary>
            Adiciona um parâmetro do tipo DateTime na coleção de parâmetros.
            </summary>
            <param name="name">Nome do parâmetro.</param>
            <param name="value">Valor do parâmetro.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.ParameterCollection.Add(System.String,System.Nullable{System.DateTime})">
            <summary>
            Adiciona um parâmetro do tipo DateTime na coleção de parâmetros.
            </summary>
            <param name="name">Nome do parâmetro.</param>
            <param name="value">Valor do parâmetro.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.ParameterCollection.Add(System.String,System.Byte[])">
            <summary>
            Adiciona um parâmetro do tipo Binary na coleção de parâmetros.
            </summary>
            <param name="name">Nome do parâmetro.</param>
            <param name="value">Valor do parâmetro.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.ParameterCollection.Add(System.String,Benner.Tecnologia.Common.Handle)">
            <summary>
            Adiciona um parâmetro do tipo Handle na coleção de parâmetros.
            </summary>
            <param name="name">Nome do parâmetro.</param>
            <param name="handle">Valor do parâmetro.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.ParameterCollection.Add(System.String,System.Int64)">
            <summary>
            Adiciona um parâmetro do tipo Long na coleção de parâmetros.
            </summary>
            <param name="name">Nome do parâmetro.</param>
            <param name="value">Valor do parâmetro.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.ParameterCollection.Add(System.String,System.Nullable{System.Int64})">
            <summary>
            Adiciona um parâmetro do tipo Long na coleção de parâmetros.
            </summary>
            <param name="name">Nome do parâmetro.</param>
            <param name="value">Valor do parâmetro.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.ParameterCollection.Add(System.String,System.Nullable{System.Boolean})">
            <summary>
            Adiciona um parâmetro do tipo Boolean na coleção de parâmetros.
            </summary>
            <param name="name">Nome do parâmetro.</param>
            <param name="value">Valor do parâmetro.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.ParameterCollection.Add(System.String,System.Boolean)">
            <summary>
            Adiciona um parâmetro do tipo Boolean na coleção de parâmetros.
            </summary>
            <param name="name">Nome do parâmetro.</param>
            <param name="value">Valor do parâmetro.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.RadioItemEnum.op_Equality(Benner.Tecnologia.Common.RadioItemEnum,Benner.Tecnologia.Common.RadioItemEnum)">
            <summary>
            Verifica se dois RadioItemEnum possuem o mesmo valor.
            </summary>
            <param name="x">Um dos RadioItemEnum a ser comparado.</param>
            <param name="y">Outro RadioItemEnum a ser comparado.</param>
            <returns>true se o valor dos dois RadioItemEnum for o mesmo, ou se ambos forem nulos; false se os valores forem diferentes.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.RadioItemEnum.op_Inequality(Benner.Tecnologia.Common.RadioItemEnum,Benner.Tecnologia.Common.RadioItemEnum)">
            <summary>
            Verifica se dois RadioItemEnum possuem valores diferentes.
            </summary>
            <param name="x">Um dos RadioItemEnum a ser comparado.</param>
            <param name="y">Outro RadioItemEnum a ser comparado.</param>
            <returns>true se os valores dos dois RadioItemEnum forem diferentes; false se os valores forem iguais, ou se ambos forem nulos.</returns>
        </member>
        <member name="F:Benner.Tecnologia.Common.RequiredVersion.RequiredDBVersion">
            <summary>
            Versão mínima requerida da base de dados
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.RequiredVersion.BefRequiredVersion">
            <summary>
            Versão mínima requerida do BEF (pacote do server files)
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Branch.Clone">
            <summary>
            Clona a instância da filial
            </summary>
            <returns>Novo objeto filial</returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.Branch.Current">
            <summary>
            Recupera a filial selecionada para o usuário atual.
            "null" para Todas as filiais.
            </summary>
            <returns>Instância da filial atual ou null para todas as filias</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Branch.GetCurrentBranch(System.String)">
            <summary>
            Obtém a filial corrente
            </summary>
            <param name="systemName">Nome da instância do sistema.</param>>
            <returns>Instância da filial atual ou null para todas as filias</returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.Company.Current">
            <summary>
            Recupera a empresa selecionada, para o usuário atual.        
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Company.GetEntityCurrentCompany(System.String)">
            <summary>
            Obtém a empresa corrente da tabela informada. Se a tabela estiver cadastrada em "Tabelas com empresa mestre" irá retornar o handle da empresa mestre.
            </summary>
            <param name="entityDefinitionName">Nome da definição de entidade/tabela.</param>>
            <returns>Objeto do tipo Handle</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.TabItemEnum.op_Equality(Benner.Tecnologia.Common.TabItemEnum,Benner.Tecnologia.Common.TabItemEnum)">
            <summary>
            Verifica se TabItemEnum possuem o mesmo Index.
            </summary>
            <param name="x">Um dos ListEnum a serem comparados.</param>
            <param name="y">Outro ListEnum a ser comparado.</param>
            <returns>true se o Index dos dois ListEnum for o mesmo, ou se ambos forem nulos; false se os valores forem diferentes.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.TabItemEnum.op_Inequality(Benner.Tecnologia.Common.TabItemEnum,Benner.Tecnologia.Common.TabItemEnum)">
            <summary>
            Verifica se dois TabItemEnum possuem valores diferentes.
            </summary>
            <param name="x">Um dos ListEnum a serem comparados.</param>
            <param name="y">Outro ListEnum a ser comparado.</param>
            <returns>true se os valores dos dois ListEnum forem diferentes; false se os valores forem iguais, ou se ambos forem nulos.</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.TransitoryData">
            <summary>
            Representa um dicionário Name Value (onde a chave é String e o valor é Object), específico para dados transitórios para operações.
            É utilizado para trafegar dados entre camadas durante operações.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.TransitoryData.MergeWith(Benner.Tecnologia.Common.TransitoryData,System.Func{System.String,System.Boolean})">
            <summary>
            Atualiza a instância atual do TransitoryData com os dados do TransitoryData passado como parâmetro, atualizando os que já existem e adicionando os que não existem.
            </summary>
            <param name="transitoryData">TransitoryData cujos valores serão utilizados no Merge</param>
            <param name="mergeCondition">Condição de merge, o parâmetro string é a chave do dicionário que será processada no merge</param>
        </member>
        <member name="P:Benner.Tecnologia.Common.TransitoryData.FilterWhereClause">
            <summary>
            WhereClause para ser utilizado no filtro de grid do WES.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.TransitoryData.EntityExpression">
            <summary>
            Expressão utilizada para realizar a tradução para consultar pelo BEF
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.TransitoryData.LogicalEntityName">
            <summary>
            Nome da entidade lógica que está sendo utilizada na BusinessEntity
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.TransitoryData.KeepEntityContext">
            <summary>
            Mantém o contexto para a emissão de relatórios
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.TransitoryData.DelphiDataSetPtr">
            <summary>
            Ponteiro para o TEntityDataSet (Delphi) que está manipulando a entidade
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.TransitoryData.SavingWorkflowDraft">
            <summary>
            Informa se o que está sendo salvo no momento é um rascunho do Workflow.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.TransitoryData.DisableBusinessScript">
            <summary>
            Se deve ou não desativar a regra de negócio executada pela BusinessEntity. Deve ser visível só para a Common e seus amigos
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.TransitoryData.AutoFillDefaultValues">
            <summary>
            Define se a entidade de negócio deve preencher automaticamente os campos com valor padrão configurado no Builder. Deve ser visível só para a Common e seus amigos
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.TransitoryData.AsyncProcesses">
            <summary>
            São informações de processos asíncronos disparados nas camadas.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.TransitoryData.SelectedEntitiesHandles">
            <summary>
            São informações de processos asíncronos disparados nas camadas.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.TransitoryData.BDebuggerTrace">
            <summary>
            Log do Provider.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.TransitoryData.GenerateTrace">
            <summary>
            Indica se deve gerar trace para (Glimpse).
            </summary>
            <remarks>O valor padrão é true.</remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.TransitoryData.ConfirmationAccepted">
            <summary>
            Indica se o mecanismo de RequestConfirmation deve ser ignorado ou não.
            </summary>
            <remarks>O valor padrão é true.</remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.TransitoryData.OutputParameters">
            <summary>
            Representa os parâmetros de saída (retorno).
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.TransitoryData.BreadcrumbEntityHandleList">
            <summary>
            Representa os parâmetros de saída (retorno).
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.TransitoryData.TransitoryVars">
            <summary>
            Informações que podem ser manipuladas pelo desenvolvedor.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.TransitoryData.SessionVars">
            <summary>
            Informações que podem ser manipuladas pelo desenvolvedor.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.TransitoryData.CheckFiltersAndAuthorization">
            <summary>
            Indica se deve ser validado autorização de papéis e filtros de registros
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.TransitoryData.OutputMessage">
            <summary>
            Mensagens registradas durante uma operação da entidade (Save, Delete, etc.).
            </summary>
            <remarks>
            A interação com esta informação se dá através da instância da entidade, por isso sua visibilidade é "internal".
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.TransitoryData.LayerWhichStartedOperation">
            <summary>
            Registro de qual camada iniciou a operação da entidade (Save, Delete, etc.).
            </summary>
            <remarks>
            Esta informação é para uso interno da ferramenta, por isso sua visibilidade é "internal".
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.TransitoryData.GetConfirmationAccepted(Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Retorna o mecanismo de RequestConfirmation dos dados transitórios.
            </summary>
            <param name="transitoryData">Dados transitórios.</param>
            <returns>True ou False</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.TransitoryData.GetOutputParameters(Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Retorna os parâmetros de saída contido nos dados transitórios.
            </summary>
            <param name="transitoryData">Dados transitórios.</param>
            <returns>OutputParameters</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.BitFieldDefinition">
            <summary>
            Representa o campo tipo Bit do Builder.
            </summary>    
        </member>
        <member name="M:Benner.Tecnologia.Common.BitFieldDefinition.ToUI(System.Object)">
            <summary>Converter para apresentação</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.BitFieldDefinition.FromUI(System.String)">
            <summary>Converter do formato de apresentação para o tipo nativo</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.BitFieldDefinition.IsOptionChecked(System.Int32,System.Int32)">
            <summary>
            Verifica se determinada opção está marcada.
            </summary>
            <param name="optionValue">Valor da opção.</param>
            <param name="fieldValue">Valor do campo podendo conter várias opções.</param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.BitFieldDefinition.CheckOption(System.Int32,System.Int32)">
            <summary>
            Marca determinada opção.
            </summary>
            <param name="optionValue">Valor da opção.</param>
            <param name="fieldValue">Valor do campo podendo conter várias opções.</param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.BitFieldDefinition.UncheckOption(System.Int32,System.Int32)">
            <summary>
            Desmarca determinada opção.
            </summary>
            <param name="optionValue">Valor da opção.</param>
            <param name="fieldValue">Valor do campo podendo conter várias opções.</param>
            <returns></returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.PathFieldDefinition.Required">
            <summary>
            Campo traduzido é sempre opcional.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.PathFieldDefinition.ResultField">
            <summary>Campo de resultado da tradução.</summary>
            <remarks>
            É necessário possuir o campo de resultado para utilizar na tradução a formatação do valor conforme as caracteristicas do campo alvo da tradução.
            Busca sob demanda a definição atual do campo de resultado
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.PathFieldDefinition.ResolvePath">
            <summary>Processa o Path para identificar o nome da definição de entidade e di campo de resultado</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.PathFieldDefinition.Path">
            <summary>Caminho de tradução do campo</summary>
            <remarks>Segue a sintaxe CAMPOMESTRE>NOMETABELA.CAMPORESULTADO para tradução de campos. Por exemplo, "ESTADO>ESTADOS.PAIS>PAISES.NOME".</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.PathFieldDefinition.ToUI(System.Object)">
            <summary>Converter para apresentação</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.PathFieldDefinition.FromUI(System.String)">
            <summary>Converter do formato de apresentação para o tipo nativo</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.PathFieldDefinition.GetPaths(System.String)">
            <summary>Obtém uma lista de sintaxes de campo Traduzido contidas em um determinado Path</summary>
            <param name="path">Path com a expressão de um campo Traduzido</param>
            <returns>
            Retorna uma lista de Matches encontradas no Path informado por parâmetro. 
            Utilize as constantes PathFieldSyntaxMaster, PathFieldSyntaxTable e PathFieldSyntaxField  
            para acessar as informações separadamente nos grupos de um Match.
            </returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.PathFieldDefinition.PathFieldSyntax">
            <summary>
            Expressão regular que identifica a sintaxe de um item de campo traduzido em uma expressão.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.PathFieldDefinition.FullPathFieldSyntax">
            <summary>
            Expressão regular que valida a sintaxe por completo de um caminho de campo traduzido.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.TabItem.op_Implicit(Benner.Tecnologia.Common.TabItem)~System.String">
            <summary>
            Converte um ListItem em sua representação textual
            </summary>
            <param name="listItem"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.TabItem.ToString">
            <summary>
            Retorna a representação textual de um ListItem
            </summary>
            <returns></returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.FunctionContext">
            <summary>
            Enumerador que indica o escopo de execução de uma função
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.FunctionContext.Table">
            <summary>Identifica uma função que não exige um registro posicionado.</summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.FunctionContext.Record">
            <summary>Identifica uma função que age sobre um registro posicionado.</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.ListItemCollectionHelper.ListItemCompareByText(System.Web.UI.WebControls.ListItem,System.Web.UI.WebControls.ListItem)">
            <summary>Método de comparação para Sort de uma coleção de ListItem de um CheckBoxList</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerIdentity.UserName">
            <summary>
            O nome do usuário, proveniente do Thread.CurrentPrincipal.Identity.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerIdentity.IsWrapperMode">
            <summary>
            WrapperMode, proveniente do Thread.CurrentPrincipal.Identity.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerIdentity.LogOnContextId">
            <summary>
            Recupera o identificador do contexto do Logon do usuário.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerIdentity.Company">
            <summary>
            Recupera o identificador da empresa selecionada.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerIdentity.Branch">
            <summary>
            Recupera o identificador da filial selecionada.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerIdentity.Idiom">
            <summary>
            Recupera o Handle do idioma corrente.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerIdentity.UserHandle">
            <summary>
            Recupera o handle do usuário em Z_GRUPOUSUARIOS
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.BennerIdentity.#ctor(System.String,System.String,System.Guid,Benner.Tecnologia.Common.Handle,Benner.Tecnologia.Common.Handle,Benner.Tecnologia.Common.Handle)">
            <summary>
            Construtor
            </summary>
            <param name="name">O nome do usuário.</param>
            <param name="authenticationtype">O tipo de autenticação.</param>
            <param name="contextId">O identificador do contexto do usuário.</param>
            <param name="company">O identificador da empresa selecionada.</param>
            <param name="branch">O identificador da filial selecionada.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.BennerIdentity.SetCompanyAndBranch(Benner.Tecnologia.Common.Handle,Benner.Tecnologia.Common.Handle)">
            <summary>
            Definir empresa e filial
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.BennerIdentity.SetUserHandle(Benner.Tecnologia.Common.Handle)">
            <summary>
            Definir o handle do usuários
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.BennerIdentity.SetIdiom(Benner.Tecnologia.Common.Handle)">
            <summary>
            Definir o handle do usuários
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.BennerLogOnInfo">
            <summary>
            Trafega informações do logon do usuário que são comum tanto na camada de apresentação quanto no serviço de entidades.
            </summary>    
        </member>
        <member name="M:Benner.Tecnologia.Common.BennerLogOnInfo.#ctor(System.Guid,Benner.Tecnologia.Common.Handle,Benner.Tecnologia.Common.Handle,Benner.Tecnologia.Common.Handle)">
            <summary>
            
            </summary>
            <param name="logOnContextId">O identificador do contexto do usuário.</param>
            <param name="company">O identificador da empresa selecionada.</param>
            <param name="branch">O identificador da filial selecionada.</param>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerLogOnInfo.LogOnContextId">
            <summary>
            Recupera o identificador do contexto do Logon do usuário.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerLogOnInfo.Company">
            <summary>
            Recupera o identificador da empresa selecionada.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerLogOnInfo.Idiom">
            <summary>
            Recupera o Handle do idioma.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerLogOnInfo.Branch">
            <summary>
            Recupera o identificador da filial selecionada.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.BennerLogOnInfoStorage">
            <summary>
            
            </summary>
            <remarks>
            Esta clase foi baseada na classe UserCredentials.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.BennerLogOnInfoStorage.SaveBennerLogOnInfo(System.String,Benner.Tecnologia.Common.BennerLogOnInfo)">
            <summary>
            Armazena as informações do Logon de Usuário.
            </summary>
            <param name="userName"></param>
            <param name="bennerLogOnInfo"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.BennerLogOnInfoStorage.RecoverBennerLogOnInfo(System.String)">
            <summary>
            Obtém as informações do Logon de Usuário.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.SecureStorageBase.IsSessionEnabled">
            <summary>
            Verifica se a sessão do Asp.Net está disponível
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.SecureStorageBase.GetDataIdHash(System.String,System.String)">
            <summary>
            Obtém um hash de um identificador uníco para o dado.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.FireAndForget">
            <summary>
            Simplifica a forma de um método executar em um modelo "Fire and Forget", usando outra Thread, com TPL
            </summary>
            <remarks>
            FireAndForget.Run(SomeMethod);  // Ignore error
            FireAndForget.Run(SomeMethod, e => Log.Warn("Whoops", e));  // Log error
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.VersionValidator.ChecksumFileCache.Load(System.String)">
            <summary>
            Carrega o cache salvo no arquivo, se existir. Se não existir não faz nada.
            </summary>
            <param name="pathFileCache">Path relative from Workdir</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.VersionValidator.FileInfoCache.FromCsv(System.String)">
            <summary>
            CSV Format FileName,FullName,FileVersion,FileLength,FileLastWritTime, FileDescription
            FileLastWritTime é no formato de DateTime.ToString('O')
            </summary>
            <param name="lineCsv">linha separada por ','</param>
            <returns>FileInfoCache or null for exceptions</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.VisualizationItens`1.Exists(System.String)">
            <summary>
            Verifica se existe nos metadados
            </summary>
            <param name="name">Nome</param>
            <returns>true se existir</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.VirtualAssistant.Card">
            <summary>
            Classe para montagem de um cartão para uso de Assistentes Virtuais.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.VirtualAssistant.Card.Title">
            <summary>
            Título do cartão.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.VirtualAssistant.Card.Subtitle">
            <summary>
            Subtítulo do cartão.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.VirtualAssistant.Card.Content">
            <summary>
            Texto de corpo para o cartão.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.VirtualAssistant.Card.Image">
            <summary>
            Imagem para o cartão.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.VirtualAssistant.Image">
            <summary>
            Classe para montagem de imagem para uso de Assistentes Virtuais.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.VirtualAssistant.Image.#ctor(System.String)">
            <summary>
            Constrói imagem para ser utilizada por Assistente Virtual a partir do link para a imagem.
            </summary>
            <param name="imageURI">Link para a imagem.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.VirtualAssistant.Image.#ctor(Benner.Tecnologia.Common.Components.ImageLinkDefinition)">
            <summary>
            Constrói imagem para ser utilizada por Assistente Virtual a partir do link para a imagem.
            </summary>
            <param name="imageURI">Link para a imagem.</param>
        </member>
        <member name="P:Benner.Tecnologia.Common.VirtualAssistant.Image.ImageURI">
            <summary>
            Link para a imagem a ser exibida no chat.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.VirtualAssistant.Link">
            <summary>
            Classe para montagem de link para uso de Assistentes Virtuais.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.VirtualAssistant.Link.#ctor(System.String,System.String)">
            <summary>
            Constrói link para ser utilizada por Assistente Virtual a partir da URL e nome do destino.
            </summary>
            <param name="linkURI">Link para a imagem.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.VirtualAssistant.Link.#ctor(System.String)">
            <summary>
            Constrói link para ser utilizada por Assistente Virtual a partir da URL.
            </summary>
            <param name="linkURI">Link para a imagem.</param>
        </member>
        <member name="P:Benner.Tecnologia.Common.VirtualAssistant.Link.URI">
            <summary>
            Link a ser aberto quando o usuário clicar.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.VirtualAssistant.Link.Name">
            <summary>
            Nome do link referenciado.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSML">
            <summary>
            Classe para montagem de texto interpretado para uso em funcionalidades text-to-speech.
            Speech Synthesis Markup Language.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSML.#ctor(System.String,Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLElementBase[])">
            <summary>
            Constrói SSML com texto a ser interpretado e elementos SSML a serem traduzidos.
            </summary>
            <param name="speak"></param>
            <param name="elements"></param>
        </member>
        <member name="P:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSML.Speak">
            <summary>
            Texto a ser interpretado como text-to-speech.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSML.Elements">
            <summary>
            Elementos SSML a serem traduzidos.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSML.GetSpeakTag">
            <summary>
            Efetua montagem de tag speak de acordo com os elementos SSML adicionados.
            </summary>
            <returns>Tag speak contendo todos os elementos SSML traduzidos de acordo com as tags.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSML.GetSimpleText">
            <summary>
            Efetua montagem de texto simples de acordo com os elementos SSML adicionados.
            </summary>
            <returns>Texto simples contendo todos os elementos SSML traduzidos apenas com seus valores, sem tags.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSML.Add(System.String)">
            <summary>
            Adiciona texto ao final do texto.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSML.Add(Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLElementBase)">
            <summary>
            Adiciona um elemento SSML ao final do texto.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLBreakElement">
            <summary>
            Elemento SSML para criar intervalo na fala.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLBreakElement.#ctor(System.Decimal,System.String)">
            <summary>
            Cria um elemento SSML de pausa com tempo e nome.
            </summary>
            <param name="seconds">Tempo de intervalo da pausa, em segundos.</param>
            <param name="name">Nome do elemento SSML, de acordo com a nomenclatura declarada na propriedade Speak do SSML que contem este elemento.</param>
        </member>
        <member name="T:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLContentReplacer">
            <summary>
            A partir de uma lista de conteúdos a serem substituídos, permite efetuar a substituição.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLContentReplacer.Replace(System.String)">
            <summary>
            Recebe um conteúdo de entrada para efetuar a substituição dos conteúdos encontrados.
            </summary>
            <param name="content">Conteúdo a ser traduzido, contendo as marcações dos elementos SSML no format :NOME.</param>
            <returns>Conteúdo traduzido, substituindo todos os elementos SSML por seu respectivo conteúdo.</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLContentToReplace">
            <summary>
            Conteúdo a ser substituído em tradução de SSML.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLContentToReplace.Index">
            <summary>
            Índice onde o conteúdo inicia.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLContentToReplace.Length">
            <summary>
            Tamanho do conteúdo a ser substituído.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLContentToReplace.Content">
            <summary>
            Conteúdo substituto.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLElement">
            <summary>
            Elemento SSML para indicar forma de interpretação de text-to-speech no elemento particular.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLElement.#ctor(Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLElementType,System.String,System.String)">
            <summary>
            Cria um elemento de pronúncia especial SSML com tipo, nome e texto.
            </summary>
            <param name="type">Tipo de pronúncia do texto.</param>
            <param name="name">Nome do elemento SSML, de acordo com a nomenclatura declarada na propriedade Speak do SSML que contém este elemento.</param>
            <param name="text">Texto que o SSML possuirá.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLElement.#ctor(Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLElementType,System.String,Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLElementBase)">
            <summary>
            Cria um elemento de pronúncia especial SSML com tipo, nome e elemento.
            </summary>
            <param name="type">Tipo de pronúncia do texto.</param>
            <param name="name">Nome do elemento SSML, de acordo com a nomenclatura declarada na propriedade Speak do SSML que contém este elemento.</param>
            <param name="element">Elemento que o SSML possuirá.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLElement.#ctor(Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLElementType,System.String,Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLElementBase[])">
            <summary>
            Cria um elemento de pronúncia especial SSML com tipo, nome e múltiplos elementos.
            </summary>
            <param name="type">Tipo de pronúncia do texto.</param>
            <param name="name">Nome do elemento SSML, de acordo com a nomenclatura declarada na propriedade Speak do SSML que contém este elemento.</param>
            <param name="elements">Elementos que o SSML possuirá.</param>
        </member>
        <member name="P:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLElement.Type">
            <summary>
            Tipo de pronúncia SSML.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLElementBase">
            <summary>
            Base de elementos SSML.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLElementBase.Name">
            <summary>
            Nome do elemento SSML.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLElementBase.Children">
            <summary>
            Valor do elemento SSML.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLElementBase.SayAsTag">
            <summary>
            Montagem da tag say-as, de acordo com o tipo e o valor do elemento SSML.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLElementBase.ToString">
            <summary>
            Texto do conteúdo SSML, sem formatação.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLElementBase.Add(System.String)">
            <summary>
            Adiciona texto ao final do elemento SSML.
            </summary>
            <param name="text">Texto a ser adicionado.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLElementBase.Add(Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLElementBase)">
            <summary>
            Adiciona um elemento SSML ao final dos existentes.
            </summary>
            <param name="element">Elemento SSML a ser adicionado.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLElementBase.AddRange(System.Collections.Generic.IEnumerable{Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLElementBase})">
            <summary>
            Adiciona um conjunto de elementos SSML ao final dos existentes.
            </summary>
            <param name="elements">Conjunto de elementos SSML a serem adicionados.</param>
        </member>
        <member name="T:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLElementCollection">
            <summary>
            Coleção de elementos SSML.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLElementCollection.Item(System.String)">
            <summary>
            Retorna um elemento SSML pelo nome.
            </summary>
            <param name="name">Nome do elemento SSML que será retornado.</param>
            <returns>Elemento SSML selecionado ou elemento padrão, caso não encontrado elemento pelo nome.</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLElementType">
            <summary>
            Tipos de elementos SSML. De acordo com o tipo do elemento o texto será interpretado de forma diferente em text-to-speech.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLElementType.Characters">
            <summary>
            O elemento SSML é falado de acordo com os seus caracteres.
            Pode ser utilizado para números e letras.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLElementType.Date">
            <summary>
            O elemento SSML é falado como uma data.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLElementType.Cardinal">
            <summary>
            O elemento SSML é falado como um número cardinal.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLElementType.Ordinal">
            <summary>
            O elemento SSML é falado como um número ordinal.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLEmphasisElement">
            <summary>
            Elemento SSML para dar ênfase a determinada seção do conteúdo.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLEmphasisElement.#ctor(Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLEmphasisType,System.String,System.String)">
            <summary>
            Cria um elemento SSML de ênfase com tipo, nome e texto.
            </summary>
            <param name="type">Tipo do elemento SSML a ser criado.</param>
            <param name="name">Nome do elemento SSML, de acordo com a nomenclatura declarada na propriedade Speak do SSML que contem este elemento.</param>
            <param name="text">Texto que o SSML possuirá.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLEmphasisElement.#ctor(Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLEmphasisType,System.String,Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLElementBase)">
            <summary>
            Cria um elemento SSML de ênfase com tipo, nome e elemento.
            </summary>
            <param name="type">Tipo do elemento SSML a ser criado.</param>
            <param name="name">Nome do elemento SSML, de acordo com a nomenclatura declarada na propriedade Speak do SSML que contem este elemento.</param>
            <param name="element">Elemento que o SSML possuirá.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLEmphasisElement.#ctor(Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLEmphasisType,System.String,Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLElementBase[])">
            <summary>
            Cria um elemento SSML de ênfase com tipo, nome e múltiplos elementos.
            </summary>
            <param name="type">Tipo do elemento SSML a ser criado.</param>
            <param name="name">Nome do elemento SSML, de acordo com a nomenclatura declarada na propriedade Speak do SSML que contem este elemento.</param>
            <param name="elements">Elementos que o SSML possuirá.</param>
        </member>
        <member name="P:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLEmphasisElement.Type">
            <summary>
            Tipo do elemento SSML.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLEmphasisType.Strong">
            <summary>
            Ênfase forte na pronúncia.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLEmphasisType.Moderate">
            <summary>
            Ênfase moderada na pronúncia.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLEmphasisType.None">
            <summary>
            Sem ênfase pronúncia.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.VirtualAssistant.SSML.SSMLEmphasisType.Reduced">
            <summary>
            Ênfase reduzida na pronúncia.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.VirtualAssistant.Suggestion">
            <summary>
            Classe que representa uma sugestão de entrada para Assistente Virtual.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.VirtualAssistant.Suggestion.#ctor(System.String)">
            <summary>
            Constrói uma sugestão com o conteúdo que pode ser enviado para Assistente Virtual.
            </summary>
            <param name="text">Conteúdo da sugestão.</param>
        </member>
        <member name="P:Benner.Tecnologia.Common.VirtualAssistant.Suggestion.Text">
            <summary>
            Conteúdo de uma sugestão.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.VirtualAssistant.Suggestions">
            <summary>
            Classe para montagem de sugestões para uso para Assistentes Virtuais.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.VirtualAssistant.Suggestions.#ctor">
            <summary>
            Constrói lista de sugestões vazia para uso de Assistente Virtual.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.VirtualAssistant.Suggestions.#ctor(Benner.Tecnologia.Common.VirtualAssistant.Suggestion)">
            <summary>
            Constrói lista e adiciona um item de sugestão para uso de Assistente Virtual.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.VirtualAssistant.Suggestions.#ctor(Benner.Tecnologia.Common.VirtualAssistant.Suggestions)">
            <summary>
            Constrói lista e preenche sugestões para uso de Assistente Virtual.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.VirtualAssistant.Suggestions.#ctor(Benner.Tecnologia.Common.VirtualAssistant.Suggestion[])">
            <summary>
            Constrói lista e preenche sugestões para uso de Assistente Virtual.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.VirtualAssistant.Suggestions.Item(System.Int32)">
            <summary>
            Gerencia sugestões da lista.
            </summary>
            <param name="index">Índice da lista.</param>
            <returns>Item de sugestão.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.VirtualAssistant.Suggestions.Add(Benner.Tecnologia.Common.VirtualAssistant.Suggestion)">
            <summary>
            Adiciona uma sugestão à lista.
            </summary>
            <param name="item">Item de sugestão.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.VirtualAssistant.Suggestions.AddRange(System.Collections.Generic.IEnumerable{Benner.Tecnologia.Common.VirtualAssistant.Suggestion})">
            <summary>
            Adiciona uma coleção de sugestões à lista.
            </summary>
            <param name="items">Coleção de sugestões.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.VirtualAssistant.Suggestions.Clear">
            <summary>
            Limpa a lista de sugestões.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.VirtualAssistant.Suggestions.Contains(Benner.Tecnologia.Common.VirtualAssistant.Suggestion)">
            <summary>
            Verifica se uma sugestão já está na lista.
            </summary>
            <param name="item">Item de sugestão.</param>
            <returns>Retora se o item já está na lista.</returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.VirtualAssistant.Suggestions.Count">
            <summary>
            Quantidade de itens na lista.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.VirtualAssistant.Suggestions.IndexOf(Benner.Tecnologia.Common.VirtualAssistant.Suggestion)">
            <summary>
            Verifica o índice na lista de um item especificado.
            </summary>
            <param name="item">Item a ser buscado.</param>
            <returns>Índice do item.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.VirtualAssistant.Suggestions.Insert(System.Int32,Benner.Tecnologia.Common.VirtualAssistant.Suggestion)">
            <summary>
            Insere um item na lista em um índice especificado.
            </summary>
            <param name="index">Índice para inserir o item.</param>
            <param name="item">Item de sugestão.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.VirtualAssistant.Suggestions.Remove(Benner.Tecnologia.Common.VirtualAssistant.Suggestion)">
            <summary>
            Remove um item da lista.
            </summary>
            <param name="item">Item de sugestão a ser removido.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.VirtualAssistant.Suggestions.RemoveIndex(System.Int32)">
            <summary>
            Remove um item da lista de uma posição especificada.
            </summary>
            <param name="index">O item de sugestão a ser removido.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.VirtualAssistant.Suggestions.Sort">
            <summary>
            Ordena os itens da lista em ordem alfabética.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.WhereClauseHelper.RegexParametro">
            <summary>
            Expressao Regular padrão para identificar um ":PARAMETRO_1"
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.WhereClauseHelper.RegexArrobaCampo">
            <summary>
            Expressao Regular padrão para identificar um "@CAMPO(  )"
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.WhereClauseHelper.RegexArrobaTilCampo">
            <summary>
            Expressao Regular padrão para identificar um "@~CAMPO(  )"
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.WhereClauseHelper.RegexANomeCampoIgualValorCampo">
            <summary>
            Expressão Regular padrão para identificar o A.[NOMECAMPO]=[VALORCAMPO]
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.WhereClauseHelper.RegexANomeCampoIgualNomeParametro">
            <summary>
            Expressão Regular padrão para identificar o A.[NOMECAMPO]=:[NOMEDOPARAMETRO]
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.WhereClauseHelper.RegexArrobaRastro">
            <summary>
            Expressao Regular padrao para identificar um "@RASTRO(nome_da_tabela)"
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.WhereClauseHelper.RegexArrobaTabela">
            <summary>
            Expressao Regular padrao para identificar um "@TABELA(nome_da_tabela)"
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.WhereClauseHelper.RegexArrobaFiltro">
            <summary>
            Expressao Regular padrao para identificar um "@FILTRO(nome_do_campo)"
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.WhereClauseHelper.TranslateArrobaRastroFunctions(Benner.Tecnologia.Common.WhereClause,System.Collections.Generic.List{Benner.Tecnologia.Common.BreadcrumbEntityHandle})">
            <summary>
            Este método traduz @RASTRO e @TABELA
            </summary>
            <param name="whereClause">Cláusula que será traduzida.</param>
            <param name="breadCrumbList">Lista de valores do BreadCrumb, para montar os parâmetros no WhereClause de retorno.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.WhereClauseHelper.InternalTranslateArrobaRastroFunction(Benner.Tecnologia.Common.WhereClause,System.Collections.Generic.List{Benner.Tecnologia.Common.BreadcrumbEntityHandle},System.String,System.Object@,System.Text.RegularExpressions.Match)">
            <summary>
            Método interno para tradução de funções @RASTRO e @TABELA
            </summary>
            <param name="whereClause">A cláusula where.</param>
            <param name="breadCrumbList">Lista de valores do BreadCrumb.</param>
            <param name="fieldName">O nome do campo.</param>
            <param name="fieldValue">O valor do campo.</param>
            <param name="textFound">O texto encontrado.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.WhereClauseHelper.ContainsArrobaCampo(System.String)">
            <summary>
            Verifica se a expressão WHERE contém @CAMPO ou @~CAMPO.
            </summary>
            <param name="whereClause">Expressão WHERE a ser verificada.</param>
            <returns>True se contém @CAMPO ou @~CAMPO; false caso contrário.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.WhereClauseHelper.BuildSuggestedValuesFromWhereClause(Benner.Tecnologia.Common.WhereClause,Benner.Tecnologia.Common.EntityDefinition)">
            <summary>
            Retorna um dicionário de valores contendo os dados de uma cláusula where já traduzida,
            Recuperando valores da própria cláusula string A.[NOMECAMPO]=[VALORCAMPO]
            e tabém de parâmetros A.[NOMECAMPO]=:[NOMEDOPARAMETRO].
            </summary>
            <param name="translatedWhereClause">Cláusula where previamente traduzida.</param>
            <param name="targetDefinition">Definição da entidade que receberá os valores sugeridos.</param>
            <returns>Dicionário com valores sugeridos.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.WhereClauseHelper.TranslateDependencyFields(Benner.Tecnologia.Common.AssociationFieldDefinition,Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.NameValueDictionary,Benner.Tecnologia.Common.NameValueDictionary)">
            <summary>
            Este método descobre os campos de dependência de um AssociationFieldDefinition, e, caso for necessário, resolve o resultado adiciona no dicionário, isso poderá ocorrer recursivamente.
            </summary>
            <param name="associationFieldDefinition">A definição do campo lookup, no qual se deseja resolver os campos de dependência.</param>
            <param name="targetDefinition">A definição da entidade na qual se deseja sugerir valores.</param>
            <param name="sourceDictionary">Dicionário contendo campos já traduzidos por cláusula.</param>
            <param name="dictionaryToFill">Dicionário contendo valores sugeridos, este dicionário será incrementado com os campos de dependência.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.WhereClauseHelper.BuildNameValueCollectionFromWhereClause(Benner.Tecnologia.Common.WhereClause)">
            <summary>
            Monta um dicionário de nome e valor, considerando inclusive parâmetros
            </summary>
            <param name="translatedWhereClause"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.WhereClauseHelper.TranslateArrobaFiltro(System.String)">
             <summary>
            Converte o FILTRO['CAMPO'] para @FILTRO(CAMPO)
             </summary>
             <param name="where">Cláusula where</param>
             <returns>Cláusula traduzida</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.WhereClauseHelper.BuildTextWhereClause(Benner.Tecnologia.Common.Criteria)">
            <summary>
            Monta uma cláusula where com base em um critério de seleção
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.WhereClauseHelper.ConcatWhereClause(System.String,System.String)">
            <summary>
            Concatena duas cláusulas where
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.WhereClauseHelper.BuildSearchWhere(Benner.Tecnologia.Common.FieldDefinition,System.String,System.String)">
            <summary>
            Monta o Where contendo o termo de pesquisa inputado pelo usuário
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.DebugOptionsHelper">
            <summary>
            Classe que auxilia a manipulação de opções de depuração.
            Deve ser utilizada apenas em testes automatizados ou em depurações, nunca em ambiente de produção.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DebugOptionsHelper.SetDebugOption(System.String,System.Object)">
            <summary>
            Atribui um objeto ao dicionário de opções de depuração.
            </summary>
            <param name="key">Chave.</param>
            <param name="value">Valor.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.DebugOptionsHelper.GetDebugOption(System.String)">
            <summary>
            Recupera um objeto do dicionário de opções de depuração.
            </summary>
            <param name="key">Chave</param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.DebugOptionsHelper.RemoveDebugOption(System.String)">
            <summary>
            Remove um objeto do dicionário.
            </summary>
            <param name="key">Chave</param>
        </member>
        <member name="P:Benner.Tecnologia.Common.DebugOptionsHelper.DebugOptions">
            <summary>
            Dicionário contendo as opções de depuração.
            </summary>
            <remarks>
            Para atribuir, recuperar ou remover, utilze os métodos SetDebugOption, GetDebugOption ou RemoveDebugOption, respectivamente.
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityDefinitionGeneratorException.Errors">
            <summary>
            Lista de erros ocorridos
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.FileFieldDefinition.ToDBValue(System.Object)">
            <summary>Converte para um tipo do Builder.</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.FileFieldDefinition.FromDBValue(System.Object)">
            <summary>Converte para um tipo do .NET.</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.FileFieldDefinition.ToUI(System.Object)">
            <summary>Converter para apresentação</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.FileFieldDefinition.FromUI(System.String)">
            <summary>Converter do formato de apresentação para o tipo nativo</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.ImageFieldDefinition.ToDBValue(System.Object)">
            <summary>Converte para um tipo do Builder.</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.ImageFieldDefinition.FromDBValue(System.Object)">
            <summary>Converte para um tipo do .NET.</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.ImageFieldDefinition.ToUI(System.Object)">
            <summary>Converter para apresentação</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.ImageFieldDefinition.FromUI(System.String)">
            <summary>Converter do formato de apresentação para o tipo nativo</summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.ImageThumbnailSize">
            <summary>
            Enumerador para a definição do tamanho de uma miniatura de uma imagem
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.DynamicDefinitionsHelper">
            <summary>
            Classe que fornece definições dinâmicas.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DynamicDefinitionsHelper.CreateEntityViewDefinition(System.String)">
            <summary>Obter a definição (metadados) de EntityViewRecord</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DynamicDefinitionsHelper.CreateThinEntityViewDefinition(System.String)">
            <summary>
            Fornece a definição dinâmica (ou seja, não persistida, omitindo HANDLE e NOME) e enxuta (ou seja, omitindo o campo DEFINITION) da tabela W_ENTIDADEVISOES, de determinado sistema.
            </summary>
            <param name="systemInstanceName">O identificador do sistema no qual esta definição representa.</param>
            <remarks>
            Atenção: A definição retornada considera que o EntitySource é do tipo TableSource.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.DynamicDefinitionsHelper.CreateEntityDefinition(System.String)">
            <summary>
            Este método cria dinamicamente uma instância de EntityDefinition, que representa o metadados de W_ENTIDADES.
            </summary>
            <param name="systemInstanceName">Identificador da instância do sistema.</param>
            <returns>Uma instância de EntityDefinition, que representa o metadados de W_ENTIDADES.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.DynamicDefinitionsHelper.CreateThinEntityDefinition(System.String)">
            <summary>
            Fornece a definição dinâmica (ou seja, não persistida, omitindo HANDLE e NOME) e enxuta (ou seja, omitindo o campo DEFINITION) da tabela W_ENTIDADES, de determinado sistema.
            </summary>
            <param name="systemInstanceName">O identificador do sistema no qual esta definição representa.</param>
            <remarks>
            Atenção: A definição retornada considera que o EntitySource é do tipo TableSource.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.DynamicDefinitionsHelper.CreateFiltertDefinition">
            <summary>
            Cria definição de entidade para filtros de visões (W_ENTIDADEVISAOFILTROS)
            </summary>
            <param name="systemInstanceName"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.DynamicDefinitionsHelper.CreateScriptDefinition">
            <summary>
            Cria definição da entidade Script (W_SCRIPTS)
            </summary>
            <param name="systemInstanceName">Nome do sistema.</param>
            <returns>A definição da entidade Script</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.DynamicDefinitionsHelper.CreateWESDBVersionEntityDefinition(System.String)">
            <summary>
            Recupera a definição dinâmica da entidade DatabaseVersion (W_VERSAODB).
            </summary>
            <param name="systemInstanceName">Identificador do sistema.</param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.DynamicDefinitionsHelper.CreateTableRecordDefinition(System.String)">
            <summary>
            Recupera a definição dinâmica da entidade TableRecord (Z_TABELAS).
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DynamicDefinitionsHelper.CreateTableGridFieldDefinition(System.String)">
            <summary>
            Gera a definição de entidade para a tabela Z_TABELACAMPOSGRID
            </summary>
            <param name="systemInstanceName">Sistema onde a definição de entidade será gerada</param>
            <returns>Uma definição de entidade válida para a tabela Z_TABELACAMPOSGRID</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.DynamicDefinitionsHelper.CreateTableColumnRecordDefinition(System.String)">
            <summary>
            Recupera a definição dinâmica da entidade TableColumnRecord (Z_CAMPOS).
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DynamicDefinitionsHelper.CreateFieldRecordDefinition(System.String)">
            <summary>
            Recupera a definição dinâmica da entidade FieldRecord (Z_CAMPOS).
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DynamicDefinitionsHelper.CreateTableFunctionRecordQueryDefinition(System.String)">
            <summary>
            Recupera a definição dinâmica da entidade TableFunctionRecord (Z_TABELAFUNCOES).
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DynamicDefinitionsHelper.CreateFlagsGrupoItensRecordDefinition(System.String)">
            <summary>
            Recupera a definição dinâmica da entidade FlagsGrupoItensRecord (Z_FLAGSITENS).
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DynamicDefinitionsHelper.CreateFlagsGrupoRecordDefinition(System.String)">
            <summary>
            Recupera a definição dinâmica da entidade FlagsGrupoRecord (Z_FLAGSGRUPO).
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DynamicDefinitionsHelper.CreateTableResultFieldRecordDefinition(System.String)">
            <summary>
            Recupera a definição dinâmica da entidade TableResultFieldRecord (Z_TABELACAMPOSRESULTADO).
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DynamicDefinitionsHelper.CreateBusinessObjectsRecordDefinition(System.String)">
            <summary>
            Recupera a definição dinâmica da entidade BusinessObjectConfiguration (Z_OBJETOSNEGOCIO).
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DynamicDefinitionsHelper.CreateEntityDefinitionGeneratorDefinition(System.String)">
            <summary>
            Cria definição da entidade EntityDefinitionGenerator (Z_ENTITYDEFINITIONGENERATOR)
            </summary>
            <param name="systemInstanceName">Nome do sistema.</param>
            <returns>A definição da entidade EntityDefinitionGenerator</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.DynamicDefinitionsHelper.CreateOperationDefinition(System.String)">
            <summary>
            Cria definição da entidade Operation (Z_OPERACOES)
            </summary>
            <param name="systemInstanceName">Nome do sistema.</param>
            <returns>A definição da entidade Operation</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.DynamicDefinitionsHelper.TryCreateDynamicDefinition(System.String,System.String,Benner.Tecnologia.Common.EntityDefinition@)">
            <summary>
            Cria uma definição dinamica que representa a tabela. Retorna o valor indicando se a criação ocorreu com sucesso.
            </summary>
            <param name="name">Nome da tabela</param>
            <param name="systemInstanceName">Nome do sistema</param>
            <param name="result">Definição criada dinamicamente</param>
            <returns>Valor indicando se a criação ocorreu com sucesso</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.EntityDescription">
            <summary>
            Descrição da entidade, ou da visão da entidade, para fins de acesso a dados.
            </summary>
            <remarks>
            Contém metadados ou referência a metadados sobre uma entidade,
            em um entre vários formatos possíveis.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityDescription.#ctor">
            <summary>
            Construtor não parametrizado para uso em serialização e desserialização na camada de negócios.
            </summary>
            <remarks>
            Na camada de negócios, este objeto precisa ser serializado para XML, 
            exigindo portanto um construtor não parametrizado.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityDescription.#ctor(Benner.Tecnologia.Common.Components.EntityViewBase)">
            <summary>
            Construtor que recebe uma visão.
            </summary>
            <param name="entityView"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityDescription.#ctor(Benner.Tecnologia.Common.EntityDefinition)">
            <summary>
            Construtor que recebe uma definição de entidade.
            </summary>
            <param name="entityDefinition"></param>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityDescription.Type">
            <summary>
            Tipo de descrição de entidade.
            </summary>
            <remarks>
            <para>
            Uma entidade pode ser descrita de várias formas.
            Por exemplo, por um objeto ou handle de definição de entidade,
            ou por um objeto ou handle de definição de visão de entidade.
            </para>
            <para>
            O valor desta propriedade é atualizado automaticamente conforme as outras são preenchidas.
            </para>
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityDescription.EntityViewType">
            <summary>
            Tipo de visão.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityDescription.EntityDefinition">
            <summary>
            Objeto de definição de entidade.
            </summary>
            <remarks>
            Como efeito colateral atribuir um valor a esta propriedade faz Type = EntityDefinitionObject.
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityDescription.ViewDefinition">
            <summary>
            Objeto de definição de entidade.
            </summary>
            <remarks>
            Como efeito colateral atribuir um valor a esta propriedade faz Type = ViewDefinitionObject.
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityDescription.SystemInstance">
            <summary>
            Instância de sistema da entidade.
            </summary>
            <remarks>
            Informado quando Type = EntityDefinitionHandle ou ViewDefinitionHandle, String.Empty em outros casos.
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityDescription.EntityDefinitionName">
            <summary>
            Identificador do registro de definição de entidade.
            </summary>
            <remarks>
            Como efeito colateral atribuir um valor a esta propriedade faz Type = EntityDefinitionName.
            Requer informação de SystemInstance.
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityDescription.EntityDefinitionHandle">
            <summary>
            Identificador do registro de definição de entidade.
            </summary>
            <remarks>
            Como efeito colateral atribuir um valor a esta propriedade faz Type = EntityDefinitionHandle.
            Requer informação de SystemInstance.
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityDescription.ViewDefinitionName">
            <summary>
            Identificador do registro de definição de visão de entidade.
            </summary>
            <remarks>
            Como efeito colateral atribuir um valor a esta propriedade faz Type = ViewDefinitionName.
            Requer informação de SystemInstance.
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityDescription.ViewDefinitionHandle">
            <summary>
            Identificador do registro de definição de visão de entidade.
            </summary>
            <remarks>
            Como efeito colateral atribuir um valor a esta propriedade faz Type = ViewDefinitionHandle.
            Requer informação de SystemInstance.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityDescription.IsValid">
            <summary>
            Indica se o estado do objeto é válido.
            </summary>
            <returns>true se o estado do objeto é consistente com as regras de negócio; false se o estado for inválido.</returns>
            <remarks>
            As propriedades devem ser preenchidas ou deixadas de ser preenchidas de acordo com o valor da propriedade Type.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityDescription.RecoverEntityDefinition">
            <summary>
            Recupera a definição da entidade.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityDescription.SetEntityViewType(Benner.Tecnologia.Common.Components.EntityViewBase)">
            <summary>
            Método que atribui o tipo de visão ao descritor
            </summary>
            <param name="entityView"></param>
        </member>
        <member name="T:Benner.Tecnologia.Common.ItemValueChangeEventArgs">
            <summary>
            Provê dados para o evento NameValueDictionary.ItemValueChanged.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.ItemValueChangeEventArgs.ItemKey">
            <summary>
            Chave do item que foi alterado.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.NameValueDictionary">
            <summary>
            Representa um SerializableDictionary tipado, onde a chave é String e o valor é Object.
            </summary>    
        </member>
        <member name="M:Benner.Tecnologia.Common.NameValueDictionary.OnItemValueChanging(System.Object,Benner.Tecnologia.Common.FieldChangeEventArgs)">
            <summary>
            Chama o método que assina o evento NameValueDictionary.ItemValueChanging
            </summary>
            <param name="sender">Objeto que originou o evento.</param>
            <param name="e">Uma instância de <see cref="T:Benner.Tecnologia.Common.ItemValueChangeEventArgs"/> contendo os dados do evento.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.NameValueDictionary.OnItemValueChanged(System.Object,Benner.Tecnologia.Common.FieldChangeEventArgs)">
            <summary>
            Chama o método que assina o evento NameValueDictionary.ItemValueChanged
            </summary>
            <param name="sender">Objeto que originou o evento.</param>
            <param name="e">Uma instância de <see cref="T:Benner.Tecnologia.Common.ItemValueChangeEventArgs"/> contendo os dados do evento.</param>
        </member>
        <member name="E:Benner.Tecnologia.Common.NameValueDictionary.ItemValueChanging">
            <summary>
            Ocorre quando o valor de um item está sofrendo alteração.
            </summary>
        </member>
        <member name="E:Benner.Tecnologia.Common.NameValueDictionary.ItemValueChanged">
            <summary>
            Ocorre quando o valor de um item é alterado.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.NameValueDictionary.ValidateContainsKeyOnSet">
            <summary>
            Determina se, ao setar um valor, deve ser validada a pré-existência da chave.
            </summary>
            <remarks>
            <para>
            Se True, durante a tentativa de setar um valor para uma chave (comando set da propriedade indexada) 
            será checada a existência da chave. Se a chave não estiver presente no dicionário, será lançada uma exceção do tipo 
            <see cref="T:System.Collections.Generic.KeyNotFoundException"/>. Se False, caso a chave não esteja presente, será adicionado um novo item ao dicionário 
            com a chave e o valor inforamdos - este é o comportamento padrão.
            </para><para>
            Se houver sido informado valor para a propriedade <see cref="P:Benner.Tecnologia.Common.NameValueDictionary.KeyNotFoundMessageTemplate"/>, a mensagem 
            da exceção será obtida desta propriedade. Senão, a mensagem será semalhante a esta: "A chave CHAVE não estava presente no dicionário".
            </para>
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.NameValueDictionary.KeyNotFoundMessageTemplate">
            <summary>
            Define o template da mensagem da exceção lançada quando uma chave não é encontrada no dicionário.
            </summary>
            <remarks>
            <para>
            O template deve possuir um token de índice 0 (zero), que será subsituído pela chave não encontrada. O template padrão é: 
            "A chave {0} não estava presente no dicionário".
            </para><para>
            A exceção com esta mensagem será lançada no get da propriedade indexada se a chave não estiver presente, 
            e pode ser lançada também no set se o valor da propriedade <see cref="P:Benner.Tecnologia.Common.NameValueDictionary.ValidateContainsKeyOnSet"/> for True.
            </para>
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.NameValueDictionary.Item(System.String)">
            <summary>
            Obtém ou informa o valor relacionado à chave especificada.
            </summary>
            <param name="key">A chave do valor a obter ou informar.</param>
            <remarks>
            No get desta propriedade, se a chave informada não estiver presente será sempre lançada uma exceção do tipo 
            <see cref="T:System.Collections.Generic.KeyNotFoundException"/>. No set, se a chave não estiver presente, o comportamento será determinado 
            pela propriedade <see cref="P:Benner.Tecnologia.Common.NameValueDictionary.ValidateContainsKeyOnSet"/>: se True, também será lançada uma exceção 
            <see cref="T:System.Collections.Generic.KeyNotFoundException"/>; se False, o valor será inserido no dicionário com a chave informada - 
            este é o comportamento padrão.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.ListItem.op_Implicit(Benner.Tecnologia.Common.ListItem)~System.String">
            <summary>
            Converte um ListItem em sua representação textual
            </summary>
            <param name="listItem"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.ListItem.ToString">
            <summary>
            Retorna a representação textual de um ListItem
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.ListItem.GetHashCode">
            <summary>
            Retorna o código hash para este objeto.
            </summary>
            <returns>O código hash na forma de um número inteiro.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.ListItem.Equals(System.Object)">
            <summary>
            Determina se o objeto especificado é igual ao objeto corrente.
            </summary>
            <param name="obj">O objeto a ser comparado com o objeto corrente.</param>
            <returns>true se o objeto especificado é igual ao objeto corrente; false se forem diferentes.</returns>
            <remarks>
            Dois ListItem são considerados iguais se possuírem o mesmo valor, ou se ambos forem nulos.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.ListItem.Equals(Benner.Tecnologia.Common.ListItem)">
            <summary>
            Determina se o ListItem especificado é igual ao ListItem corrente.
            </summary>
            <param name="other">O ListItem a ser comparado com o ListItem corrente.</param>
            <returns>true se o ListItem especificado é igual ao ListItem corrente; false se forem diferentes.</returns>
            <remarks>
            Dois ListItem são considerados iguais se possuírem o mesmo valor, ou se ambos forem nulos.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.ListItem.op_Equality(Benner.Tecnologia.Common.ListItem,Benner.Tecnologia.Common.ListItem)">
            <summary>
            Verifica se dois ListItem possuem o mesmo valor.
            </summary>
            <param name="x">Um dos ListItem a serem comparados.</param>
            <param name="y">Outro ListItem a ser comparado.</param>
            <returns>true se o valor dos dois ListItem for o mesmo, ou se ambos forem nulos; false se os valores forem diferentes.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.ListItem.op_Inequality(Benner.Tecnologia.Common.ListItem,Benner.Tecnologia.Common.ListItem)">
            <summary>
            Verifica se dois ListItem possuem valores diferentes.
            </summary>
            <param name="x">Um dos ListItem a serem comparados.</param>
            <param name="y">Outro ListItem a ser comparado.</param>
            <returns>true se os valores dos dois ListItem forem diferentes; false se os valores forem iguais, ou se ambos forem nulos.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Benner.Tecnologia.Common.ListItem.op_LessThan(Benner.Tecnologia.Common.ListItem,Benner.Tecnologia.Common.ListItem)" -->
        <member name="M:Benner.Tecnologia.Common.ListItem.op_GreaterThan(Benner.Tecnologia.Common.ListItem,Benner.Tecnologia.Common.ListItem)">
            <summary>
            Verifica se um ListItem é maior do que outro.
            </summary>
            <param name="x">O ListItem a ser verificado.</param>
            <param name="y">O ListItem a ser utilizado na comparação.</param>
            <returns>true se o primeiro ListItem é maior do que o outro; false se for menor ou igual.</returns>
            <remarks>
            FxCop: 'ListItem' should define operator '>' since it implements IComparable.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.ListItem.CompareTo(System.Object)">
            <summary>
            Compara o objeto corrente com outro objeto do mesmo tipo.
            </summary>
            <param name="obj">Objeto a ser utilizado na comparação.</param>
            <returns>Um inteiro menor do que zero se o objeto corrente for menor do que o especificado;
            zero se forem iguais; um inteiro maior do que zero se o objeto corrente for maior do que
            o especificado.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.RadioItem.op_Implicit(Benner.Tecnologia.Common.RadioItem)~System.String">
            <summary>
            Converte um RadioItem em sua representação textual
            </summary>
            <param name="radioItem"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.RadioItem.ToString">
            <summary>
            Retorna a representação textual de um RadioItem
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.RadioItem.GetHashCode">
            <summary>
            Retorna o código hash para este objeto.
            </summary>
            <returns>O código hash na forma de um número inteiro.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.RadioItem.Equals(System.Object)">
            <summary>
            Determina se o objeto especificado é igual ao objeto corrente.
            </summary>
            <param name="obj">O objeto a ser comparado com o objeto corrente.</param>
            <returns>true se o objeto especificado é igual ao objeto corrente; false se forem diferentes.</returns>
            <remarks>
            Dois RadioItem são considerados iguais se possuírem o mesmo valor, ou se ambos forem nulos.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.RadioItem.Equals(Benner.Tecnologia.Common.RadioItem)">
            <summary>
            Determina se o RadioItem especificado é igual ao RadioItem corrente.
            </summary>
            <param name="other">O RadioItem a ser comparado com o RadioItem corrente.</param>
            <returns>true se o RadioItem especificado é igual ao RadioItem corrente; false se forem diferentes.</returns>
            <remarks>
            Dois RadioItem são considerados iguais se possuírem o mesmo valor, ou se ambos forem nulos.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.RadioItem.op_Equality(Benner.Tecnologia.Common.RadioItem,Benner.Tecnologia.Common.RadioItem)">
            <summary>
            Verifica se dois RadioItem possuem o mesmo valor.
            </summary>
            <param name="x">Um dos RadioItem a serem comparados.</param>
            <param name="y">Outro RadioItem a ser comparado.</param>
            <returns>true se o valor dos dois RadioItem for o mesmo, ou se ambos forem nulos; false se os valores forem diferentes.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.RadioItem.op_Inequality(Benner.Tecnologia.Common.RadioItem,Benner.Tecnologia.Common.RadioItem)">
            <summary>
            Verifica se dois RadioItem possuem valores diferentes.
            </summary>
            <param name="x">Um dos RadioItem a serem comparados.</param>
            <param name="y">Outro RadioItem a ser comparado.</param>
            <returns>true se os valores dos dois RadioItem forem diferentes; false se os valores forem iguais, ou se ambos forem nulos.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Benner.Tecnologia.Common.RadioItem.op_LessThan(Benner.Tecnologia.Common.RadioItem,Benner.Tecnologia.Common.RadioItem)" -->
        <member name="M:Benner.Tecnologia.Common.RadioItem.op_GreaterThan(Benner.Tecnologia.Common.RadioItem,Benner.Tecnologia.Common.RadioItem)">
            <summary>
            Verifica se um RadioItem é maior do que outro.
            </summary>
            <param name="x">O RadioItem a ser verificado.</param>
            <param name="y">O RadioItem a ser utilizado na comparação.</param>
            <returns>true se o primeiro RadioItem é maior do que o outro; false se for menor ou igual.</returns>
            <remarks>
            FxCop: 'RadioItem' should define operator '>' since it implements IComparable.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.RadioItem.CompareTo(System.Object)">
            <summary>
            Compara o objeto corrente com outro objeto do mesmo tipo.
            </summary>
            <param name="obj">Objeto a ser utilizado na comparação.</param>
            <returns>Um inteiro menor do que zero se o objeto corrente for menor do que o especificado;
            zero se forem iguais; um inteiro maior do que zero se o objeto corrente for maior do que
            o especificado.</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.FunctionData">
            <summary>
            Esta classe representa as informações que são manipuladas durante a execução de uma função, independente de seu mecanismo.
            </summary>    
        </member>
        <member name="P:Benner.Tecnologia.Common.FunctionData.ErrorCode">
            <summary>
            Código de erro ou zero em caso de sucesso.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.FunctionData.Success">
            <summary>
            Indica sucesso na execução da função.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.FunctionData.Failure">
            <summary>
            Indica falha na execução da função.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.FunctionData.Message">
            <summary>
            Uma mensagem de sucesso, de erro ou de confirmação.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.FunctionData.Vars">
            <summary>
            Dicionário de dados que podem ser acessados, atribuídos ou mesmo alterados durante a execução de uma função.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.FunctionData.UpdatedEntity">
            <summary>
            Entidade atualizada após a execução do comando (apenas para contexto de registro)
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.FunctionDefinition">
            <summary>Representa uma função associada a uma entidade de dados.</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.FunctionDefinition.Title">
            <remmarks>Utilizada para sugerir o título da ação na visão.</remmarks>
        </member>
        <member name="T:Benner.Tecnologia.Common.ApplicationState">
            <summary>
            Mantém estado do aplicativo em diversos ambientes operacionais.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.ApplicationState.#ctor">
            <summary>
            Construtor público removido.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.ApplicationState.GetData(System.String)">
            <summary>
            Obtém dados do estado do aplicativo.
            </summary>
            <param name="key">Chave dos dados a obter.</param>
            <returns>Dados previamente armazenados.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.ApplicationState.SetData(System.String,System.Object)">
            <summary>
            Armazena dados no estado do aplicativo.
            </summary>
            <param name="key">Chave dos dados a armazenar.</param>
            <param name="value">Dados a armazenar.</param>
        </member>
        <member name="T:Benner.Tecnologia.Common.GetMode">
            <summary>
            Modo de obtenção de entidade.
            </summary>
            <remarks>Os modos de obtenção influenciam  no nível de preparação
            de entidades, no que diz respeito à execução de lógica de
            negócio de entidades, eventualmente, na manipulação de valores.</remarks>
        </member>
        <member name="F:Benner.Tecnologia.Common.GetMode.Read">
            <summary>
            Obtém entidade para leitura (vizualização).
            </summary>
            <remarks>Executa lógica de preparação para leitura.</remarks>
        </member>
        <member name="F:Benner.Tecnologia.Common.GetMode.Edit">
            <summary>
            Obtém entidade para edição.
            </summary>
            <remarks>Executa lógica de preparação para alteração (leitura e edição).</remarks>
        </member>
        <member name="F:Benner.Tecnologia.Common.GetMode.Raw">
            <summary>
            Obtém dados sem passar pelo Provider, permitindo um acesso mais rápido aos dados.
            </summary>
            <remarks>No WES, como não passa pelo Provider, não executa lógica Business. Porém executa lógica de Presentation.</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.BinaryFieldDefinition.ToDBValue(System.Object)">
            <summary>Converte para um tipo do Builder.</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.BinaryFieldDefinition.FromDBValue(System.Object)">
            <summary>Converte para um tipo do .NET.</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.BinaryFieldDefinition.ToUI(System.Object)">
            <summary>Converter para apresentação</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.BinaryFieldDefinition.FromUI(System.String)">
            <summary>Converter do formato de apresentação para o tipo nativo</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.BooleanFieldDefinition.ToDBValue(System.Object)">
            <summary>
            Converte para um tipo do Builder.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.BooleanFieldDefinition.FromDBValue(System.Object)">
            <summary>
            Converte para um tipo do .NET.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.BooleanFieldDefinition.ToUI(System.Object)">
            <summary>
            Converte um <code>boolean</code> em <code>string</code>, caso o <code>boolean</code> estiver nulo, o retorno sera "False".
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.BooleanFieldDefinition.FromWhereClause(System.Object)">
            <summary>
            Converter de uma cláusula where para um tipo .NET.
            </summary>
            <remarks>Por exemplo, na clausula where A.LOGICO = 'S' converte o 'S' para true.</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.BooleanFieldDefinition.FromUI(System.String)">
            <summary>
            Converte um <code>string</code> ("True" ou "False") em <code>boolean</code>, caso a <code>string</code> estiver nula ou vazia, o retorno será <code>false</code>.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.CurrencyFieldDefinition">
            <summary>
            Representa o campo tipo Valor do Builder.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.CurrencyFieldDefinition.ToUI(System.Object)">
            <summary>Converter para apresentação (PARA VISUALIZAÇÃO!)</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.CurrencyFieldDefinition.FromUI(System.String)">
            <summary>Converter do formato de apresentação para o tipo nativo</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.CurrencyFieldDefinition.GetDataFormatString">
            <summary>
            Recupera o DataFormatString utilizado para propagar aos componentes de mercado o formato do binding.
            Atenção: Este formato poderá variar para alguns campos, caso a definição do campo esteja marcada como somente leitura.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.CurrencyFieldDefinition.GetDataFormatStringToView">
            <summary>
            Recupera o DataFormatString utilizado para propagar aos componentes de mercado o formato do binding, para o modo de VISUALIZAÇÃO de campos.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.CurrencyFieldDefinition.GetDataFormatStringToEdit">
            <summary>
            Recupera o DataFormatString utilizado para propagar aos componentes de mercado o formato do binding, para o modo de EDIÇÃO de campos.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.CurrencyFieldDefinition.ToView(System.Object,System.Int32)">
            <summary>
            Formata o valor para visualização.
            </summary>
            <param name="value"></param>
            <param name="decimals"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.CurrencyFieldDefinition.ToEdit(System.Object,System.Int32)">
            <summary>
            Formata o valor para edição.
            </summary>
            <param name="value"></param>
            <param name="decimals"></param>
            <returns></returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.DateTimeFieldDefinition.DateTimeFormatPattern">
            <summary>
            Retorna o pattern da data e hora de acordo com o DateFormat e TimeFormat para ser utilizado no ToString.
            </summary>
            <remarks>Caso DateFormat for DayMonthYear e o TimeFormat for HourMinuteSecond, o resultado será "dd/MM/yyyy HH:mm:ss".</remarks>
            <example>
            // from string
            DateTime dataHora = DateTime.ParseExact("31/03/2008 17:59:59", DateTimeFormatPattern, DateTimeFormatInfo.InvariantInfo);
            // to string
            Console.Write( DateTime.Now.ToString(DateTimeFormatPattern, DateTimeFormatInfo.InvariantInfo) );
            </example>
        </member>
        <member name="P:Benner.Tecnologia.Common.DateTimeFieldDefinition.DateFormatPattern">
            <summary>
            Retorna o pattern da data de acordo com o DateFormat para ser utilizado no ToString
            </summary>
            <remarks>Caso DateFormat for DayMonthYear, o resultado será "dd/MM/yyyy".</remarks>
            <example>
            Console.Write( DateTime.Now.ToString(DateFormatPattern, DateTimeFormatInfo.InvariantInfo) );
            </example>
        </member>
        <member name="P:Benner.Tecnologia.Common.DateTimeFieldDefinition.TimeFormatPattern">
            <summary>
            Retorna o pattern da hora de acordo com o TimeFormat para ser utilizado no ToString
            </summary>
            <remarks>Caso TimeFormat for HourMinuteSecond, o resultado será "HH:mm:ss".</remarks>
            <example>
            Console.Write( DateTime.Now.ToString(TimeFormatPattern, DateTimeFormatInfo.InvariantInfo) );
            </example>
        </member>
        <member name="M:Benner.Tecnologia.Common.DateTimeFieldDefinition.ToDBValue(System.Object)">
            <summary>
            Converter para um tipo do Builder
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DateTimeFieldDefinition.FromDBValue(System.Object)">
            <summary>
            Converter para um tipo do .Net
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DateTimeFieldDefinition.ToUI(System.Object)">
            <summary>
            Converter para apresentação
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DateTimeFieldDefinition.FromUI(System.String)">
            <summary>
            Converter do formato de apresentação para o tipo nativo
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DateTimeFieldDefinition.FromWhereClause(System.Object)">
            <summary>
            Converter de uma cláusula where para um tipo .NET.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.DateTimeFieldDefinition.ToSearchParameter(System.String,System.String,System.String)">
            <summary>
            Monta um parâmetro do tipo DateTime.
            </summary>
            <param name="paramName"></param>
            <param name="searchText"></param>
            <param name="lookupSearchPattern"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.DateTimeFieldDefinition.ConvertSearchTextToParamValue(System.String,Benner.Tecnologia.Common.FieldDateFormat@)">
            <summary>
            Este método é utilizado para tentar converter textos em pesquisas de lookup em datas, datas inválidas serão retornadas como 01/01/01
            </summary>
            <param name="dateDateText"></param>
            <returns></returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.DateTimeFieldDefinition.DateTimeFormatInfo">
            <summary>
            DateFormatInfo para manipular campos DateTime.
            Formato: "dd/MM/yyyy HH:mm:ss"
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.FieldDateFormat">
            <summary>
            Enumerador que indica o formato de campos data
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.FieldDateFormat.DayMonthYear">
            <summary>Dia, Mês e Ano</summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.FieldDateFormat.MonthYear">
            <summary>Mês e Ano</summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.FieldDateFormat.Year">
            <summary>Ano</summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.FieldDateFormat.NoDate">
            <summary>Sem data</summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.FieldDateFormat.WeekdayDayMonthYear">
            <summary>Dia da semana, Dia, Mês e Ano</summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.FloatFieldDefinition">
            <summary>
            Representa o campo tipo Número do Builder.
            </summary>    
        </member>
        <member name="P:Benner.Tecnologia.Common.FloatFieldDefinition.Decimals">
            <summary>
            Quantidade de dígitos após a vírgula
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.FloatFieldDefinition.Positions">
            <summary>
            Quantidade de dígitos antes da vírgula (inteiros)
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.FloatFieldDefinition.ToUI(System.Object)">
            <summary>Converter para apresentação (PARA VISUALIZAÇÃO!)</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.FloatFieldDefinition.FromUI(System.String)">
            <summary>Converter do formato de apresentação para o tipo nativo</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.FloatFieldDefinition.FromWhereClause(System.Object)">
            <summary>Converter de uma cláusula where para um tipo .NET.</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.FloatFieldDefinition.GetDataFormatString">
            <summary>
            Recupera o DataFormatString utilizado para propagar aos componentes de mercado o formato do binding.
            Atenção: Este formato poderá variar para alguns campos, caso a definição do campo esteja marcada como somente leitura.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.FloatFieldDefinition.GetDataFormatStringToView">
            <summary>
            Recupera o DataFormatString utilizado para propagar aos componentes de mercado o formato do binding, para o modo de VISUALIZAÇÃO de campos.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.FloatFieldDefinition.GetDataFormatStringToEdit">
            <summary>
            Recupera o DataFormatString utilizado para propagar aos componentes de mercado o formato do binding, para o modo de EDIÇÃO de campos.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.FloatFieldDefinition.ToView(System.Object,System.Int32)">
            <summary>
            Formata o valor para visualização.
            </summary>
            <param name="value"></param>
            <param name="decimals"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.FloatFieldDefinition.ToEdit(System.Object,System.Int32)">
            <summary>
            Formata o valor para edição.
            </summary>
            <param name="value"></param>
            <param name="decimals"></param>
            <returns></returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.IntegerFieldDefinition">
            <summary>
            Representa o campo tipo Inteiro do Builder.
            </summary>    
        </member>
        <member name="M:Benner.Tecnologia.Common.IntegerFieldDefinition.ToDBValue(System.Object)">
            <summary>Converter para um tipo do Builder</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.IntegerFieldDefinition.FromDBValue(System.Object)">
            <summary>Converter para um tipo do .Net</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.IntegerFieldDefinition.ToUI(System.Object)">
            <summary>Converter para apresentação (PARA VISUALIZAÇÃO!)</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.IntegerFieldDefinition.FromUI(System.String)">
            <summary>Converter do formato de apresentação para o tipo nativo</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.IntegerFieldDefinition.GetDataFormatString">
            <summary>
            Recupera o DataFormatString utilizado para propagar aos componentes de mercado o formato do binding.
            Atenção: Este formato poderá variar para alguns campos, caso a definição do campo esteja marcada como somente leitura.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.IntegerFieldDefinition.GetDataFormatStringToView">
            <summary>
            Recupera o DataFormatString utilizado para propagar aos componentes de mercado o formato do binding, para o modo de VISUALIZAÇÃO de campos.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.IntegerFieldDefinition.GetDataFormatStringToEdit">
            <summary>
            Recupera o DataFormatString utilizado para propagar aos componentes de mercado o formato do binding, para o modo de EDIÇÃO de campos.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.IntegerFieldDefinition.ToView(System.Object)">
            <summary>
            Formata o valor para visualização.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.IntegerFieldDefinition.ToEdit(System.Object)">
            <summary>
            Formata o valor para edição.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.NumericFieldDefinition">
            <summary>
            Classe base utilizada por campos numéricos (integer, float, currency,..).
            </summary>    
        </member>
        <member name="P:Benner.Tecnologia.Common.NumericFieldDefinition.NumericFormatInfo">
            <summary>
            Formato para tipos numéricos padrão.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.NumericFieldDefinition.ToDBValue(System.Object)">
            <summary>Converter para um tipo do Builder</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.NumericFieldDefinition.FromDBValue(System.Object)">
            <summary>Converter para um tipo do .Net</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.NumericFieldDefinition.ToUI(System.Object)">
            <summary>Converter para apresentação (PARA VISUALIZAÇÃO!)</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.NumericFieldDefinition.FromUI(System.String)">
            <summary>Converter do formato de apresentação para o tipo nativo</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.StringFieldDefinition.HiddenText">
            <summary>
            Indica se o componente visual deve ocultar o texto (como um password).
            Este informação corresponde ao Não mostrar conteúdo do Builder.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.StringFieldDefinition.HasNormalizedIndex">
            <summary>
            Determina se o campo possui "índice por maiúsculas".
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.StringFieldDefinition.ScrambledStorage">
            <summary>
            Se a string é armazenada embaralhada na base de dados (Benner Scramble)
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.StringFieldDefinition.Line">
            <summary>
            Quantidade de linhas
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.StringFieldDefinition.ToUI(System.Object)">
            <summary>Converter para apresentação</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.StringFieldDefinition.FromUI(System.String)">
            <summary>Converter do formato de apresentação para o tipo nativo</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.StringFieldDefinition.ContainsNewLine(System.Object)">
            <summary>
            Retorna um booleano indicando se a string possuir um caracter de nova linha '\n'
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.AssociationFieldDefinition.CriteriaWhereClause">
            <summary>
            Esta propriedade armazena campos de dependência em forma de cláusula where.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.AssociationFieldDefinition.TargetEntityDescription">
            <summary>
            Esta propriedade garante a serialização para instância de definições dinâmicas.
            A instância da definição precisa ser transportada quando não estiver persistida.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.AssociationFieldDefinition.SelectAnyStructuredLevel">
            <summary>
            Indica se este lookup, quando apontar para uma tabela estruturada, irá permitir a seleção de registros de qualquer nível.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.AssociationFieldDefinition.FromUI(System.String)">
            <summary>Converter do formato de apresentação para o tipo nativo</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.AssociationFieldDefinition.SetSystemInstanceName(System.String)">
            <summary>
            Este método é utilizado para atualizar o identificador da instância de sistema no metadado do campo lookup.
            </summary>
            <param name="systemInstanceName"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.AssociationFieldDefinition.ToPath">
            <summary>
            Caminho do campo do primeiro campo de resultado do campo tipo tabela. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.AssociationFieldDefinition.TargetEntityDefinition">
            <summary>
            A instância da definição de entidade de destino.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.AssociationFieldDefinition.ToUI(System.Object)">
            <summary>Converter para apresentação</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.AssociationFieldDefinition.GetEntityDefinitionForResultFieldsSearch(System.Collections.Generic.List{System.String})">
            <summary>
            Este método monta uma definição de entidade dinâmica contendo apenas campos que estão na lista de campos de resultado, tal lista pode ser substituida passando um parâmetro diferente de null.
            </summary>
            <param name="customLookupResultFields">(Opcional) Lista de campo que pode substituir a lista de campos de resultado do LookupDefinition da entidade de destino.</param>
            <returns>
            A entidade retornada pode ser utilizada para pesquisas, por exemplo no combo, onde haverá uma pesquisa campo a campo 
            até que seja encontrada alguma ocorrência, por isso a necessidade de haver um subconjunto de campos.
            </returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.AssociationFieldDefinition.GetEntityDefinitionForPopUpViewSearch(System.String)">
            <summary>
            Este método monta uma definição de entidade dinâmica contendo apenas campos que estão na visão de popup, tal visão pode ser substituída passando um parâmetro diferente de null.
            </summary>
            <param name="customLookupViewName">(Opcional) Nome da visão de lookup para substituir a visão de popup padrão, do LookupDefinition da entidade de destino.</param>
            <returns>
            A entidade retornada pode ser utilizada para pesquisas, por exemplo no popup, onde haverá uma pesquisa campo a campo 
            até que seja encontrada alguma ocorrência.
            </returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.HandleFieldDefinition.ToUI(System.Object)">
            <summary>Converter para apresentação</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.HandleFieldDefinition.FromUI(System.String)">
            <summary>Converter do formato de apresentação para o tipo nativo</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.TabFieldDefinition.ToUI(System.Object)">
            <summary>
            Converte para apresentação
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.TabFieldDefinition.FromUI(System.String)">
            <summary>
            Converte do formato de apresentação para o tipo nativo
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.TextFieldDefinition.ToUI(System.Object)">
            <summary>Converter para apresentação</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.TextFieldDefinition.FromUI(System.String)">
            <summary>Converter do formato de apresentação para o tipo nativo</summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.EntityDefinitionGenerator">
            <summary>
            Responsável pela geração de definições de entidades existente em uma base de dados Benner
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityDefinitionGenerator.Generate(System.String,System.String)">
            <summary>
            Responsável por gerar uma definição de uma entidade
            </summary>
            <param name="systemInstanceName">Nome da instância do sistema a qual a tabela pertence</param>        
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityDefinitionGenerator.Generate(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Gera a definição de uma entidade
            </summary>
            <param name="systemInstanceName">Nome da instância do sistema a qual a tabela pertence</param>
            <param name="dataStructureName">Nome da estrutura de dados</param>
            <param name="overrideIfExist">Sobreescrever caso já exista uma definição de entidade com o mesmo nome</param>
            <param name="checkLastModified">Identifica se deve verificar se é realmente necessário regerar a definição de entidade. O padrão é true, que neste caso antes de regerar a definição de entidade verifica se houve alteração na tabela desde a última geração de entidade.</param>
            <returns>Retorna True se gerou a definição de entidade com sucesso. Retorna False caso a definição de entidade atual já esteja atualizada e não precisa ser regerada.</returns>
            <remarks>
            http://www.benner.com.br/wiki/index.php?title=Gerador_de_vis%C3%B5es/Regras_de_gera%C3%A7%C3%A3o_das_vis%C3%B5es
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityDefinitionGenerator.CheckLogicEntityInconsistencies(System.String,Benner.Tecnologia.Common.Cac.TableRecord,Benner.Tecnologia.Common.EntityDefinition)">
            <summary>
            Verifica inconsistências comuns a entidades lógicas e ajusta, por bem ou por mal. Assim evitamos erros porque a base não está redondinha
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityDefinitionGenerator.GenerateLookupDefinition(System.String,System.String,Benner.Tecnologia.Common.EntityDefinition)">
            <summary>
            Este método abrange a geração da definição de lookup, com toda a lógica de campos de resultado de lookup, resultado de lookup estruturado.
            </summary>
            <param name="systemInstanceName"></param>
            <param name="dataStructureName"></param>
            <param name="entityDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityDefinitionGenerator.SetDataAccessLevelToStructuredTableFields(Benner.Tecnologia.Common.EntityDefinition)">
            <summary>
            SMS 747835: Campo NIVELSUPERIOR deve sempre ser somente leitura - o valor será assumido pelo Provider a partir do campo ESTRUTURA
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityDefinitionGenerator.GetDependencyList(System.String,System.String)">
            <summary>
            Obtém a lista de tabelas relacionadas com a tabela informada por parâmetro
            </summary>
            <param name="systemInstanceName">Nome da instância de sistema a qual a tabela pertence</param>
            <param name="tableName">Nome da tabela da qual será obtida as dependências</param>
            <returns>Obtém a lista de tabelas ordenada por nível de dependência</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.ListFieldDefinition.ToUI(System.Object)">
            <summary>
            Converter para apresenta��o
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.ListFieldDefinition.FromUI(System.String)">
            <summary>
            Converter do formato de apresenta��o para o tipo nativo
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.ListFieldDefinition.FromWhereClause(System.Object)">
            <summary>
            Converter de uma cl�usula where para um tipo .NET.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.ListFieldDefinition.GetListItemByKeyFromFilter(System.String)">
            <summary>
            Pega a string de valores e converte em uma lista de Benner.Tecnologia.Common.ListItem 
            </summary>
            <param name="value">String de valores de itens selecionados concatenados por pipe.</param>
            <returns>Lista de Benner.Tecnologia.Common.ListItem</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.ListFieldDefinition.GetDefaultValue">
            <summary>
            Obtem o valor padr�o (campos Assumir no Builder)
            </summary>
            <returns></returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.RadioFieldDefinition.Columns">
            <summary>
            N�mero de colunas
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.RadioFieldDefinition.Items">
            <summary>
            Dicion�rio onde a chave � o valor num�rico de uma op��o do r�dio e valor (acessado pela chave) � a descri��o da op��o do r�dio.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.RadioFieldDefinition.ToUI(System.Object)">
            <summary>Converter para apresenta��o</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.RadioFieldDefinition.FromUI(System.String)">
            <summary>Converter do formato de apresenta��o para o tipo nativo</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.RadioFieldDefinition.FromWhereClause(System.Object)">
            <summary>
            Converter o valor de uma cl�usula where para um tipo .NET.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.RadioFieldDefinition.GetDefaultValue">
            <summary>
            Obtem o valor padr�o (campos Assumir no Builder)
            </summary>
            <returns></returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntitySource.IsPartialEntity">
            <summary>
            Indica se este EntitySource é de uma entidade parcial
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Entities`1.GetHandles">
            <summary>
            Retorna uma coleção com os handles das entidades.
            </summary>
            <returns>Uma lista contendo os handles das entidades desta coleção.</returns>
            <remarks>Somente os handles válidos são incluídos na lista.</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Entities`1.GetEntityBaseList">
            <summary>
            Retorna uma lista de EntityBase no tipo List&lt;EntityBase&gt;baseada ba lista das entidades desta coleção
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Entities`1.GetEntityBaseListAsEntities">
            <summary>
            Retorna uma lista de EntityBase no tipo Entities&lt;EntityBase&gt;baseada ba lista das entidades desta coleção
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Entities`1.ToXml">
            <summary>
            Serializa uma coleção de entidades e retorna uma literal (XmlSerializer)
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Entities`1.FromXml(System.String)">
            <summary>
            Deserializa uma coleção de entidades (XmlSerializer)
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Entity">
            <summary>
            Facilita o acesso aos métodos Get de EntityBase&lt;EntityBase&gt;.
            </summary>
            <remarks>
            Os métodos Get desta classe solicitam uma definição de entidade como parâmetro 
            e retornam uma instância da classe que especializa esta entidade.
            
            O tipo retornado será uma herança de EntityBase&lt;T&gt;, ou simplesmente EntityBase 
            caso não exista uma classe especializando esta entidade.
            </remarks>
        </member>
        <member name="T:Benner.Tecnologia.Common.TableReadOnlyChangedEventHandler">
            <summary>
            Alteração do TableReadOnly da entidade
            </summary>
            <param name="sender">Objeto que originou o evento.</param>
            <param name="tableReadOnly">Valor atual do TableReadOnly</param>
        </member>
        <member name="T:Benner.Tecnologia.Common.RecordReadOnlyChangedEventHandler">
            <summary>
            Alteração do RecordReadOnly da entidade
            </summary>
            <param name="sender">Objeto que originou o evento.</param>
            <param name="recordReadOnly">Valor atual do RecordReadOnly</param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Benner.Tecnologia.Common.EntityBase`1" -->
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Create(Benner.Tecnologia.Common.Components.EntityViewBase)">
            <summary>
            Cria uma nova instância de entidade.
            </summary>
            <overloads>
            Cria uma nova instância de entidade.
            </overloads>
            <param name="entityView">A visão da definição da entidade a ser criada.</param>
            <returns>Uma nova entidade.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Create(Benner.Tecnologia.Common.Components.EntityViewBase,Benner.Tecnologia.Common.NameValueDictionary)">
            <summary>
            Cria uma nova instância de entidade.
            </summary>
            <param name="entityView">A visão da definição da entidade a ser criada.</param>
            <returns>Uma nova entidade.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Create(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.NameValueDictionary)">
            <summary>
            Cria uma nova instância de entidade.
            </summary>
            <returns>Uma nova entidade.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Create(Benner.Tecnologia.Common.Components.EntityViewBase,Benner.Tecnologia.Common.NameValueDictionary,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Cria uma nova instância de entidade.
            </summary>
            <param name="entityView">A visão da definição da entidade a ser criada.</param>
            <param name="suggestedValues">Dicionário contendo valores sugeridos, que a nova instância de entidade irá assumir.</param>
            <param name="transitoryData">Dicionário contendo os dados transitórios</param>
            <returns>Uma nova entidade.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Create(Benner.Tecnologia.Common.EntityDefinition)">
            <summary>
            Cria uma nova instância inicializada da entidade.
            </summary>
            <param name="entityDefinition">Definição de entidade a utilizar.</param>
            <returns>Uma nova instância inicializada da entidade.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Create(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.NameValueDictionary,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Cria uma nova instância inicializada da entidade.
            </summary>
            <param name="entityDefinition">Definição de entidade a utilizar.</param>
            <param name="suggestedValues">Dicionário contendo valores sugeridos, que a nova instância de entidade irá assumir.</param>
            <param name="transitoryData">Dicionário contendo os dados transitórios.</param>
            <returns>Uma nova instância inicializada da entidade.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.CreateClone(Benner.Tecnologia.Common.EntityDefinition,`0)">
            <summary>
            Cria uma nova instância da entidade copiando os valores das propriedades de uma entidade modelo.
            </summary>
            <param name="entityDefinition">Definição da entidade que será copiada.</param>
            <param name="sourceEntity">Entidade modelo que terá os valores das propriedades copiados para a nova entidade.</param>
            <returns>Uma nova entidade</returns>
            <remarks>A entidade será retornada em modo de inserção.</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.CreateClone(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.Handle)">
            <summary>
            Cria uma nova instância da entidade copiando os valores das propriedades de uma entidade modelo.
            </summary>
            <param name="entityDefinition">Definição da entidade que será copiada.</param>
            <param name="handle">Handle da entidade modelo que será obtida e terá os valores das propriedades copiados para a nova entidade.</param>
            <returns>Uma nova entidade</returns>
            /// <remarks>A entidade será retornada em modo de inserção.</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.CreateRaw(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.NameValueDictionary,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Cria uma nova instância inicializada da entidade sem executar regra de negócio do Create. É utilizado na interoperabilidade com o Delphi.
            </summary>
            <param name="entityDefinition">Definição de entidade a utilizar.</param>
            <param name="suggestedValues">Dicionário contendo valores sugeridos, que a nova instância de entidade irá assumir.</param>
            <param name="transitoryData">Dicionário contendo os dados transitórios.</param>
            <returns>Uma nova instância inicializada da entidade.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Get(Benner.Tecnologia.Common.Components.EntityViewBase,Benner.Tecnologia.Common.Handle)">
            <summary>
            Obtém uma instância de entidade da origem de dados.
            </summary>
            <overloads>
            Obtém uma instância de entidade da origem de dados.
            </overloads>
            <param name="entityView">A visão da definição da instância da entidade a ser obtida.</param>
            <param name="handle">Chave primária da instância da entidade a ser obtida.</param>
            <returns>Uma instância da entidade requisitada.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Get(Benner.Tecnologia.Common.Components.EntityViewBase,Benner.Tecnologia.Common.Handle,Benner.Tecnologia.Common.GetMode)">
            <summary>
            Obtém uma instância de entidade da origem de dados.
            </summary>
            <param name="entityView">A visão da definição da instância da entidade a ser obtida.</param>
            <param name="handle">Chave primária da instância da entidade a ser obtida.</param>
            <param name="mode">O modo de obtenção da instância da entidade.</param>
            <returns>Uma instância da entidade requisitada.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Get(Benner.Tecnologia.Common.Components.EntityViewBase,Benner.Tecnologia.Common.Criteria)">
            <summary>
            Obtém uma instância de entidade da origem de dados.
            </summary>
            <overloads>
            Obtém uma instância de entidade da origem de dados.
            </overloads>
            <param name="entityView">A visão da definição da instância da entidade a ser obtida.</param>
            <param name="criteria">O critério para recuperar a instância da entidade.</param>
            <returns>Uma instância da entidade requisitada.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Get(Benner.Tecnologia.Common.Components.EntityViewBase,Benner.Tecnologia.Common.Criteria,Benner.Tecnologia.Common.GetMode)">
            <summary>
            Obtém uma instância de entidade da origem de dados.
            </summary>
            <param name="entityView">A visão da definição da instância da entidade a ser obtida.</param>
            <param name="criteria">O critério para recuperar a instância da entidade.</param>
            <param name="mode">O modo de obtenção da instância da entidade.</param>
            <returns>Uma instância da entidade requisitada.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Get(Benner.Tecnologia.Common.Components.EntityViewBase,Benner.Tecnologia.Common.Criteria,Benner.Tecnologia.Common.GetMode,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Obtém uma instância de entidade da origem de dados.
            </summary>
            <param name="entityView">A visão da definição da instância da entidade a ser obtida.</param>
            <param name="criteria">O critério para recuperar a instância da entidade.</param>
            <param name="mode">O modo de obtenção da instância da entidade.</param>
            <param name="transitoryData">Dicionário contendo os dados transitórios.</param>
            <returns>Uma instância da entidade requisitada.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Get(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.Handle)">
            <summary>
            Recupera uma instância da entidade em modo de leitura.
            </summary>
            <param name="entityDefinition">Definição de entidade a utilizar.</param>
            <param name="handle">Chave primária.</param>
            <returns>Uma nova instância da entidade com os dados.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Get(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.Handle,Benner.Tecnologia.Common.GetMode)">
            <summary>
            Recupera uma instância da entidade em modo de leitura ou de edição.
            </summary>
            <param name="entityDefinition">Definição de entidade a utilizar.</param>
            <param name="handle">Chave primária.</param>
            <param name="mode">Modo em que o registro deve estar após a recuperação.</param>
            <returns>Uma nova instância da entidade com os dados.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Get(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.Criteria)">
            <summary>
            Recupera uma instância da entidade em modo de leitura.
            </summary>
            <param name="entityDefinition">Definição de entidade a utilizar.</param>
            <param name="criteria">Critério de seleção que identifique um único registro.</param>
            <returns>Uma nova instância da entidade com os dados.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Get(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.Criteria,Benner.Tecnologia.Common.GetMode)">
            <summary>
            Recupera uma instância da entidade em modo de leitura ou de edição.
            </summary>
            <param name="entityDefinition">Definição de entidade a utilizar.</param>
            <param name="criteria">Critério de seleção que identifique um único registro.</param>
            <param name="mode">Modo em que o registro deve estar após a recuperação.</param>
            <returns>Uma nova instância da entidade com os dados.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Get(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.Criteria,Benner.Tecnologia.Common.GetMode,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Recupera uma instância da entidade em modo de leitura ou de edição.
            </summary>
            <param name="entityDefinition">Definição de entidade a utilizar.</param>
            <param name="criteria">Critério de seleção que identifique um único registro.</param>
            <param name="mode">Modo em que o registro deve estar após a recuperação.</param>
            <returns>Uma nova instância da entidade com os dados.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.GetFirstOrDefault(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.Criteria)">
            <summary>
            Recupera uma instância da entidade.
            </summary>
            <param name="entityDefinition">Definição da entidade.</param>
            <param name="criteria">Critério de seleção que identifique o registro.</param>
            <returns>Caso a condição retorne uma ou mais entidades este método retornará a primeira entidade, 
            caso não haja entidades que cumpram esta condição será retornado nulo.
            </returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.GetFirstOrDefault(Benner.Tecnologia.Common.Components.EntityViewBase,Benner.Tecnologia.Common.Criteria)">
            <summary>
            Recupera uma instância da entidade.
            </summary>
            <param name="entityView">Definição da visão.</param>
            <param name="criteria">Critério de seleção que identifique o registro.</param>
            <returns>Caso a condição retorne uma ou mais entidades este método retornará a primeira entidade, 
            caso não haja entidades que cumpram esta condição será retornado nulo.
            </returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.GetFirstOrDefault(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.Criteria,Benner.Tecnologia.Common.GetMode)">
            <summary>
            Recupera uma instância da entidade.
            </summary>
            <param name="entityDefinition">Definição da entidade.</param>
            <param name="criteria">Critério de seleção que identifique o registro.</param>
            <param name="getMode">GetMode para buscar a entidade com o estado já alterado.</param>
            <returns>Caso a condição retorne uma ou mais entidades este método retornará a primeira entidade, 
            caso não haja entidades que cumpram esta condição será retornado nulo.
            </returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.GetFirstOrDefault(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.Criteria,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Recupera uma instância da entidade.
            </summary>
            <param name="entityDefinition">Definição da entidade.</param>
            <param name="criteria">Critério de seleção que identifique o registro.</param>
            <param name="transitoryData">Dados que são passados entre camadas.</param>
            <returns>Caso a condição retorne uma ou mais entidades este método retornará a primeira entidade, 
            caso não haja entidades que cumpram esta condição será retornado nulo.
            </returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.GetFirstOrDefault(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.Handle)">
            <summary>
            Recupera uma instância da entidade.
            </summary>
            <param name="entityDefinition">Definição da entidade.</param>
            <param name="handle">Handle para recuperar a entidade.</param>
            <returns>Caso a condição retorne uma ou mais entidades este método retornará a primeira entidade, 
            caso não haja entidades que cumpram esta condição será retornado nulo.
            </returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.GetFirstOrDefault(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.Handle,Benner.Tecnologia.Common.GetMode)">
            <summary>
            Recupera uma instância da entidade.
            </summary>
            <param name="entityDefinition">Definição da entidade.</param>
            <param name="handle">Handle para recuperar a entidade.</param>
            <param name="getMode">GetMode para buscar a entidade com o estado já alterado.</param>
            <returns>Caso a condição retorne uma ou mais entidades este método retornará a primeira entidade, 
            caso não haja entidades que cumpram esta condição será retornado nulo.
            </returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.GetFirstOrDefault(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.Handle,Benner.Tecnologia.Common.GetMode,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Recupera uma instância da entidade.
            </summary>
            <param name="entityDefinition">Definição da entidade.</param>
            <param name="handle">Handle para recuperar a entidade.</param>
            <param name="getMode">GetMode para buscar a entidade com o estado já alterado.</param>
            <param name="transitoryData">Dados que são passados entre camadas.</param>
            <returns>Caso a condição retorne uma ou mais entidades este método retornará a primeira entidade, 
            caso não haja entidades que cumpram esta condição será retornado nulo.
            </returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.GetFirstOrDefault(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.Criteria,Benner.Tecnologia.Common.GetMode,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Recupera uma instância da entidade.
            </summary>
            <param name="entityDefinition">Definição da entidade.</param>
            <param name="criteria">Critério de seleção que identifique o registro.</param>
            <param name="getMode">GetMode para buscar a entidade com o estado já alterado.</param>
            <param name="transitoryData">Dados que são passados entre camadas.</param>
            <returns>Caso a condição retorne uma ou mais entidades este método retornará a primeira entidade, 
            caso não haja entidades que cumpram esta condição será retornado nulo.
            </returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.GetAll(Benner.Tecnologia.Common.Components.EntityViewBase)">
            <summary>
            Obtém todas as instâncias de uma entidade da origem de dados.
            </summary>
            <overloads>
            Obtém da origem de dados todas as instâncias de uma entidade.
            </overloads>
            <param name="entityView">A visão da definição das instâncias da entidade a ser obtida.</param>
            <returns>Uma coleção com as instâncias da entidade requisitada.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.GetAll(Benner.Tecnologia.Common.Components.EntityViewBase,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Obtém todas as instâncias de uma entidade da origem de dados.
            </summary>
            <param name="entityView">A visão da definição das instâncias da entidade a ser obtida.</param>
            <param name="transitoryData">Dicionário contendo os dados transitórios.</param>
            <returns>Uma coleção com as instâncias da entidade requisitada.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.GetAll(Benner.Tecnologia.Common.EntityDefinition)">
            <summary>
            Obtém todas as instâncias de uma entidade da origem de dados.
            </summary>
            <param name="entityDefinition">A definição das instâncias da entidade a ser obtida.</param>
            <returns>Uma coleção com as instâncias da entidade requisitada.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.GetAll(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Obtém todas as instâncias de uma entidade da origem de dados.
            </summary>
            <param name="entityDefinition">A definição das instâncias da entidade a ser obtida.</param>
            <param name="transitoryData">Dicionário contendo os dados transitórios.</param>
            <returns>Uma coleção com as instâncias da entidade requisitada.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.GetMany(Benner.Tecnologia.Common.Components.EntityViewBase,Benner.Tecnologia.Common.Criteria)">
            <summary>
            Obtém várias instâncias de entidade da origem de dados.
            </summary>
            <overloads>
            Obtém, da origem de dados, várias instâncias de entidade.
            </overloads>
            <param name="entityView">A visão da definição das instâncias da entidade a ser obtida.</param>
            <param name="criteria">O critério para recuperar a coleção de instâncias da entidade.</param>
            <returns>
            Uma coleção com as instâncias da entidade requisitada.
            </returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.GetMany(Benner.Tecnologia.Common.Components.EntityViewBase,Benner.Tecnologia.Common.Criteria,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Obtém várias instâncias de entidade da origem de dados.
            </summary>
            <param name="entityView">A visão da definição das instâncias da entidade a ser obtida.</param>
            <param name="criteria">O critério para recuperar a coleção de instâncias da entidade.</param>
            <param name="transitoryData">Dicionário contendo os dados transitórios.</param>
            <returns>
            Uma coleção com as instâncias da entidade requisitada.
            </returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.GetMany(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.Criteria)">
            <summary>
            Obtém várias instâncias de entidade da origem de dados.
            </summary>
            <param name="entityDefinition">A definição das instâncias da entidade a ser obtida.</param>
            <param name="criteria">O critério para recuperar a coleção de instâncias da entidade.</param>
            <returns>
            Uma coleção com as instâncias da entidade requisitada.
            </returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.GetMany(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.Criteria,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Obtém várias instâncias de entidade da origem de dados.
            </summary>
            <param name="entityDefinition">A definição das instâncias da entidade a ser obtida.</param>
            <param name="criteria">O critério para recuperar a coleção de instâncias da entidade.</param>
            <param name="transitoryData">Dicionário contendo os dados transitórios.</param>
            <returns>
            Uma coleção com as instâncias da entidade requisitada.
            </returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.CountAll(Benner.Tecnologia.Common.Components.EntityViewBase)">
            <summary>
            Conta todas as instâncias de uma entidade da origem de dados.
            <overloads>
            Conta todas as entidades de um determinado tipo existentes na origem de dados.
            </overloads>
            </summary>
            <param name="entityView">A visão da definição das instâncias da entidade a serem contadas.</param>
            <returns>A quantidade de instâncias da entidade existentes na origem de dados.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.CountAll(Benner.Tecnologia.Common.Components.EntityViewBase,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Conta todas as instâncias de uma entidade da origem de dados.
            </summary>
            <param name="entityView">A visão da definição das instâncias da entidade a serem contadas.</param>
            <param name="transitoryData">Dicionário contendo os dados transitórios.</param>
            <returns>A quantidade de instâncias da entidade existentes na origem de dados.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.CountAll(Benner.Tecnologia.Common.EntityDefinition)">
            <summary>
            Conta todas as instâncias de uma entidade da origem de dados.
            </summary>
            <param name="entityDefinition">A definição das instâncias da entidade a serem contadas.</param>
            <returns>A quantidade de instâncias da entidade existentes na origem de dados.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.CountAll(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Conta todas as instâncias de uma entidade da origem de dados.
            </summary>
            <param name="entityDefinition">A definição das instâncias da entidade a serem contadas.</param>
            <param name="transitoryData">Dicionário contendo dos dados transitórios.</param>
            <returns>A quantidade de instâncias da entidade existentes na origem de dados.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.CountMany(Benner.Tecnologia.Common.Components.EntityViewBase,Benner.Tecnologia.Common.Criteria)">
            <summary>
            Conta as instâncias de uma entidade da origem de dados que atendem a um determinado critério de seleção.
            </summary>
            <overloads>
            Conta as ocorrências de uma entidade, na origem de dados, que atendem a um determinado critério de seleção.
            </overloads>
            <param name="entityView">A visão da definição das instâncias da entidade a serem contadas.</param>
            <param name="criteria">O critério para contar as instâncias da entidade.</param>
            <returns>A quantidade de instâncias da entidade existentes na origem de dados.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.CountMany(Benner.Tecnologia.Common.Components.EntityViewBase,Benner.Tecnologia.Common.Criteria,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Conta as instâncias de uma entidade da origem de dados que atendem a um determinado critério de seleção.
            </summary>
            <param name="entityView">A visão da definição das instâncias da entidade a serem contadas.</param>
            <param name="criteria">O critério para contar as instâncias da entidade.</param>
            <param name="transitoryData">Dicionário contendo os dados transitórios.</param>
            <returns>A quantidade de instâncias da entidade existentes na origem de dados.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.CountMany(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.Criteria)">
            <summary>
            Conta as instâncias de uma entidade da origem de dados que atendem a um determinado critério de seleção.
            </summary>
            <param name="entityDefinition">A definição das instâncias da entidade a serem contadas.</param>
            <param name="criteria">O critério para contar as instâncias da entidade.</param>
            <returns>A quantidade de instâncias da entidade existentes na origem de dados.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.CountMany(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.Criteria,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Conta as instâncias de uma entidade da origem de dados que atendem a um determinado critério de seleção.
            </summary>
            <param name="entityDefinition">A definição das instâncias da entidade a serem contadas.</param>
            <param name="criteria">O critério para contar as instâncias da entidade.</param>
            <returns>A quantidade de instâncias da entidade existentes na origem de dados.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.DeleteMany(Benner.Tecnologia.Common.Components.EntityViewBase,Benner.Tecnologia.Common.Criteria)">
            <summary>
            Exclui as instâncias de uma entidade da origem de dados que atendem a um determinado critério de seleção.
            </summary>
            <overloads>
            Exclui, da origem de dados, as instâncias de uma entidade que atendam a um determinado critério de seleção.
            </overloads>
            <param name="entityView">A visão da definição das instâncias da entidade a serem excluídas.</param>
            <param name="criteria">O critério para excluir as instâncias da entidade.</param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.DeleteMany(Benner.Tecnologia.Common.Components.EntityViewBase,Benner.Tecnologia.Common.Criteria,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Exclui as instâncias de uma entidade da origem de dados que atendem a um determinado critério de seleção.
            </summary>
            <param name="entityView">A visão da definição das instâncias da entidade a serem excluídas.</param>
            <param name="criteria">O critério para excluir as instâncias da entidade.</param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.DeleteMany(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.Criteria)">
            <summary>
            Exclui as instâncias de uma entidade da origem de dados que atendem a um determinado critério de seleção.
            </summary>
            <param name="entityDefinition">A definição das instâncias da entidade a serem excluídas.</param>
            <param name="criteria">O critério para excluir as instâncias da entidade.</param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.DeleteMany(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.Criteria,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Exclui as instâncias de uma entidade da origem de dados que atendem a um determinado critério de seleção.
            </summary>
            <param name="entityDefinition">A definição das instâncias da entidade a serem excluídas.</param>
            <param name="criteria">O critério para excluir as instâncias da entidade.</param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Exists(Benner.Tecnologia.Common.Components.EntityViewBase,Benner.Tecnologia.Common.Handle)">
            <summary>
            Verifica se existe ao menos uma instância de entidade na origem de dados que atenda a um determinado critério de seleção.
            </summary>
            <overloads>
            Verifica se existe, na origem de dados, ao menos uma instância de entidade que atenda a um determinado critério de seleção.
            </overloads>
            <param name="entityView">A visão da definição da instância da entidade a ser pesquisada.</param>
            <param name="handle">Chave primária do objeto a ser verificado.</param>
            <returns>true se existir ao menos um objeto que atenda aos critérios; false caso contrário.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Exists(Benner.Tecnologia.Common.Components.EntityViewBase,Benner.Tecnologia.Common.Criteria)">
            <summary>
            Verifica se existe ao menos uma instância de entidade na origem de dados que atenda a um determinado critério de seleção.
            </summary>
            <param name="entityView">A definição da instância da entidade a ser pesquisada.</param>
            <param name="criteria">O critério de pesquisa.</param>
            <returns>true se existir ao menos um objeto que atenda aos critérios; false caso contrário.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Exists(Benner.Tecnologia.Common.Components.EntityViewBase,Benner.Tecnologia.Common.Criteria,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Verifica se existe ao menos uma instância de entidade na origem de dados que atenda a um determinado critério de seleção.
            </summary>
            <param name="entityView">A definição da instância da entidade a ser pesquisada.</param>
            <param name="criteria">O critério de pesquisa.</param>
            <param name="transitoryData">Dicionário contendo os dados transitórios.</param>
            <returns>true se existir ao menos um objeto que atenda aos critérios; false caso contrário.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Exists(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.Handle)">
            <summary>
            Verifica se existe um objeto pela sua chave primária.
            </summary>
            <param name="entityDefinition">Definição da entidade.</param>
            <param name="handle">Chave primária do objeto a ser verificado.</param>
            <returns>true se existir um objeto com esta chave na base de dados, false se não existir.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Exists(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.Criteria)">
            <summary>
            Verifica se existe ao menos um objeto.
            </summary>
            <param name="entityDefinition">Definição da entidade.</param>
            <param name="criteria">Critérios de seleção para a pesquisa.</param>
            <returns>true se existir ao menos um objeto na base de dados que atenda aos critérios, false se não existir.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Exists(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.Criteria,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Verifica se existe ao menos um objeto.
            </summary>
            <param name="entityDefinition">Definição da entidade.</param>
            <param name="criteria">Critérios de seleção para a pesquisa.</param>
            <param name="transitoryData">Dicionário contendo os dados transitórios.</param>
            <returns>true se existir ao menos um objeto na base de dados que atenda aos critérios, false se não existir.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Execute(Benner.Tecnologia.Common.EntityCommand)">
            <summary>
            Executa uma operação.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Execute(Benner.Tecnologia.Common.EntityCommandList)">
            <summary>
            Executa um lote de operações em uma única transação
            </summary>
            <remarks>A execução do comando Save (SaveEntityCommand) não garante que a entidade foi salva.
            Deve ser verificado se há mensagens de erro para cada entidade.</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Execute(Benner.Tecnologia.Common.EntityCommandList,System.Collections.Generic.List{Benner.Tecnologia.Common.TransitoryData})">
            <summary>
            Executa um lote de operações em uma única transação
            </summary>
            <remarks>A execução do comando Save (SaveEntityCommand) não garante que a entidade foi salva.
            Deve ser verificado se há mensagens de erro para cada entidade.</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.GetHandle(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.Criteria)">
            <summary>
            Obtém o Handle de uma determinada entidade com base em um critério de seleção.
            </summary>
            <param name="entityDefinition">Definição da entidade que terá o Handle obtido.</param>
            <param name="criteria">Critério de seleção para obter o Handle.</param>
            <returns>Handle da entidade encontrada com base no critério de seleção.</returns>
            <exception cref="T:Benner.Tecnologia.Common.Exceptions.HandleNotFoundException">Lança uma HandleNotFoundException se não encontrar um Handle com base no critério de seleção informado.</exception>
            <exception cref="T:Benner.Tecnologia.Common.Exceptions.TooManyRowsException">Lança uma TooManyRowsException se encontrar mais de um Handle com base no critério de seleção informado.</exception>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.GetHandle(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.Criteria,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Obtém o Handle de uma determinada entidade com base em um critério de seleção.
            </summary>
            <param name="entityDefinition">Definição da entidade que terá o Handle obtido.</param>
            <param name="criteria">Critério de seleção para obter o Handle.</param>
            <returns>Handle da entidade encontrada com base no critério de seleção.</returns>
            <exception cref="T:Benner.Tecnologia.Common.Exceptions.HandleNotFoundException">Lança uma HandleNotFoundException se não encontrar um Handle com base no critério de seleção informado.</exception>
            <exception cref="T:Benner.Tecnologia.Common.Exceptions.TooManyRowsException">Lança uma TooManyRowsException se encontrar mais de um Handle com base no critério de seleção informado.</exception>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.ConvertFromBase(Benner.Tecnologia.Common.EntityBase)">
            <summary>
            Converte um objeto do tipo base para o tipo da classe atual.
            </summary>
            <param name="source">Objeto de tipo base a ser convertido.</param>
            <returns>Uma nova instância do tipo da classe atual contendo os dados do objeto original.</returns>
            <remarks>Alguns dados são copiados por referência (shallow copy);
            portanto, alterá-los tanto no objeto original como no novo irá
            alterar nos dois objetos.</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.ConvertFromBase(Benner.Tecnologia.Common.EntityBase,System.Boolean)">
            <summary>
            Converte um objeto do tipo base para o tipo da classe atual.
            </summary>
            <param name="source">Objeto de tipo base a ser convertido.</param>
            <param name="forceSpecialization">Força conversão para o tipo especializado da tabela, mesmo que o flag de "Executar entidade especializada" esteja marcado.</param>
            <returns>Uma nova instância do tipo da classe atual contendo os dados do objeto original.</returns>
            <remarks>Alguns dados são copiados por referência (shallow copy);
            portanto, alterá-los tanto no objeto original como no novo irá
            alterar nos dois objetos.</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.ConvertFromBase(Benner.Tecnologia.Common.EntityBase,Benner.Tecnologia.Common.EntityDefinition,System.Boolean)">
            <summary>
            Converte um objeto do tipo base para o tipo da classe atual.
            </summary>
            <param name="source">Objeto de tipo base a ser convertido.</param>
            <param name="definition">Define a entidade que será retornada.</param>
            <param name="forceAssociatedType">Força conversão para o tipo associado à tabela, mesmo que o flag de "Executar entidade especializada" esteja marcado.</param>
            <returns>Uma nova instância do tipo da classe atual contendo os dados do objeto original.</returns>
            <remarks>Alguns dados são copiados por referência (shallow copy);
            portanto, alterá-los tanto no objeto original como no novo irá
            alterar nos dois objetos.</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.InternalConvertFromBase(Benner.Tecnologia.Common.EntityBase,Benner.Tecnologia.Common.EntityDefinition,`0)">
            <summary>
            Converte um objeto do tipo EntityBase para o tipo de destino.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.ConvertSpecializedEntityToEntityBase(Benner.Tecnologia.Common.EntityBase)">
            <summary>
            Converte um entidade especializada para uma EntityBase
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.DoCreateClone(Benner.Tecnologia.Common.EntityDefinition,`0)">
            <summary>
            Cria um clone de outra entidade.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.DoCreateRaw(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.NameValueDictionary,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Cria a entidade sem executar regra de negócio
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Specialize(Benner.Tecnologia.Common.EntityBase,Benner.Tecnologia.Common.EntityDefinition)">
            <summary>
            Cria uma instância de uma entidade de negócio.
            </summary>
            <param name="entity">
            Instância de entidade contendo contendo os dados que serão passados para a nova instância da entidade de negócio. 
            Alguns dados são passados por referência.
            </param>
            <param name="definition">Definição da nova instância de entidade de negócio.</param>
            <returns>Retorna a instância da entidade de négócio criada pelo método.</returns>
            <remarks>
            Utilize este método para obter uma nova instância de entidade de negócio a partir de uma instância simples (não especializada) de uma entidade. 
            Os dados são passados por referência da entidade informada no parâmetro para a nova instância. 
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.DoGetFirstOrDefault(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.Criteria,Benner.Tecnologia.Common.GetMode,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Método criado para unificar o código do GetMany utilizado por todos os métodos GetFirstOrDefault
            </summary>
            <param name="criteria">Parâmetro para filtrar entidades</param>
            <param name="getMode">Modo que a entidade será buscada</param>
            <param name="transitoryData">Dados que podem ser passados para o GetMany</param>
            <returns>Caso o GetMany retorne uma ou mais entidades a primeira entidade é retornada, caso não haja entidades retorna null</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.DoGetFirstOrDefault(Benner.Tecnologia.Common.Components.EntityViewBase,Benner.Tecnologia.Common.Criteria,Benner.Tecnologia.Common.GetMode,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Método criado para unificar o código do GetMany utilizado por todos os métodos GetFirstOrDefault
            </summary>
            <param name="criteria">Parâmetro para filtrar entidades</param>
            <param name="getMode">Modo que a entidade será buscada</param>
            <param name="transitoryData">Dados que podem ser passados para o GetMany</param>
            <returns>Caso o GetMany retorne uma ou mais entidades a primeira entidade é retornada, caso não haja entidades retorna null</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.GetAll(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.GetMode)">
            <summary>
            Obtém todas as instâncias de uma entidade da origem de dados.
            </summary>
            <param name="entityDefinition">A definição das instâncias da entidade a ser obtida.</param>
            <param name="mode">Modo de recuperação da entidade, determinando seu estado após ser obtida.</param>
            <returns>Uma coleção com as instâncias da entidade requisitada.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.GetAll(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.GetMode,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Obtém todas as instâncias de uma entidade da origem de dados.
            </summary>
            <param name="entityDefinition">A definição das instâncias da entidade a ser obtida.</param>
            <param name="mode">Modo de recuperação da entidade, determinando seu estado após ser obtida.</param>
            <param name="transitoryData">Dicionário contendo os dados transitórios.</param>
            <returns>Uma coleção com as instâncias da entidade requisitada.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.GetMany(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.Criteria,Benner.Tecnologia.Common.GetMode)">
            <summary>
            Obtém várias instâncias de entidade da origem de dados.
            </summary>
            <param name="entityDefinition">A definição das instâncias da entidade a ser obtida.</param>
            <param name="criteria">O critério para recuperar a coleção de instâncias da entidade.</param>
            <param name="mode">Modo de recuperação da entidade, determinando seu estado após ser obtida.</param>
            <returns>
            Uma coleção com as instâncias da entidade requisitada.
            </returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.GetMany(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.Criteria,Benner.Tecnologia.Common.GetMode,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Obtém várias instâncias de entidade da origem de dados.
            </summary>
            <param name="entityDefinition">A definição das instâncias da entidade a ser obtida.</param>
            <param name="criteria">O critério para recuperar a coleção de instâncias da entidade.</param>
            <param name="mode">Modo de recuperação da entidade, determinando seu estado após ser obtida.</param>
            <param name="transitoryData">Dicionário contendo os dados transitórios.</param>
            <returns>
            Uma coleção com as instâncias da entidade requisitada.
            </returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.FetchMany(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.Criteria)">
            <summary>
            Obtém várias instâncias de entidade da origem de dados. Retorna um IEnumerable&lt;T&gt;, possibilitando carregamento sob demanda das entidades.
            </summary>
            <param name="entityDefinition">A definição das instâncias da entidade a ser obtida.</param>
            <param name="criteria">O critério para recuperar a coleção de instâncias da entidade.</param>
            <returns>Um IEnumerable para percorrer as instâncias das entidades</returns>
            <remarks>
            Ao contrário do método GetMany, o método FetchMany permite ler entidades sob-demanda, carregando uma de cada vez evitando consumo excessivo de memória.
            
            Ao utilizar este método deve-se utilizar preferênciamente o foreach. 
            Se for utilizar o IEnumerable explicitamente é impressíndível que o Dispose seja chamado, caso contrário corre-se o risco de deixar um cursor aberto no banco de dados.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.FetchMany(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.Criteria,Benner.Tecnologia.Common.GetMode)">
            <summary>
            Obtém várias instâncias de entidade da origem de dados. Retorna um IEnumerable&lt;T&gt;, possibilitando carregamento sob demanda das entidades.
            </summary>
            <param name="entityDefinition">A definição das instâncias da entidade a ser obtida.</param>
            <param name="criteria">O critério para recuperar a coleção de instâncias da entidade.</param>
            <param name="mode">Modo de recuperação da entidade, determinando seu estado após ser obtida.</param>
            <returns>Um IEnumerable para percorrer as instâncias das entidades</returns>
            <remarks>
            Ao contrário do método GetMany, o método FetchMany permite ler entidades sob-demanda, carregando uma de cada vez evitando consumo excessivo de memória.
            
            Ao utilizar este método deve-se utilizar preferênciamente o foreach. 
            Se for utilizar o IEnumerable explicitamente é impressíndível que o Dispose seja chamado, caso contrário corre-se o risco de deixar um cursor aberto no banco de dados.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.FetchMany(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.Criteria,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Obtém várias instâncias de entidade da origem de dados. Retorna um IEnumerable&lt;T&gt;, possibilitando carregamento sob demanda das entidades.
            </summary>
            <param name="entityDefinition">A definição das instâncias da entidade a ser obtida.</param>
            <param name="criteria">O critério para recuperar a coleção de instâncias da entidade.</param>
            <param name="transitoryData">Dicionário contendo os dados transitórios.</param>
            <returns>Um IEnumerable para percorrer as instâncias das entidades</returns>
            <remarks>
            Ao contrário do método GetMany, o método FetchMany permite ler entidades sob-demanda, carregando uma de cada vez evitando consumo excessivo de memória.
            
            Ao utilizar este método deve-se utilizar preferênciamente o foreach. 
            Se for utilizar o IEnumerable explicitamente é impressíndível que o Dispose seja chamado, caso contrário corre-se o risco de deixar um cursor aberto no banco de dados.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.FetchMany(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.Criteria,Benner.Tecnologia.Common.GetMode,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Obtém várias instâncias de entidade da origem de dados. Retorna um IEnumerable&lt;T&gt;, possibilitando carregamento sob demanda das entidades.
            </summary>
            <param name="entityDefinition">A definição das instâncias da entidade a ser obtida.</param>
            <param name="criteria">O critério para recuperar a coleção de instâncias da entidade.</param>
            <param name="mode">Modo de recuperação da entidade, determinando seu estado após ser obtida.</param>
            <param name="transitoryData">Dicionário contendo os dados transitórios.</param>
            <returns>Um IEnumerable para percorrer as instâncias das entidades</returns>
            <remarks>
            Ao contrário do método GetMany, o método FetchMany permite ler entidades sob-demanda, carregando uma de cada vez evitando consumo excessivo de memória.
            
            Ao utilizar este método deve-se utilizar preferênciamente o foreach. 
            Se for utilizar o IEnumerable explicitamente é impressíndível que o Dispose seja chamado, caso contrário corre-se o risco de deixar um cursor aberto no banco de dados.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.CachedGet(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.Criteria,Benner.Tecnologia.Common.GetMode,Benner.Tecnologia.Common.TransitoryData,System.Func{Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.Criteria,Benner.Tecnologia.Common.GetMode,Benner.Tecnologia.Common.TransitoryData,`0})">
            <summary>
            Obtém um único registro, potencialmente utilizando cache.
            </summary>
            <param name="entityDefinition">Definição de entidade a utilizar.</param>
            <param name="criteria">Critério de seleção que identifique um único registro.</param>
            <param name="mode">Modo em que o registro deve estar após a recuperação.</param>
            <param name="action">Método de obtenção de dados.</param>
            <returns>Uma nova instância da entidade com os dados.</returns>
            <remarks>
            Observação: Atualmente este cache só funciona quando o criteria especifica um único registro.
            O objeto Criteria pode definir outros parâmetros que não estão sendo levados em conta aqui.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Call(Benner.Tecnologia.Common.Components.EntityViewBase,System.String,Benner.Tecnologia.Common.Entities{`0})">
            <summary>
            Executa uma função de uma entidade.
            </summary>
            <param name="entityView">Visão da definição da entidade cuja função será executada.</param>
            <param name="functionName">Nome da função a ser executada.</param>
            <param name="entities">Coleção de entidades nas quais a função será executada.</param>
            <returns>Dicionário de informações que são manipuladas durante a execução de uma função, independente de seu mecanismo.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Call(Benner.Tecnologia.Common.Components.EntityViewBase,System.String,Benner.Tecnologia.Common.Entities{`0},Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Executa uma função de uma entidade.
            </summary>
            <param name="entityView">Visão da definição da entidade cuja função será executada.</param>
            <param name="functionName">Nome da função a ser executada.</param>
            <param name="entities">Coleção de entidades nas quais a função será executada.</param>
            <returns>Dicionário de informações que são manipuladas durante a execução de uma função, independente de seu mecanismo.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Call(Benner.Tecnologia.Common.Components.EntityViewBase,Benner.Tecnologia.Common.FunctionDefinition,Benner.Tecnologia.Common.Entities{`0},Benner.Tecnologia.Common.EntityBase)">
            <summary>
            Executa uma função de uma entidade.
            </summary>
            <param name="entityView">Visão da definição da entidade cuja função será executada.</param>
            <param name="functionDefinition">Definição da função a ser executada.</param>
            <param name="entities">Coleção de entidades nas quais a função será executada.</param>
            <param name="dataEntity">Dados adicionais a serem utilizados pela função (opcional).</param>
            <returns>Dicionário de informações que são manipuladas durante a execução de uma função, independente de seu mecanismo.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Call(Benner.Tecnologia.Common.Components.EntityViewBase,Benner.Tecnologia.Common.FunctionDefinition,Benner.Tecnologia.Common.Entities{`0},Benner.Tecnologia.Common.EntityBase,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Executa uma função de uma entidade.
            </summary>
            <param name="entityView">Visão da definição da entidade cuja função será executada.</param>
            <param name="functionDefinition">Definição da função a ser executada.</param>
            <param name="entities">Coleção de entidades nas quais a função será executada.</param>
            <param name="dataEntity">Dados adicionais a serem utilizados pela função (opcional).</param>
            <returns>Dicionário de informações que são manipuladas durante a execução de uma função, independente de seu mecanismo.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Call(Benner.Tecnologia.Common.Components.EntityViewBase,Benner.Tecnologia.Common.FunctionDefinition,System.Collections.Generic.List{Benner.Tecnologia.Common.Handle},Benner.Tecnologia.Common.EntityBase)">
            <summary>
            Executa uma função de uma entidade.
            </summary>
            <param name="entityView">Visão da definição da entidade cuja função será executada.</param>
            <param name="functionDefinition">Definição da função a ser executada.</param>
            <param name="handles">Coleção de handles de entidades nas quais a função será executada.</param>
            <param name="dataEntity">Dados adicionais a serem utilizados pela função (opcional).</param>
            <returns>Dicionário de informações que são manipuladas durante a execução de uma função, independente de seu mecanismo.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Call(Benner.Tecnologia.Common.Components.EntityViewBase,Benner.Tecnologia.Common.FunctionDefinition,System.Collections.Generic.List{Benner.Tecnologia.Common.Handle},Benner.Tecnologia.Common.EntityBase,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Executa uma função de uma entidade.
            </summary>
            <param name="entityView">Visão da definição da entidade cuja função será executada.</param>
            <param name="functionDefinition">Definição da função a ser executada.</param>
            <param name="handles">Coleção de handles de entidades nas quais a função será executada.</param>
            <param name="dataEntity">Dados adicionais a serem utilizados pela função (opcional).</param>
            <returns>Dicionário de informações que são manipuladas durante a execução de uma função, independente de seu mecanismo.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Call(Benner.Tecnologia.Common.Components.EntityViewBase,Benner.Tecnologia.Common.FunctionDefinition,Benner.Tecnologia.Common.Criteria,Benner.Tecnologia.Common.EntityBase)">
            <summary>
            Executa uma função de uma entidade.
            </summary>
            <param name="entityView">Visão da definição da entidade cuja função será executada.</param>
            <param name="functionDefinition">Definição da função a ser executada.</param>
            <param name="targetCriteria">Critérios de seleção dos registros nos quais a função será executada.</param>
            <param name="dataEntity">Dados adicionais a serem utilizados pela função (opcional).</param>
            <returns>Dicionário de informações que são manipuladas durante a execução de uma função, independente de seu mecanismo.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Call(Benner.Tecnologia.Common.Components.EntityViewBase,Benner.Tecnologia.Common.FunctionDefinition,Benner.Tecnologia.Common.Criteria,Benner.Tecnologia.Common.EntityBase,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Executa uma função de uma entidade.
            </summary>
            <param name="entityView">Visão da definição da entidade cuja função será executada.</param>
            <param name="functionDefinition">Definição da função a ser executada.</param>
            <param name="targetCriteria">Critérios de seleção dos registros nos quais a função será executada.</param>
            <param name="dataEntity">Dados adicionais a serem utilizados pela função (opcional).</param>
            <returns>Dicionário de informações que são manipuladas durante a execução de uma função, independente de seu mecanismo.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Call(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.FunctionDefinition,Benner.Tecnologia.Common.Criteria,Benner.Tecnologia.Common.EntityBase,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Executa uma função de uma entidade.
            </summary>
            <param name="targetEntityDefinition">Definição da entidade cuja função será executada.</param>
            <param name="functionDefinition">Definição da função a ser executada.</param>
            <param name="targetCriteria">Critérios de seleção dos registros nos quais a função será executada.</param>
            <param name="dataEntity">Dados adicionais a serem utilizados pela função (opcional).</param>
            <returns>Dicionário de informações que são manipuladas durante a execução de uma função, independente de seu mecanismo.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Call(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.FunctionDefinition,Benner.Tecnologia.Common.Criteria,Benner.Tecnologia.Common.EntityBase,Benner.Tecnologia.Common.EntityBase,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Executa uma função de uma entidade.
            </summary>
            <param name="targetEntityDefinition">Definição da entidade cuja função será executada.</param>
            <param name="functionDefinition">Definição da função a ser executada.</param>
            <param name="targetCriteria">Critérios de seleção dos registros nos quais a função será executada.</param>
            <param name="currentEntity">Entidade que será executada a função.</param>
            <param name="dataEntity">Dados adicionais a serem utilizados pela função (opcional).</param>
            <returns>Dicionário de informações que são manipuladas durante a execução de uma função, independente de seu mecanismo.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Call(Benner.Tecnologia.Common.EntityDefinition,System.String,Benner.Tecnologia.Common.Entities{`0})">
            <summary>
            Executa uma função de uma entidade.
            </summary>
            <param name="targetEntityDefinition">Definição da entidade cuja função será executada.</param>
            <param name="functionName">Nome da função a ser executada.</param>
            <param name="entities">Coleção de entidades nas quais a função será executada.</param>
            <returns>Dicionário de informações que são manipuladas durante a execução de uma função, independente de seu mecanismo.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Call(Benner.Tecnologia.Common.EntityDefinition,System.String,Benner.Tecnologia.Common.Entities{`0},Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Executa uma função de uma entidade.
            </summary>
            <param name="targetEntityDefinition">Definição da entidade cuja função será executada.</param>
            <param name="functionName">Nome da função a ser executada.</param>
            <param name="entities">Coleção de entidades nas quais a função será executada.</param>
            <returns>Dicionário de informações que são manipuladas durante a execução de uma função, independente de seu mecanismo.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Call(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.FunctionDefinition,Benner.Tecnologia.Common.Entities{`0},Benner.Tecnologia.Common.EntityBase)">
            <summary>
            Executa uma função de uma entidade.
            </summary>
            <param name="targetEntityDefinition">Definição da entidade cuja função será executada.</param>
            <param name="functionDefinition">Definição da função a ser executada.</param>
            <param name="entities">Coleção de entidades nas quais a função será executada.</param>
            <param name="dataEntity">Dados adicionais a serem utilizados pela função (opcional).</param>
            <returns>Dicionário de informações que são manipuladas durante a execução de uma função, independente de seu mecanismo.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Call(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.FunctionDefinition,Benner.Tecnologia.Common.Entities{`0},Benner.Tecnologia.Common.EntityBase,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Executa uma função de uma entidade.
            </summary>
            <param name="targetEntityDefinition">Definição da entidade cuja função será executada.</param>
            <param name="functionDefinition">Definição da função a ser executada.</param>
            <param name="entities">Coleção de entidades nas quais a função será executada.</param>
            <param name="dataEntity">Dados adicionais a serem utilizados pela função (opcional).</param>
            <returns>Dicionário de informações que são manipuladas durante a execução de uma função, independente de seu mecanismo.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Call(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.FunctionDefinition,System.Collections.Generic.List{Benner.Tecnologia.Common.Handle},Benner.Tecnologia.Common.EntityBase)">
            <summary>
            Executa uma função de uma entidade.
            </summary>
            <param name="targetEntityDefinition">Definição da entidade cuja função será executada.</param>
            <param name="functionDefinition">Definição da função a ser executada.</param>
            <param name="handles">Coleção de handles de entidades nas quais a função será executada.</param>
            <param name="dataEntity">Dados adicionais a serem utilizados pela função (opcional).</param>
            <returns>Dicionário de informações que são manipuladas durante a execução de uma função, independente de seu mecanismo.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Call(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.FunctionDefinition,System.Collections.Generic.List{Benner.Tecnologia.Common.Handle},Benner.Tecnologia.Common.EntityBase,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Executa uma função de uma entidade.
            </summary>
            <param name="targetEntityDefinition">Definição da entidade cuja função será executada.</param>
            <param name="functionDefinition">Definição da função a ser executada.</param>
            <param name="handles">Coleção de handles de entidades nas quais a função será executada.</param>
            <param name="dataEntity">Dados adicionais a serem utilizados pela função (opcional).</param>
            <returns>Dicionário de informações que são manipuladas durante a execução de uma função, independente de seu mecanismo.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Call(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.FunctionDefinition,Benner.Tecnologia.Common.Criteria,Benner.Tecnologia.Common.EntityBase)">
            <summary>
            Executa uma função de uma entidade.
            </summary>
            <param name="targetEntityDefinition">Definição da entidade cuja função será executada.</param>
            <param name="functionDefinition">Definição da função a ser executada.</param>
            <param name="targetCriteria">Critérios de seleção dos registros nos quais a função será executada.</param>
            <param name="dataEntity">Dados adicionais a serem utilizados pela função (opcional).</param>
            <returns>Dicionário de informações que são manipuladas durante a execução de uma função, independente de seu mecanismo.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Call(Benner.Tecnologia.Common.EntityDefinition,System.String,Benner.Tecnologia.Common.EntityBase,Benner.Tecnologia.Common.NameValueDictionary)">
            <summary>
            Executa uma função de uma entidade.
            </summary>        
            <param name="entityDefinition">Definição da entidade cuja função será executada.</param>
            /// <param name="functionName">Nome da função</param>
            <param name="dataEntity">Dados adicionais a serem utilizados pela função (opcional).</param>
            <param name="transitoryVars">Dados adicionais a serem utilizados pela função (opcional).</param>
            <returns>Retorno da execução da função</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Call(Benner.Tecnologia.Common.EntityDefinition,System.String,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Executa uma função de uma entidade.
            </summary>        
            <param name="entityDefinition">Definição da entidade cuja função será executada.</param>
            /// <param name="functionName">Nome da função</param>
            <param name="transitoryData">Dados adicionais a serem utilizados pela função (opcional)</param>
            <returns>Retorno da execução da função</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Call(Benner.Tecnologia.Common.EntityDefinition,System.String,Benner.Tecnologia.Common.EntityBase,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Executa uma função de uma entidade.
            </summary>        
            <param name="entityDefinition">Definição da entidade cuja função será executada.</param>
            <param name="functionName">Nome da função</param>
            <param name="dataEntity">Dados adicionais a serem utilizados pela função (opcional)</param>
            <param name="transitoryData">Dados adicionais a serem utilizados pela função (opcional)</param>
            <returns>Retorno da execução da função</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityBase`1.Call(Benner.Tecnologia.Common.EntityDefinition,System.String,Benner.Tecnologia.Common.EnterpriseServiceLibrary.Request,Benner.Tecnologia.Common.EntityBase,Benner.Tecnologia.Common.TransitoryData)">
            <summary>
            Executa uma função da entidade passando um documento estruturado (dto) para a lógica de negócio
            </summary>
            <param name="functionName">Nome da função</param>
            <param name="request">Documento estruturado</param>
            <param name="dataEntity">Dados adicionais a serem utilizados pela função (opcional)</param>
            <param name="transitoryData">Dados adicionais a serem utilizados pela função (opcional)</param>
            <returns>Retorno da execução da função</returns>
        </member>
        <member name="F:Benner.Tecnologia.Common.EntityDefinition.Version">
            <summary>Número da versão da definição da classe EntityDefinition</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityDefinition.#ctor(System.String)">
            <summary> Inicializa uma nova instância de EntityDefinition. </summary>
            <param name="name">Nome da definição de entidade.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityDefinition.#ctor">
            <summary>Criado para o Sharepoint conseguir serializar</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityDefinition.Name">
            <summary>Nome da definição da entidade.</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityDefinition.IsReadOnlyEntity">
            <summary> Indica se a tabela no Builder está marcada como "Só leitura". </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityDefinition.EntitySource">
            <summary>Origem da fonte de dados.</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityDefinition.FieldDefinitions">
            <summary>Lista de definições de campos da entidade (Metadados).</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityDefinition.LayoutDefinitions">
            <summary>definição de layout conforme está no builder (Metadados).</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityDefinition.Functions">
            <summary>Lista de ações (comandos) da entidade</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityDefinition.GetByName(System.String)">
            <summary> Obtém a definição de uma entidade por seu nome. </summary>
            <overloads>
            Obtém a definição de uma entidade por seu nome.
            </overloads>
            <param name="name">Nome da definição de entidade.</param>
            <returns>definição de entidade cujo nome foi passado por par�metro.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityDefinition.IsMetadataDefinition">
            <summary>Indica se a definição é de algum metadado, por exemplo: W_SCRIPTS, W_ENTIDADES, W_ENTIDADEVISOES</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityDefinition.op_Implicit(Benner.Tecnologia.Common.EntityDefinition)~Benner.Tecnologia.Common.EntityDescription">
            <summary> Operador de conversão implícita para EntityDescription. </summary>
            <param name="entityDefinition">A instância da definição de entidade.</param>
            <returns>Uma instância de EntityDescription.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityDefinition.ChangeToDynamicDefinition">
            <summary> Altera as características desta instância tornando-a uma "definição Dinâmica". </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityDefinition.FromQuery(System.String)">
            <summary>
            Cria uma definição de entidade de QuerySource a partir de um comando SQL
            </summary>
            <param name="commandText">Comando SQL</param>
            <returns>definição de entidade</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityDefinition.ValidateStructuredTableDefinition">
            <summary>
            Verifica se a definição de entidade é válida para uma tabela estruturada
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityDefinition.GetStructuredDescriptionFieldName">
            <summary>
            Obtem o campo que exibi o nome da estrutura
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityDefinition.GetStructuredFieldName">
            <summary>
            Obtem o campo que exibi a estrutura
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityDefinition.Title">
            <summary>Título da definição da entidade.</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityDefinition.CreateEntityService">
            <summary>Cria um data service.</summary>
            <returns>Uma nova instância de IEntityService adequada à origem de dados da entidade.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityDefinition.GetFieldDefinitionByName(System.String)">
            <summary>
            Recupera um FieldDefinition da lista FieldDefinitions a partir do nome.
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityDefinition.GetFunctionDefinitionByName(System.String)">
            <summary>
            Recupera um FunctionDefinition da lista Functions a partir do nome
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityDefinition.Deserialize(System.String,System.String,System.Int64,Benner.Tecnologia.Common.Handle)">
            <summary>Deserializar um objeto EntityDefinition</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityDefinition.CreateTestEntityDefinition(System.String,System.String,Benner.Tecnologia.Common.FieldDefinition[])">
            <summary>
            Cria uma definição de entidade de testes adicionando-a no cache de definições de entidade. Utilizado em testes automatizados
            O EntitySource da definição é do tipo TestSource
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityDefinition.GetByName(System.String,Benner.Tecnologia.Common.GetMode)">
            <summary>
            Obtém a definição de uma entidade por seu nome.
            </summary>
            <param name="name">Nome da definição de entidade.</param>
            <param name="mode">Modo de obtenção - se para edição ou leitura.</param>
            <returns>Definição de entidade cujo nome foi passado por parâmetro.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityDefinition.ExistsByName(System.String)">
            <summary>
            Verifica a existência de uma definição de entidade por seu nome.
            </summary>
            <overloads>
            Verifica a existência de uma definição de entidade por seu nome.
            </overloads>
            <param name="name">Nome da definição de entidade.</param>
            <returns>Retorna true se a definição de entidade existe, caso contrário retona false.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityDefinition.IsCacheable">
            <summary>
            Retorna true se a definição de entidade pode ser mantida em cache.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityDefinition.FromDataSourceDefinition(Benner.Tecnologia.Common.DataSources.Definition.DataSourceDefinition,System.Boolean)">
            <summary>
            Cria uma definição de entidade a partir de uma definição de consulta
            </summary>
            <param name="dataSourceDefinition">Definição da consulta</param>
            <returns>Definição de entidade</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.EntityState">
            <summary>
            Estados que uma entidade pode assumir em relação à sua persistência.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.EntityState.New">
            <summary>
            A entidade foi instanciada mas não inicializada.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.EntityState.Initialized">
            <summary>
            A entidade foi inicializada e representa um novo objeto.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.EntityState.Read">
            <summary>
            A entidade foi lida da base de dados.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.EntityState.Editing">
            <summary>
            A entidade está sendo editada.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.EntityState.Deleted">
            <summary>
            A entidade foi excluída.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Handle">
            <summary>
            Representa um Handle do sistema Benner, que é uma chave primária de uma tabela.
            </summary>
            <remarks>
            Este tipo armazena um número de 64 bits com sinal.
            Handles válidos na base de dados são aqueles não nulos ("geralmente" são um número não negativo, podem existir exceções).
            Um handle com valor null indica um objeto não persistido.
            </remarks>    
        </member>
        <member name="M:Benner.Tecnologia.Common.Handle.#ctor">
            <summary>
            Inicializa um Handle.
            </summary>
            
        </member>
        <member name="M:Benner.Tecnologia.Common.Handle.#ctor(System.Nullable{System.Int64})">
            <summary>
            Inicializa um novo Handle.
            </summary>
            <param name="value">Valor do handle.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Handle.#ctor(System.String)">
            <summary>
            Inicializa um novo Handle.
            </summary>
            <param name="valueString">String representando o valor numérico do handle.</param>
        </member>
        <member name="P:Benner.Tecnologia.Common.Handle.Value">
            <summary>
            Valor inteiro do handle.
            </summary>
            <remarks>
            Este inteiro corresponde a uma chave primária na base de dados.
            Caso esteja inválido, ocorerrá uma exceção.
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.Handle.NullableValue">
            <summary>
            Valor inteiro do handle.
            </summary>
            <remarks>
            Este inteiro corresponde a uma chave primária na base de dados.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Handle.CompareTo(System.Object)">
            <summary>
            Compara o objeto corrente com outro objeto do mesmo tipo.
            </summary>
            <param name="obj">Objeto a ser utilizado na comparação.</param>
            <returns>Um inteiro menor do que zero se o objeto corrente for menor do que o especificado;
            zero se forem iguais; um inteiro maior do que zero se o objeto corrente for maior do que
            o especificado.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Handle.op_Implicit(System.Int64)~Benner.Tecnologia.Common.Handle">
            <summary>
            Operador de conversão implícita de valor para Handle.
            </summary>
            <param name="value">Valor a ser convertido.</param>
            <returns>Um objeto Handle contendo o valor especificado.</returns>
            <remarks>
            Este operador facilita a criação de um objeto Handle para representar
            uma chave primária numérica.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Handle.op_Implicit(System.Decimal)~Benner.Tecnologia.Common.Handle">
            <summary>
            Operador de conversão implícita de valor decimal para Handle.
            </summary>
            <param name="value">Valor a ser convertido.</param>
            <returns>Um objeto Handle contendo o valor especificado.</returns>
            <remarks>
            Este operador facilita a criação de um objeto Handle para representar
            uma chave primária numérica.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Handle.op_Implicit(Benner.Tecnologia.Common.Handle)~System.Int64">
            <summary>
            Operador de conversão implícita para um long.
            </summary>
            <param name="handle">Objeto a ser convertido.</param>
            <returns>O valor do handle.</returns>
            <remarks>
            Este operador facilita a obtenção do valor numérico do handle.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Handle.GetHashCode">
            <summary>
            Retorna o código hash para este objeto.
            </summary>
            <returns>O código hash na forma de um número inteiro.</returns>
            <remarks>
            Quando o valor é nulo, o retorno será long.MinValue.GetHashCode(), diferenciando de quando o valor é zero.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Handle.ToString">
            <summary>
            Retorna uma string que representa o handle.
            </summary>
            <returns>Uma string representando o valor numérico do handle.</returns>
            <remarks>Quando o valor é nulo, o retorno será string.Empty.</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Handle.Equals(System.Object)">
            <summary>
            Determina se o objeto especificado é igual ao objeto corrente.
            </summary>
            <param name="obj">O objeto a ser comparado com o objeto corrente.</param>
            <returns>true se o objeto especificado é igual ao objeto corrente; false se forem diferentes.</returns>
            <remarks>
            Dois handles são considerados iguais se possuírem o mesmo valor, ou se ambos forem nulos.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Handle.Equals(Benner.Tecnologia.Common.Handle)">
            <summary>
            Determina se o handle especificado é igual ao handle corrente.
            </summary>
            <param name="handle">O handle a ser comparado com o handle corrente.</param>
            <returns>true se o handle especificado é igual ao handle corrente; false se forem diferentes.</returns>
            <remarks>
            Dois handles são considerados iguais se possuírem o mesmo valor, ou se ambos forem nulos.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Handle.op_Equality(Benner.Tecnologia.Common.Handle,Benner.Tecnologia.Common.Handle)">
            <summary>
            Verifica se dois handles possuem o mesmo valor.
            </summary>
            <param name="x">Um dos handles a serem comparados.</param>
            <param name="y">Outro handle a ser comparado.</param>
            <returns>true se o valor dos dois handles for o mesmo, ou se ambos forem nulos; false se os valores forem diferentes.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Handle.op_Inequality(Benner.Tecnologia.Common.Handle,Benner.Tecnologia.Common.Handle)">
            <summary>
            Verifica se dois handles possuem valores diferentes.
            </summary>
            <param name="x">Um dos handles a serem comparados.</param>
            <param name="y">Outro handle a ser comparado.</param>
            <returns>true se os valores dos dois handles forem diferentes; false se os valores forem iguais, ou se ambos forem nulos.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Benner.Tecnologia.Common.Handle.op_LessThan(Benner.Tecnologia.Common.Handle,Benner.Tecnologia.Common.Handle)" -->
        <member name="M:Benner.Tecnologia.Common.Handle.op_GreaterThan(Benner.Tecnologia.Common.Handle,Benner.Tecnologia.Common.Handle)">
            <summary>
            Verifica se um handle é maior do que outro.
            </summary>
            <param name="x">O handle a ser verificado.</param>
            <param name="y">O handle a ser utilizado na comparação.</param>
            <returns>true se o primeiro handle é maior do que o outro; false se for menor ou igual.</returns>
            <remarks>
            'Handle' should define operator '>' since it implements IComparable.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.Handle.IsValid">
            <summary>
            Verifica se o valor do handle é válido.
            </summary>
            <returns>true se o valor for válido; false se for inválido.</returns>
            <remark>
            Um valor de handle é válido quando for diferente de null.
            </remark>
        </member>
        <member name="M:Benner.Tecnologia.Common.Handle.IsInvalid">
            <summary>
            Verifica se o valor do handle é inválido.
            </summary>
            <returns>true se o valor for inválido; false se for válido.</returns>
            <remark>
            Um valor de handle é inválido quando for null.
            </remark>
        </member>
        <member name="M:Benner.Tecnologia.Common.Handle.IsInvalid(Benner.Tecnologia.Common.Handle)">
            <summary>
            Verifica se um handle é inválido.
            </summary>
            <returns>true se o valor for inválido; false se for válido.</returns>
            <remark>
            Um handle é inválido quando ele ou seu valor for null.
            </remark>
        </member>
        <member name="M:Benner.Tecnologia.Common.Handle.IsValid(Benner.Tecnologia.Common.Handle)">
            <summary>
            Verifica se um handle é válido.
            </summary>
            <returns>true se o valor for válido; false se for inválido.</returns>
            <remark>
            Um handle é válido quando seu valor for diferente de null.
            </remark>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityAssociation.TargetEntityDefinition">
            <summary>
            Recupera a definição do TargetEntity.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityAssociation.StubInstance">
            <summary>
            Retorna a instancia carregada apenas com os campos de resultado.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityAssociation.LocalWhere">
            <summary>
            Esta propriedade contém cláusula LocalWhere ou WebLocalWhere atribuído via macro.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityAssociation.IsLoaded">
            <summary>
            Retorna um valor indicando se a entidade está carregada.
            </summary>
            <returns>true se a entidade estiver carregada, falso se não estiver.</returns>
            <remarks>
            Considera-se carregada uma entidade que não esteja no seu estado inicial (ou seja, quando Estado é diferente de New) ou que tenha todos os campos preenchidos.
            Também é considerada carregada, quando todos os campos da entidade já estão no Stub
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityAssociation.DoLoad(Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.Handle)">
            <summary>
            Retorna uma instância de entidade, em modo Raw (sem executar lógica de negócio), resolvendo todos os campos de resultado (LookupResultBehavior = ResultAtAnyLevel).
            </summary>
            <param name="entityDefinition">Definição do TargetEntity.</param>
            <param name="handle">O Handle do TargetEntity.</param>
            <returns>A entidade carregada no tipo correto</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityAssociation.Wrap``1">
            <summary>
            Obtem uma instancia de EntityAssociation tipado
            </summary>
            <typeparam name="T">Tipo do retorno (EntityBase)</typeparam>                
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityAssociation.Wrap``1(System.Func{Benner.Tecnologia.Common.EntityDefinition,Benner.Tecnologia.Common.Criteria,Benner.Tecnologia.Common.GetMode,Benner.Tecnologia.Common.EntityBase})">
            <summary>
            Obtem uma instancia de EntityAssociation tipado
            </summary>
            <typeparam name="T">Tipo da instância</typeparam>
            <param name="getAction">Método de utilizado para recuperar a instância</param>
            <returns></returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityAssociation.Instance">
            <summary>
            A instância é carregada utilizando Lazy Load. É possível acessar a instância Stub, apenas com os campos de resultado através da propriedade StubInstance.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityAssociation.IsResultFieldLoaded">
            <summary>
            Retorna um valor indicando se o campo de resultado está carregado.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityAssociation.StubInstanceContainField(System.String)">
            <summary>
            Indica se o campo de resultado está carregado na StubInstance
            </summary>
            <param name="resultFieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityAssociation.LoadAssociationInstance">
            <summary>
            Carrega o StubInstance da entidade associada
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.IEntityRelationship">
            <summary>
            Esta interface é utilizada pelo EntityAssociationProxy para fazer interoperabilidade com o Delphi.
            Tanto para campos LOOKUP quanto para campos FILTRO.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.ExceptionSourceLayer">
            <summary>
            Enumerador que indica a camada na qual se origina uma exceção.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.ExceptionSourceLayer.WesPresentationLayer">
            <summary>
            Servidor de apresentação
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.ExceptionHelper">
            <summary>
            Classe utilitária para tratamento de exceção
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.ExceptionHelper.RegexNameServer">
            <summary>
            Expressão regular para o reconhecimento do nome do servidor na mensagem.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.ExceptionHelper.RecoverExceptionIdentifier(System.Exception)">
            <summary>
            Recupera o identificador de uma exceção procurando nas Inner. Caso não encontre, o retorno é um Guid.Empty
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.ExceptionHelper.HideMessageServerName(System.Exception)">
            <summary>
            Altera a mensagem escondendo o nome do servidor para outro valor
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.FieldPropertyDescriptor">
            <summary>
            PropertyDescriptor para um item da coleção Fields da classe Entity.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldPropertyDescriptor.#ctor(Benner.Tecnologia.Common.EntityDefinition,System.String,System.Type,System.Attribute[])">
            <summary>
            Initializes a new instance of the PropertyDescriptor class
            with the specified name, property type and attributes.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.FieldPropertyDescriptor.DisplayName">
            <summary>
            Gets the name that can be displayed in a window, such as a Properties window.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.FieldPropertyDescriptor.ComponentType">
            <summary>
            Gets the type of the component this property is bound to.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.FieldPropertyDescriptor.IsReadOnly">
            <summary>
            Gets a value indicating whether this property is read-only.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.FieldPropertyDescriptor.PropertyType">
            <summary>
            Gets the type of the property.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldPropertyDescriptor.GetValue(System.Object)">
            <summary>
            Gets the current value of the property on a component.
            </summary>
            <param name="component">The component with the property for which to retrieve the value.</param>
            <returns>The value of a property for a given component.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            Returns whether resetting an object changes its value.
            </summary>
            <param name="component">The component to test for reset capability.</param>
            <returns>true if resetting the component changes its value; otherwise, false.</returns>
            <remarks>Nesta implementação, retorna sempre false porque
            a reinicialização de valor não é suportada.</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            Resets the value for this property of the component to the default value.
            </summary>
            <remarks>Esta operação não é suportada.</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the component to a different value.
            </summary>
            <param name="component">The component with the property value that is to be set.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            Determines a value indicating whether the value of this property needs to be persisted.
            </summary>
            <param name="component">The component with the property to be examined for persistence.</param>
            <returns>true if the property should be persisted; otherwise, false.</returns>
            <remarks>Nesta implementação retorna sempre false.</remarks>
        </member>
        <member name="T:Benner.Tecnologia.Common.FunctionEngineType">
            <summary>
            Enumerador que indica os tipos de mecanismos suportados para o disparo de funções.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.FunctionEngineType.Sax">
            <summary>Identifica um mecanismo de funções de Sax.</summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.FunctionEngineType.SaxWes2006">
            <summary>Identifica um mecanismo de funções de Sax compatível com as "ações do Wes 2006".</summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.FunctionEngineType.EntityMethod">
            <summary>Identifica um mecanismo de funções que executa um método da entidade de negócio.</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.ImageUtility.BennerImageToImage(System.Byte[])">
            <summary>
            Converter a image do formato Benner para o formato normal
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.ImageUtility.ReadImageFromFile(System.String)">
            <summary>
            Lê uma image do disco no formato Benner
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.ImageUtility.ImageToBennerImage(System.IO.Stream,System.String)">
            <summary>
            Adiciona 4 bytes no início do stream representando o tipo da imagem
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.LookupResultBehavior">
            <summary>
            Indica o comportamento para resolver campos de reultado de lookup.
            </summary>
            <remarks>
            O comportamento pode ser informado pois em determinadas situações o campo de resultado de um lookup
            pode ser um campo tipo lookup, esta recursividade pode ir bem longe, porém, em determinadas situações
            é desnecessário resolver os campos de resultado de lookup.
            </remarks>
        </member>
        <member name="F:Benner.Tecnologia.Common.LookupResultBehavior.Default">
            <summary>O Serviço de Entidades utiliza o comportamento padrão.</summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.LookupResultBehavior.WithoutResult">
            <summary>Não resolve os campos de resultado.</summary>
            <remarks>Monta a lista de campos sem join.</remarks>
        </member>
        <member name="F:Benner.Tecnologia.Common.LookupResultBehavior.ResultAtFirstLevelOnly">
            <summary>Resolve campos de resultado apenas do primeiro nível.</summary>
            <remarks>Monta a lista de campos com joins apenas do primeiro nível (pois no caso de uma gravação é o que basta).</remarks>
        </member>
        <member name="F:Benner.Tecnologia.Common.LookupResultBehavior.ResultAtAnyLevel">
            <summary>Resolve campos de resultado independente do nível qu</summary>
            <remarks>Monta a lista de campos com joins recursivos até o último nível.</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.ObjectCloner.Clone(System.Object)">
            <summary>
            [Não utilizar para metadados] Clona um objeto.
            </summary>        
            <param name="obj">Objeto a ser clonado.</param>
            <returns>Um novo objeto que é uma cópia do objeto fornecido.</returns>
            <remarks>
            Não utilizar para metadados:
            EntityDefinition
            GridDefinition
            FormDefinition
            Utilizar o método Clone da própria instancia da classe do metadado
            <para>O objeto a ser clonado deve ser serializável.</para>
            </remarks>
        </member>
        <member name="T:Benner.Tecnologia.Common.FilterUtility">
            <summary>
            Helper class for filtering collections of custom objects.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.FilterUtility.Filter(System.Collections.IEnumerable,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Returns a filtered version of a provided collection. Function argument is not altered by the method.
            </summary>
            <param name="collection">Collection to be filtered.</param>
            <param name="filters">A dictionary of property name and value pairs.</param>
            <returns>Filtered collection. <i>Returned collection type will be List&lt;object&gt;.</i></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Benner.Tecnologia.Common.FilterUtility.Filter``1(System.Collections.Generic.List{``0},System.Collections.Generic.IDictionary{System.String,System.Object})" -->
        <member name="T:Benner.Tecnologia.Common.ReflectionHelper">
            <summary>
            Helper class for working with Reflection.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.ReflectionHelper.GetPropertyValue(System.Object,System.String)">
            <summary>
            Gets a property value of an object including any subproperties.
            </summary>
            <param name="obj">Object whose value is to be retrieved.</param>
            <param name="propertyName">Name of a property to get value from. Can be a nested property such as Client.Name.</param>
            <returns>Value of the property.</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.SortUtility">
            <summary>
            Helper class for sorting collections of custom objects.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.SortUtility.Sort(System.Collections.IEnumerable,System.String)">
            <summary>
            Returns a sorted version of a provided collection. Function argument is not altered by the method.
            </summary>
            <param name="collection">Collection to be sorted.</param>
            <param name="propertyName">Name of a property to sort by.</param>
            <returns>Sorted collection. <i>Returned collection type will be List&lt;object&gt;.</i></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.SortUtility.Sort(System.Collections.IEnumerable,System.String,System.Boolean)">
            <summary>
            Returns a sorted version of a provided collection. Function argument is not altered by the method.
            </summary>
            <param name="collection">Collection to be sorted.</param>
            <param name="propertyName">Name of a property to sort by.</param>
            <param name="reverse">When true, the collection will be sorted in reverse order.</param>
            <returns>Sorted collection. <i>Returned collection type will be List&lt;object&gt;.</i></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.SortUtility.Sort``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Returns a sorted version of a provided collection. Function argument is not altered by the method.
            </summary>
            <typeparam name="T">Type of a generic IEnumerable.</typeparam>
            <param name="collection">Collection to be sorted.</param>
            <param name="propertyName">Name of a property to sort by.</param>
            <returns>Sorted collection.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.SortUtility.Sort``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Boolean)">
            <summary>
            Returns a sorted version of a provided collection. Function argument is not altered by the method.
            </summary>
            <typeparam name="T">Type of a generic IEnumerable.</typeparam>
            <param name="collection">Collection to be sorted.</param>
            <param name="propertyName">Name of a property to sort by.</param>
            <param name="reverse">When true, the collection will be sorted in reverse order.</param>
            <returns>Sorted collection.</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.AdministrationServiceConfigurationNotFound">
            <summary>
              Looks up a localized string similar to A seção administrationServiceConfiguration do arquivo de configuração não foi encontrada..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.BennerConfigurationNotFound">
            <summary>
              Looks up a localized string similar to A seção bennerConfiguration do arquivo de configuração não foi encontrada..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.BusinessExceptionDefaultMessage">
            <summary>
              Looks up a localized string similar to As configurações ou os dados entrados pelo usuário são inconsistentes..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.CannotSort">
            <summary>
              Looks up a localized string similar to Não é possível ordenar {0} por {1}..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.CreateEntityServiceError">
            <summary>
              Looks up a localized string similar to Não foi possível criar um objeto do serviço de dados..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.DeserializationContentRequired">
            <summary>
              Looks up a localized string similar to O conteúdo a ser deserializado é obrigatório..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.DictionaryKeyNotFound">
            <summary>
              Looks up a localized string similar to A chave &quot;{0}&quot; não estava presente no dicionário..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.EntityAssociationNeedsTargetEntity">
            <summary>
              Looks up a localized string similar to Uma instância de EntityAssociation necessita uma instância de TargetEntity..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.EntityDefinitionAutomaticGenerateFail">
            <summary>
              Looks up a localized string similar to Não foi encontrada a definição de entidade de nome {0} e ocorreu o seguinte erro ao tentar gerá-la automaticamente: {1}.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.EntityDefinitionDeserializationError">
            <summary>
              Looks up a localized string similar to Não foi possível deserializar a definição da entidade {0}..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.EntityDefinitionNotFound">
            <summary>
              Looks up a localized string similar to Não foi encontrada a definição de entidade de nome &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.EntityFieldNotFound">
            <summary>
              Looks up a localized string similar to Campo &quot;{0}&quot; não encontrado na lista de campos da entidade..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.EntityNotFound">
            <summary>
              Looks up a localized string similar to Registro não encontrado..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.EntityNotFoundNameSourceWhere">
            <summary>
              Looks up a localized string similar to Registro não encontrado em &quot;{0}&quot; com o critério &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.EntityNotInitialized">
            <summary>
              Looks up a localized string similar to A entidade não foi inicializada..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.EntityPersistenceError">
            <summary>
              Looks up a localized string similar to Problema durante operação de persistência de entidade..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.EntitySaveException">
            <summary>
              Looks up a localized string similar to Erro ao salvar a entidade..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.EntityServiceConfigurationNotFound">
            <summary>
              Looks up a localized string similar to A seção entityServiceConfiguration do arquivo de configuração não foi encontrada..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.EntityServiceNameNotFound">
            <summary>
              Looks up a localized string similar to O nome do EntityService não foi localizado na seção entityServiceConfiguration da configuração do aplicativo..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.EntityViewFieldIncorrectFieldName">
            <summary>
              Looks up a localized string similar to O nome do campo que está sendo atribuído deve ser igual ao nome do campo da camada anterior..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.EntityViewSaveException">
            <summary>
              Looks up a localized string similar to Erro ao salvar a visão de entidade..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.EntityWasDeleted">
            <summary>
              Looks up a localized string similar to A entidade foi excluída..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.error">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.executed">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.executing">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.FromUIError">
            <summary>
              Looks up a localized string similar to Erro ao tentar converter o valor &apos;{0}&apos; para o campo {1}: {2}.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.FromUIErrorExpectedFormat">
            <summary>
              Looks up a localized string similar to Erro ao tentar converter o valor &apos;{0}&apos; para o campo {1}. O formato esperado era &apos;{2}&apos;. {3}.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.HandleExpected">
            <summary>
              Looks up a localized string similar to Um Handle era esperado..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.ImportActionErrorMessage">
            <summary>
              Looks up a localized string similar to Erro ao inserir/alterar {0}: {1}.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.InvalidHandle">
            <summary>
              Looks up a localized string similar to Handle deve ser um valor inteiro não negativo..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.InvalidImportCastMessage">
            <summary>
              Looks up a localized string similar to Parâmetro &apos;portableDictionary&apos; deve ser do tipo &apos;SerializableDictionary&lt;String, {1}&gt;&apos;.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.InvalidLanguageIdentifier">
            <summary>
              Looks up a localized string similar to Identificador de linguagem inválido..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.InvalidStateForDeletion">
            <summary>
              Looks up a localized string similar to Estado da entidade inválido para exclusão..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.InvalidStateForEdition">
            <summary>
              Looks up a localized string similar to Estado da entidade inválido para edição..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.InvalidStateForRefreshing">
            <summary>
              Looks up a localized string similar to Estado da entidade inválido para atualização..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.InvalidStatementOnQuerySource">
            <summary>
              Looks up a localized string similar to A manipulação de dados em fonte de dados QuerySource não é permitida. A fonte de dados QuerySource é apenas para retornar entidades..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.KeyNotFoundInFieldsCollection">
            <summary>
              Looks up a localized string similar to A entidade &quot;{0}&quot; possui definição para o campo &quot;{1}&quot; mas este campo não foi encontrado na coleção &quot;Fields&quot;..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.LdapDomainNotFound">
            <summary>
              Looks up a localized string similar to O nome do domínio não foi localizado na seção securityConfiguration da configuração do aplicativo..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.LdapPathNotFound">
            <summary>
              Looks up a localized string similar to O caminho ldap não foi localizado na seção securityConfiguration da configuração do aplicativo..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.MaxLenghtFieldValidationMessage">
            <summary>
              Looks up a localized string similar to O tamanho máximo do campo &quot;{2}&quot; é {5} caracteres..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.MixedLanguagesInScriptSet">
            <summary>
              Looks up a localized string similar to A linguagem {0} está sendo utilizada no mesmo conjunto de scripts que a linguagem {1}. Uma única linguagem deve ser utilizada em cada conjunto de scripts. Entidade:&apos;{2}&apos;; Visão:&apos;{3}&apos;; Camada:&apos;{4}&apos;..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.NoConnectionString">
            <summary>
              Looks up a localized string similar to Connection string não encontrada..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.NoEntityService">
            <summary>
              Looks up a localized string similar to Não há EntityService configurado correspondente ao tipo informado..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.NoScriptSet">
            <summary>
              Looks up a localized string similar to Não foi carregada uma coleção de scripts para execução..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.NotImplemented">
            <summary>
              Looks up a localized string similar to Operação não implementada..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.NotInEditMode">
            <summary>
              Looks up a localized string similar to A entidade não está em modo de edição..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.NotNullFieldValidationMessage">
            <summary>
              Looks up a localized string similar to O campo &quot;{2}&quot; é obrigatório..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.NotSupportedEntitySource">
            <summary>
              Looks up a localized string similar to A origem de dados utilizada não é suportada nesta operação..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.NullEntityDefinition">
            <summary>
              Looks up a localized string similar to A definição de entidade deve ser preenchida..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.NullEntitySource">
            <summary>
              Looks up a localized string similar to A origem da entidade deve ser preenchida..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.ProviderEntityServiceEndPointRequired">
            <summary>
              Looks up a localized string similar to providerEntityServiceEndPoint é de preenchimento obrigatório..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.RangeValidationMessage">
            <summary>
              Looks up a localized string similar to O valor do campo &quot;{2}&quot; precisa estar entre {3} e {5}..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.RoleNotFoundInCache">
            <summary>
              Looks up a localized string similar to Papel &apos;{0}&apos; não encontrado no cache de papéis..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.SamlConfiguration_ConfigSectioLoadError">
            <summary>
              Looks up a localized string similar to Ocorreu um erro ao carregar o seção de configuração WcfSaml..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.SamlConfiguration_ConfigSectionNotFound">
            <summary>
              Looks up a localized string similar to A seção WcfSaml do arquivo de configuração não foi encontrada..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.SamlTokenConfiguration_TrustIssue">
            <summary>
              Looks up a localized string similar to http://schemas.xmlsoap.org/ws/2005/02/trust/RST/Issue.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.ScriptCallPreparationError">
            <summary>
              Looks up a localized string similar to Erro preparando a chamada de um script..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.ScriptEngineRequired">
            <summary>
              Looks up a localized string similar to Deve ser especificado um objeto de mecanismo de script..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.ScriptExecutionError">
            <summary>
              Looks up a localized string similar to Erro na execução de um script..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.ScriptFunctionRequired">
            <summary>
              Looks up a localized string similar to Deve ser informado o nome da função de script a ser executada..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.ScriptParametersRequired">
            <summary>
              Looks up a localized string similar to Deve ser especificado um objeto de parâmetros de script..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.ScriptScopeRequired">
            <summary>
              Looks up a localized string similar to Deve ser especificado um objeto de escopo de script..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.ScriptServiceError">
            <summary>
              Looks up a localized string similar to Ocorreu um erro durante a utilização do mecanismo de scripts..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.ScriptSetExecutionError">
            <summary>
              Looks up a localized string similar to Ocorreu um erro ao tentar executar um ou mais scripts..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.SelectMethodNotFound">
            <summary>
              Looks up a localized string similar to Não foi encontrado um método Select com parâmetros {0} em {1}.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.StructuredTableLastLevelFieldName">
            <summary>
              Looks up a localized string similar to ULTIMONIVEL.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.StructuredTableParentLevelFieldName">
            <summary>
              Looks up a localized string similar to NIVELSUPERIOR.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.SystemInstanceNameRequired">
            <summary>
              Looks up a localized string similar to O nome da instância de sistema deve ser informado..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.TableSourceString">
            <summary>
              Looks up a localized string similar to sistema {0}, tabela {1}.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.TaskNotFoundInCache">
            <summary>
              Looks up a localized string similar to Tarefa {0} não encontrada no cache de tarefas..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.TooManyRows">
            <summary>
              Looks up a localized string similar to A quantidade de registros encontrada não é suportada..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.TransactionContextAlreadyCompleted">
            <summary>
              Looks up a localized string similar to O TransactionContext atual já foi concluído..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.TransactionContextNotDisposed">
            <summary>
              Looks up a localized string similar to A transação foi abortada porque uma instância de TransactionContext não foi finalizada por seu método Dispose. Utilize TransactionContext apenas em blocos &quot;using&quot;..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.UnexpectedEntityState">
            <summary>
              Looks up a localized string similar to A entidade está em um estado que não era esperado..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.ViewDefinitionDeserializeEmptyContentMessage">
            <summary>
              Looks up a localized string similar to O conteúdo a ser deserializado não foi informado ou está vazio..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.ViewDefinitionDeserializeErrorMessage">
            <summary>
              Looks up a localized string similar to Erro na deserialização de uma definição de componente..
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Properties.Resources.ViewDefinitionDeserializeNullMessage">
            <summary>
              Looks up a localized string similar to Não foi possível deserializar a definição de componente..
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.BennerMembershipProvider">
            <summary>
            MembershipProvider para base Benner
            </summary>
            <remarks>
            http://msdn.microsoft.com/en-us/library/bb975135.aspx
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.BennerMembershipProvider.ChangePassword(System.String,System.String)">
            <summary>
            Responsável por alterar a senha do usuário corrente
            </summary>
            <param name="oldPassword">Senha atual do usuário corrente</param>
            <param name="newPassword">Nova senha do usuário corrente</param>
            <returns>Sempre retorna True independentemente se conseguiu ou não alterar a senha. Em alguns casos de erro, uma exceção pode ser acionada.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.BennerMembershipProvider.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Responsável por alterar a senha do usuário corrente
            </summary>
            <param name="userName">Parâmetro ignorado pelo serviço de dados. Informe string.Empty</param>
            <param name="oldPassword">Senha atual do usuário corrente</param>
            <param name="newPassword">Nova senha do usuário corrente</param>
            <returns>Sempre retorna True independentemente se conseguiu ou não alterar a senha. Em alguns casos de erro, uma exceção pode ser acionada.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.BennerMembershipProvider.FindUsersByEmail(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Requerido pelo SharePoint
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.BennerMembershipProvider.FindUsersByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Requerido pelo SharePoint
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.BennerMembershipProvider.GetUser(System.String,System.Boolean)">
            <summary>
            Requerido pelo SharePoint
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.BennerMembershipProvider.GetUser(System.Object,System.Boolean)">
            <summary>
            Requerido pelo SharePoint
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.BennerMembershipProvider.GetUserNameByEmail(System.String)">
            <summary>
            Requerido pelo SharePoint
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.BennerMembershipProvider.ValidateUser(System.String,System.String)">
            <summary>
            Verifica se usuário é válido, retornando um booleano independende que ocorra exceção.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.BennerMembershipProvider.ValidateUser(System.String,System.String,System.Boolean)">
            <summary>
            Verifica se usuário é válido, retornando um booleano independende que ocorra exceção.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.BennerMembershipProvider.ValidateUser(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Verifica se usuário é válido
            </summary>
            <param name="throwException">indica se deve emitir exceção em caso de erros, não apenas true ou false.</param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.BennerMembershipProvider.SetAnonymousClientCrendencials">
            <summary>
            Define as credencias do usuário
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.BennerMembershipProviderAuthorizationPolicy.Evaluate(System.IdentityModel.Policy.EvaluationContext,System.Object@)">
            <summary>
            Recebe um token de segurança e tranforma em um objeto Principal, que será anexado a thread corrente
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.UserCredentials">
            <summary>
            Classe utilitária para manipulação das credenciais do usuário
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.UserCredentials.Save(System.String,System.String)">
            <summary>
            Salva as credências do usuário para serem utilizadas na autenticação no serviço de entidades
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.UserCredentials.Recover(System.String)">
            <summary>
            Obtem as credências do usuário
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.UserCredentials.IsAuthenticated">
            <summary>
            Verifica se usuário está autenticado e com a sessão válida
            </summary>
            <remarks>
            Este método só funciona se for autenticação forms, se for windows retorna true automaticamente. Essa implementação
            foi necessária porque na master page existe um script que verifica se o usuário está autenticado, se não estiver 
            ele é encaminhado para a página de login. Com autenticação windows esse script dava erro.
            </remarks>
        </member>
        <member name="T:Benner.Tecnologia.Common.SerializableDictionary`2">
            <summary>
            Dicionário serializável.
            </summary>
            <typeparam name="TKey">Tipo da chave.</typeparam>
            <typeparam name="TValue">Tipo do valor.</typeparam>
            <remarks>
            <para>Contorna a limitação de que uma classe que implementa IDictionary não pode ser
            serializada.</para>
            <para>Esta classe foi copiada da página:
            http://weblogs.asp.net/pwelter34/archive/2006/05/03/444961.aspx</para>
            </remarks>    
            <summary>
            Serializador para o dicionário chave valor
            </summary>
            <remarks>
            Serializa e deserializa dados entre WES e BAS utilizando o NetDataContractSerializer
            Serializa e deserializa dados entre Silverlight e WES utilizando o DataContractSerializer
            </remarks> 
            <summary>
            Representa um dicionário chave/valor que se permite ser serializado.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.SerializableDictionary`2.MakeChildsUseDataContractSerializer(System.Object)">
            <summary>
            Faz com que todos os objetos filhos sejam serializados utilizado o DataContractSerializer
            </summary>
            <remarks>
            resolve problemas de serialização que ocorriam em:
              * Um campo de resultado de lookup ser um lookup
              * Dicionário de TransitoryVars do FunctionData 
              * Os fields de uma entidade
            </remarks> 
        </member>
        <member name="M:Benner.Tecnologia.Common.SerializableDictionary`2.IsBaseTypeEntityBase(System.Type)">
            <summary>
            Verificar se o tipo descende em qualquer nível com a classe EntityBase
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.SerializableDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Construtor utilizado para modificar o comportamento do comparador de chaves
            </summary>
            <param name="comparer">IEqualityComparer - Novo comparador</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.SerializableDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor utilizado na deserialização.
            </summary>
            <param name="info">Um objeto do tipo System.Runtime.Serialization.SerializationInfo contendo a informação necessária para serializar este dicionário.</param>
            <param name="context">Uma estrutura do tipo System.Runtime.Serialization.StreamingContext contendo a fonte e o destino do stream serializado associado a este dicionário.</param>
        </member>
        <member name="T:Benner.Tecnologia.Common.Singleton`1">
            <summary>
            Manages the single instance of a class.
            </summary>
            <remarks>
            Generic variant of the strategy presented here : http://geekswithblogs.net/akraus1/articles/90803.aspx.
            Prefered to http://www.yoda.arachsys.com/csharp/singleton.html, where static initialization doesn't allow
            proper handling of exceptions, and doesn't allow retrying type initializers initialization later
            (once a type initializer fails to initialize in .NET, it can't be re-initialized again).
            </remarks>
            <typeparam name="T">Type of the singleton class.</typeparam>
        </member>
        <member name="F:Benner.Tecnologia.Common.Singleton`1._instance">
            <summary>
            The single instance of the target class.
            </summary>
            <remarks>
            The volatile keyword makes sure to remove any compiler optimization that could make concurrent 
            threads reach a race condition with the double-checked lock pattern used in the Instance property.
            See http://www.bluebytesoftware.com/blog/PermaLink,guid,543d89ad-8d57-4a51-b7c9-a821e3992bf6.aspx
            </remarks>
        </member>
        <member name="F:Benner.Tecnologia.Common.Singleton`1._lock">
            <summary>
            The dummy object used for locking.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Singleton`1.#cctor">
            <summary>
            Type-initializer to prevent type to be marked with beforefieldinit.
            </summary>
            <remarks>
            This simply makes sure that static fields initialization occurs 
            when Instance is called the first time and not before.
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.Singleton`1.Instance">
            <summary>
            Gets the single instance of the class.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.TableSource.PhysicalTableName">
            <summary>
            Esta informação é necessária para armazenar o nome da tabela física quando se tratar de uma entidade lógica.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.TableSource.TableAlias">
            <summary>
            Apelido da entidade utilizado para montar o nome da SEQUENCE no banco de dados.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.TableSource.UseDBSequence">
            <summary>
            Indica que a tabela utiliza SEQUENCE no banco de dados.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.TableSource.HasTrigger">
            <summary>
            Indica que a tabela tem TRIGGER no banco de dados.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.TableSource.IsManaged">
            <summary>
            Indica que é uma entidade 100% gerenciada (não executa macro ou Delphi).
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.TableSource.IsLogicalEntitySource">
            <summary>
            Indica se é uma entidade lógica ou não.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.TestSource">
            <summary>
            Uma fonte de dados simulada para uso em testes.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.StreamHelper">
            <summary>
            Classe para auxiliar na utilização de streams.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.StreamHelper.ReadStream(System.IO.Stream)">
            <summary>
            Reads data from a stream until the end is reached. The
            data is returned as a byte array. An IOException is
            thrown if any of the underlying IO calls fail.
            </summary>
            <param name="stream">The stream to read data from</param>
            <remarks>
            Fonte: http://www.yoda.arachsys.com/csharp/readbinary.html
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.WhereClause.AddWhereClause(Benner.Tecnologia.Common.WhereClause)">
            <summary>
            Adiciona uma cláusula no where
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.WhereClause.AddWhereClause(System.String)">
            <summary>
            Adiciona uma cláusula no where
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.WhereClause.AddWhereClause(Benner.Tecnologia.Common.Handle)">
            <summary>
            Adiciona uma cláusula de igualdade de handle para a tabela principal da pesquisa.
            </summary>
            <param name="handle">Handle a ser pesquisado.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.WhereClause.AddWhereClause(System.Collections.Generic.List{Benner.Tecnologia.Common.Handle})">
            <summary>
            Adiciona uma cláusula de pertença a uma lista de handles para a tabela principal da pesquisa.
            </summary>
            <param name="handles">Coleção de Handles a serem pesquisados.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.WhereClause.AddWhereClause(System.String,System.String,System.Object)">
             <summary>
             Adiciona uma cláusula no where baseada em parâmetros.
             </summary>
             <param name="whereClause">Expressão lógica em linguagem SQL, utilizando o nome do parâmetro.</param>
             <param name="parameterName">Nome do parâmetro.</param>
             <param name="parameterValue">Valor do parâmetro.</param>
             <remarks>
             Esta forma de declaração previne ataques por injeção de SQL.
            
             O nome do parâmetro deve ser único.
            
             Exemplo: AddWhereClause("A.HANDLE=:HANDLE", "HANDLE", handle)
            
             A relação entre as cláusula é por AND.
             </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.WhereClause.AddWhereClause(System.String,Benner.Tecnologia.Common.Parameter)">
            <summary>
            Adiciona uma cláusula no where
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.WhereClause.AddWhereClause(System.String,System.Collections.Generic.List{Benner.Tecnologia.Common.Parameter})">
            <summary>
            Adiciona uma cláusula no where
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.WhereClause.AddParameters(System.Collections.Generic.List{Benner.Tecnologia.Common.Parameter})">
            <summary>
            Adiciona ou substitui cada parâmetro na coleção de parâmetros da cláusula.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.WhereClause.AddParameter(System.String,System.Object)">
            <summary>
            Adiciona ou substitui um parâmetro na coleção de parâmetros da cláusula.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.WhereClause.AddParameter(Benner.Tecnologia.Common.Parameter)">
            <summary>
            Adiciona ou substitui um parâmetro na coleção de parâmetros da cláusula.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.WhereClause.GetParameterByName(System.String)">
            <summary>
            Recupera um parâmetro pesquisando pelo nome.
            </summary>
            <param name="parameterName"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.WhereClauseRecord.GetEntityDefinition(System.String)">
            <summary>Obter a definição (metadados) de EntityViewRecord</summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.BennerContext">
            <summary>
            Classe de contexto do aplicativo. Fornece os objetos de sistema.
            </summary>
            <summary>
            Classe de contexto do aplicativo. Fornece os objetos de sistema.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerContext.Authorization">
            <summary>
            Serviço de autorização
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerContext.Administration">
            <summary>
            Objeto de administração.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerContext.Security">
            <summary>
            Objeto de segurança.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerContext.Report">
            <summary>
            Objeto de emissão de relatórios
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerContext.Url">
            <summary>
            Objeto de geração de urls
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.AsyncProcessDetails.IsReady">
            <summary>
            Indica se o processamento está pronto, finalizado.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.AsyncProcessDetails.WasRead">
            <summary>
            Indica se a mensagem foi lida, clicada.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.AsyncProcessDetails.ToastrDisplayed">
            <summary>
            Id para a tags HTML
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Audit.TableEntity.GetDefinition(System.String)">
            <summary>
            Cria definição de entidade dinâmica para a tabela Z_TABELAS
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Audit.UserEntity.GetDefinition(System.String)">
            <summary>
            Cria definição de entidade dinâmica para a tabela Z_GRUPOUSUARIOS
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.BreadcrumbEntityHandle">
            <summary>
            Representa a informação de uma entidade no breadcrumb (RecordHandleOfTable).
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.FieldChangeEventHandler">
            <summary>
            Representa o método que vai tratar o evento <see cref="E:Benner.Tecnologia.Common.EntityBase.FieldChanged"/>.
            </summary>
            <param name="sender">Objeto que originou o evento.</param>
            <param name="e">Uma instância de <see cref="T:Benner.Tecnologia.Common.FieldChangeEventArgs"/> contendo os dados do evento.</param>
        </member>
        <member name="T:Benner.Tecnologia.Common.FieldChangeEventArgs">
            <summary>
            Provê dados para o evento <see cref="E:Benner.Tecnologia.Common.EntityBase.FieldChanged"/>.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.FieldChangeEventArgs.FieldName">
            <summary>
            Nome do campo que foi alterado.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldChangeEventArgs.#ctor(System.String)">
            <summary>
            Cria uma instância de <see cref="T:Benner.Tecnologia.Common.FieldChangeEventArgs"/>.
            </summary>
            <param name="fieldName">Nome do campo que foi alterado.</param>
            <param name="oldValue">Valor anterior do campo que foi alterado.</param>
            <param name="newValue">Novo valor informado para o campo que foi alterado.</param>
        </member>
        <member name="T:Benner.Tecnologia.Common.FieldValueBase">
            <summary>
            Define uma classe base para campos de tipo complexo.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.FieldValueBase.Benner#Tecnologia#Common#IFieldChangeNotifier#FieldName">
            <summary>
            Nome do campo.
            </summary>
            <remarks>
            Os objetos complexos que representam valores de campos não conhecem o nome do campo, 
            portanto, informe o nome do campo ao assinar o evento FieldChanged.
            </remarks>
        </member>
        <member name="E:Benner.Tecnologia.Common.FieldValueBase.FieldChanging">
            <summary>
            Evento disparado quando o campo está para sofrer modificação de estado.
            </summary>
        </member>
        <member name="E:Benner.Tecnologia.Common.FieldValueBase.FieldChanged">
            <summary>
            Evento disparado quando o campo sofre modificação de estado.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldValueBase.ResetFieldChangeEventSubscriptions">
            <summary>
            Livra o evento FieldChanged de todos os seus assinantes.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldValueBase.EnableNotifications">
            <summary>
            Dispara os eventos de notificação
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldValueBase.DisableNotifications">
            <summary>
            Desabilita os eventos de notificação
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldValueBase.NotifyFieldChanging">
            <summary>
            Dispara o evento de campo sendo alterado.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldValueBase.NotifyFieldChanged">
            <summary>
            Dispara o evento de campo alterado.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.IFieldChangeNotifier">
            <summary>
            Define a interface de um campo de entidade capaz de notificar suas alterações de estado.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.IFieldChangeNotifier.FieldName">
            <summary>
            Nome do campo.
            </summary>
            <remarks>
            Os objetos complexos que representam valores de campos não conhecem o nome do campo, 
            portanto, informe o nome do campo ao assinar o evento FieldChanged.
            </remarks>
        </member>
        <member name="E:Benner.Tecnologia.Common.IFieldChangeNotifier.FieldChanging">
            <summary>
            Evento disparado quando o campo está para sofrer modificação de estado.
            </summary>
        </member>
        <member name="E:Benner.Tecnologia.Common.IFieldChangeNotifier.FieldChanged">
            <summary>
            Evento disparado quando o campo sofre modificação de estado.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.IFieldChangeNotifier.ResetFieldChangeEventSubscriptions">
            <summary>
            Livra o evento FieldChanged de todos os seus assinantes.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.IFieldChangeNotifier.DisableNotifications">
            <summary>
            Desabilita os eventos de notificação
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.IFieldChangeNotifier.EnableNotifications">
            <summary>
            Ativa os eventos de notificação
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.LabelFieldDefinition.Required">
            <summary>
            Campo Rotulo é sempre opcional.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.LabelFieldDefinition.ToUI(System.Object)">
            <summary>Converter para apresentação</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.LabelFieldDefinition.FromUI(System.String)">
            <summary>Converter do formato de apresentação para o tipo nativo</summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.EntityVisualizationDefinition">
            <summary>
            Definições da visualização de uma entidade e de seus comportamentos na interface com o usuário.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityVisualizationDefinition.Functions">
            <summary>
            Lista de funções da entidade.
            </summary>
            <remarks>
            A lista é inicializada vazia e incrementada automaticamente quando um valor é informado. 
            Entretanto, apenas funções existentes na definição da entidade podem ser configuradas. 
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityVisualizationDefinition.Fields">
            <summary>
            Lista de campos da entidade.
            </summary>
            <remarks>
            A lista é inicializada vazia e incrementada automaticamente quando um valor é informado. 
            Entretanto, apenas campos existentes na definição da entidade podem ser configurados. 
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityVisualizationDefinition.Pages">
            <summary>
            Lista de páginas da entidade
            </summary>
            <remarks>
            A lista é inicializada vazia e incrementada automaticamente quando um valor é informado.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityVisualizationDefinition.#ctor(System.String)">
            <summary>
            Cria uma instância de <see cref="T:Benner.Tecnologia.Common.EntityVisualizationDefinition"/>.
            </summary>
            <param name="entityDefinitionName">Nome da definição da entidade cuja visualização será controlada por este objeto.</param>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityAggregation.TargetEntityDefinition">
            <summary>
            Definição de entidade de destido do filtro.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityAggregation.LocalWhere">
            <summary>
            Esta propriedade contém cláusula LocalWhere ou WebLocalWhere atribuído via macro.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.EntityAggregation.Count">
            <summary>
            Indica a quantidade de items selecionados no filtro.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityAggregation.BuildInSqlClause(System.String)">
            <summary>
            Monta uma cláusula sql IN, quebrando-a em condições OR quando houver muitos itens. É útil porque alguns bancos têm limite para a quantidade de itens dentro dos parênteses de uma clásula IN (250 em Sybase, 1000 em Oracle, por exemplo). 
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
            <example>
            string inClause = Usuarios.BuildInSqlClause("A.HANDLE");
            
            // desta forma será montado uma string semelhante ao seguinte:
            "(A.HANDLE IN (6,5,7,9,14))"
            
            // caso exista mais de 250 itens selecionados, para contornar limitações de alguns bancos, será criado uma nova clausula IN, separada por OR:
            "(A.HANDLE IN (6,5,7,9,14,...) OR A.HANDLE IN (65,298,457,1,5,...))"
            </example>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityAggregation.GetHandleAndValueList">
            <summary>
            Retorna uma lista de Handle no formato handle$value|handle$value
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityAggregation.ToString">
            <summary>
            Retorna uma lista de Handle no formato handle|_|handle|_
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityAggregation.ToString(Benner.Tecnologia.Common.EntityAggregationItems)">
            <summary>
            Retorna uma lista de Handle no formato handle|_|handle|_
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityAggregation.Wrap``1">
            <summary>
            Obtem uma instância de EntityAggregation tipado
            </summary>
            <typeparam name="T">Tipo do retorno (EntityBase)</typeparam>                
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityAggregation.ToHandleList">
            <summary>
            Cria uma lista contendo os handles dos items selecionados no filtro atualmente.
            As alterações aplicadas à lista de retornada aqui não irão refletir na lista de items selecionados neste filtro.
            </summary>
            <returns>Uma lista contendo os handles dos registros selecionados no filtro atualmente</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityAggregation.GetSelectedEntities">
            <summary>
            Carrega da base uma lista de instância de entidades que representa os registros selecionados neste filtro.
            Internamente será disparado um GetMany()
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityAggregation.Clear">
            <summary>
            Remove os registros selecionados no filtro.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityAggregation.Contains(Benner.Tecnologia.Common.EntityBase)">
            <summary>
            Indica se um determinado item está na selecionado.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityAggregation.Contains(Benner.Tecnologia.Common.Handle)">
            <summary>
            Indica se um determinado item está na selecionado, através de seu handle.
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityAggregation.Add(Benner.Tecnologia.Common.Handle[])">
            <summary>
            Adiciona registros aos items selecionados no filtro, através de handle(s), ignorando os registros já existentes.
            </summary>
            <param name="handles"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityAggregation.Add(Benner.Tecnologia.Common.EntityBase[])">
            <summary>
            Adiciona registros aos items selecionados no filtro, através de entidades(s), ignorando os registros já existentes.
            </summary>
            <param name="entityInstances"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityAggregation.Add(System.Collections.Generic.List{Benner.Tecnologia.Common.EntityBase})">
            <summary>
            Adiciona registros aos items selecionados no filtro, através de entidades(s), ignorando os registros já existentes.
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityAggregation.Add(System.Collections.Generic.List{Benner.Tecnologia.Common.Handle})">
            <summary>
            Adiciona registros aos items selecionados no filtro, através de handle(s), ignorando os registros já existentes.
            </summary>
            <param name="handles"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityAggregation.Add(System.Collections.Generic.List{System.Int64})">
            <summary>
            Adiciona registros aos items selecionados no filtro, através de handle(s), ignorando os registros já existentes.
            </summary>
            <param name="handles"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityAggregation.Remove(Benner.Tecnologia.Common.Handle)">
            <summary>
            Remove um item da lista de itens selecionados.
            </summary>
            <param name="handle"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityAggregation.Remove(Benner.Tecnologia.Common.EntityBase)">
            <summary>
            Remove um item da lista de itens selecionados.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityAggregation.DoLoadMany(Benner.Tecnologia.Common.EntityDefinition,System.Collections.Generic.List{Benner.Tecnologia.Common.Handle})">
            <summary>
            Retorna várias instâncias de entidade, em modo Raw (sem executar lógica de negócio), resolvendo todos os campos de resultado (LookupResultBehavior = ResultAtAnyLevel).
            </summary>
            <param name="entityDefinition">Definição do TargetEntity.</param>
            <param name="handles">Handles dos TargetEntity.</param>
            <returns>A entidade carregada no tipo correto</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityAggregation.LoadAggregationInstance(System.Collections.Generic.List{Benner.Tecnologia.Common.Handle})">
            <summary>
            Carrega o StubInstance da entidade associada
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.IEntityDefinitionRecord">
            <summary>
            Interface que representa um registro da tabela w_entidades
            </summary>
            <remarks>
            Essa interface representa um registro da tabela W_ENTIDADES.
            A tabela W_ENTIDADES é responsável por armazenar a definição de todas as entidades do sistema.
            A tabela W_ENTIDADES possui os seguintes campos:
            - NOME: o nome de uma definição de entidade.
            - DEFINICAO: o xml que armazena uma EntityDefinition serializada.
            - CRIADOPOR: informação de auditoria, atribuido automaticamente.
            - CRIADOEM: informação de auditoria, atribuido automaticamente.
            - ALTERADOPOR: informação de auditoria, atribuido automaticamente.
            - ALTERADOEM: informação de auditoria, atribuido automaticamente.
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.IEntityDefinitionRecord.Name">
            <summary>
            Nome da definição de entidade.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.IEntityDefinitionRecord.DefinitionContent">
            <summary>
            O XML que armazena a EntityDefinition serializada.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.IEntityDefinitionRecord.CreatedBy">
            <summary>
            Usuário que criou/gerou a definição.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.IEntityDefinitionRecord.CreatedAt">
            <summary>
            Data de criação/geração da definição.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.IEntityDefinitionRecord.ModifiedBy">
            <summary>
            Usuário que alterou pela última vez a definição de entidade
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.IEntityDefinitionRecord.ModifiedAt">
            <summary>
            Data da última alteração na definição de entidade
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.IEntityDefinitionRecord.Version">
            <summary>
            Número da versão da classe EntityDefinition a qual o Xml da propriedade DefinitionContent foi serializado
            </summary>
            <remarks>
            Sempre persiste a definicao com a última versão. Pois considera que se conseguiu deserializar
            baseado em uma versão anterior, a conversão está pronta e a instância em questão está compatível
            com a versão corrente.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.IEntityDefinitionRecord.Save">
            <summary>
            Responsável pela persistencia da entidade
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Layer">
            <summary>
            Identificador das camadas da arquitetura.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Layer.Business">
            <summary>
            Camada de negócios.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Layer.BusinessWebMode">
            <summary>
            Camada de negócio do Provider quando está em WebMode/WrapperMode.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Layer.BusinessWebModeInsideWes">
            <summary>
            Camada de negócio rodando dentro do WES (BEF Anywhere)
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Layer.Presentation">
            <summary>
            Camada de apresentação.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Layer.Client">
            <summary>
            Camada de interface no cliente (Silverlight, por exemplo).
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Layer.TrustedPresentation">
            <summary>
            Camada de apresentação já autenticada e autorizada.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Layer.PresentationTests">
            <summary>
            Utilizado apenas para representar testes automatizados da ferramenta, na camada de apresentação.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.Layer.TasksWorker">
            <summary>
            Utilizado pelo Worker (BTL)
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.LayerAttribute">
            <summary>
            Determina à qual camada pertence um assembly.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.LayerAttribute.#ctor(Benner.Tecnologia.Common.Layer)">
            <summary>
            Cria uma instância do atributo de assembly <see cref="T:Benner.Tecnologia.Common.LayerAttribute"/>.
            </summary>
            <param name="layer">Identificador da camada à qual o assembly pertence.</param>
        </member>
        <member name="P:Benner.Tecnologia.Common.LayerAttribute.Layer">
            <summary>
            Identificador da camada à qual o assembly decorado com o atributo pertence.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.LayerExtensions">
            <summary>
            Validações de camada
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.LayerExtensions.IsBusinessLayer(Benner.Tecnologia.Common.Layer)">
            <summary>
            Identifica se está rodando na camada de negócio (Business)
            </summary>
            <param name="layer">Camada</param>
            <returns>Retorna true se está na Business, caso contrário, false.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.LayerExtensions.IsPresentationLayer(Benner.Tecnologia.Common.Layer)">
            <summary>
            Identifica se está rodando na camada de apresentação (Presentation)
            </summary>
            <param name="layer">Camada</param>
            <returns>Retorna true se está na Business, caso contrário, false.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.LayerExtensions.GetFriendlyName(Benner.Tecnologia.Common.Layer)">
            <summary>
            Retorna o nome amigável da camada
            </summary>
            <param name="layer">Camada</param>
            <returns>String com o nome amigável da camada</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.ReportUtils.GetReportId(Benner.Tecnologia.Common.Components.ReportProcess)">
            <summary>
            Recupera o valor do campo CODIGO de R_RELATORIOS, a partir do ReportProcess
            </summary>
            <param name="reportProcess">Definição do comando do reportProcess</param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.ReportUtils.GetReportId(System.String,System.Boolean)">
            <summary>
            Recupera o valor do campo CODIGO de R_RELATORIOS, a partir dos campos Nome e Sistema
            </summary>
            <param name="reportName">valor do campo NOME</param>
            <param name="systemReport">valor do campo SISTEMA</param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.ReportUtils.GetReportId(Benner.Tecnologia.Common.Handle)">
            <summary>
            Recupera o valor do campo CODIGO de R_RELATORIOS, a partir do handle
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Benner.Tecnologia.Common.AesCrypto.Encrypt(System.String)" -->
        <member name="M:Benner.Tecnologia.Common.AesCrypto.Decrypt(System.String)">
            <summary>
            Criptografa um texto usando o algoritimo de chave simétrica AesCryptoServiceProvider 
            </summary>
            <param name="cipherText">
            Dado em base64 a ser descricptografado 
            </param>
            <returns>
            Literal descriptografado
            </returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.ConfigurationParameterType">
            <summary>
            Indica o tipo de variável de sistema (Campo TIPO em Z_VARIAVEIS)
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.CompanyFilterMode">
            <summary>
            Definição do filtro de empresas e filiais.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.CompanyFilterMode.None">
            <summary>
            Não será adicionado filtro de empresa e filial na consulta.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.CompanyFilterMode.OnlyCompany">
            <summary>
            Será adicionado filtro de empresa, no caso de a tabela for por empresa.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.CompanyFilterMode.CompanyAndBranch">
            <summary>
            Será adicionado filtro de empresa e filial, se a tabela for por empresa e filial.
            Caso a tabela for apenas por empresa, será adicionado apenas o filtro por empresa.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.CriteriaUtility">
            <summary>
            Classe utilitário para o tratameto com a classe Criteria
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.CriteriaUtility.SplitParametersFromLiteral(System.String)">
            <summary>
            Separa os parametros de entrada de uma fonte de dados alternativa em um formato de dicionário chave valor
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.CriteriaUtility.GetParametersFromLiteral(System.String,Benner.Tecnologia.Common.EntityBase)">
            <summary>
            Adiciona a coleção de parâmetros os parâmetros de entrada de uma fonte de dados alternativa informados no widget como um literal
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.CustomizationLevel">
            <summary>
            Identificador do valor numérico de cada nível de customização de ambiente.
            Não deve ser utilizado em propriedades ou como parâmetro de um método. Utilize System.Int32.</summary>
            <remarks>
            Este enumerador pode não representar todos os tipos possíveis de camdas devido que o número de camadas é livre.
            Este enumerador tem por objetivo facilitar a programação quando necessário utilizar a numeração das camadas.
            Portanto, este enumerador não deve ser utillizado como parâmetro de métodos e nem como propriedades,
            deve-se sempre utilizar uma variavel do tipo System.Int32 para que todas as possibilidades de camadas
            sejam suportadas.
            
            É importante destacar que os níveis de configuração do WES não coincidem com os níveis de configuração do Builder.
            Níveis do Builder:
            10 = Núcleo (BENNER)
            20 = Especifico
            30 = Cliente
            
            </remarks>
        </member>
        <member name="F:Benner.Tecnologia.Common.CustomizationLevel.Workflow">
            <summary>
            Nível do Workflow, é utilizado para identificar o nivel de customização para atividades de um fluxo
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.CustomizationLevel.Consolidated">
            <summary>
            Nível Consolidado, é utilizado por artefatos multi-níveis, ou, multi-camadas (de customização) a exemplo de visões.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.CustomizationLevel.Builder">
            <summary>Level = 10</summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.CustomizationLevel.Tecnologia">
            <summary>Level = 15</summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.CustomizationLevel.Benner">
            <summary>Level = 20</summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.CustomizationLevel.Vertical">
            <summary>Level = 30</summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.CustomizationLevel.Especifico">
            <summary>Level = 40</summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.CustomizationLevel.Cliente">
            <summary>Level = 50</summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.CustomizationLevel.Usuario">
            <summary>Level = 60. Filtros de usuário, não são importados/exportados via importação de artefatos. </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.EntityDefinitionBuilder">
            <summary>
            Responsável pela construção de definições de entidade a partir de um DataSet
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityDefinitionBuilder.#ctor">
            <summary>
            Construtor padrão bloqueado
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityDefinitionBuilder.BuildFromDataSet(System.Data.DataSet)">
            <summary>
            Responsável pela montagem de uma definição de entidade baseado em um DataSet
            </summary>
            <param name="dataSet">DataSet que servirá como base para a montagem do EntityDefinition</param>
            <returns>Definição de entidade</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityDefinitionBuilder.BuildFromDataTable(System.Data.DataTable)">
            <summary>
            Monta uma definição de entidade baseado em um DataTable.
            </summary>
            <param name="table">DataTable base para a montagem do EntityDefinition.</param>
            <returns>Instância de <see cref="T:Benner.Tecnologia.Common.EntityDefinition"/> montado conforme os metadados de <paramref name="table"/>.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityDefinitionBuilder.BuildFromDataTable(System.Data.DataTable,Benner.Tecnologia.Common.EntitySource)">
            <summary>
            Monta uma definição de entidade baseado em um DataTable.
            </summary>
            <param name="table">DataTable base para a montagem do EntityDefinition.</param>
            <param name="entitySource">Não sei por que este parâmetro, estou apenas imitando o BuildFromDataReader.</param>
            <returns>Instância de <see cref="T:Benner.Tecnologia.Common.EntityDefinition"/> montado conforme os metadados de <paramref name="table"/>.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityDefinitionBuilder.BuildFromFields(Benner.Tecnologia.Common.EntitySource,System.String[],Benner.Tecnologia.Common.DataType[])">
            <summary>
            Monta uma definição de entidades baseada em uma coleção de Fields
            </summary>
            <param name="entitySource">EntitySource da definição.</param>
            <param name="fieldNames">Dicionário com o nome dos campos</param>
            <param name="fieldTypes">Dicionário com o tipo dos campos</param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityDefinitionBuilder.BuildFromDataReader(System.Data.IDataReader,Benner.Tecnologia.Common.EntitySource)">
            <summary>
            Responsável pela montagem de uma definição de entidade baseado em um DataReader
            </summary>
            <param name="dataReader">DataReader que servirá de base para montagem do EntityDefinition</param>
            <returns>Definição de entidade</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityDefinitionBuilder.GetFieldDefinitionFromDataType(System.Type)">
            <summary>
            Retorna um tipo mapeado baseado no tipo da coluna do DataSet
            </summary>
            <param name="dbType">DataType</param>
            <returns>FieldDefinition</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.EntityDefinitionBuilder.GetFieldDefinitionFromDataType(System.Type,System.Boolean)">
            <summary>
            Retorna um tipo mapeado baseado no tipo da coluna do DataSet
            </summary>
            <param name="dbType">DataType</param>
            <param name="primaryKey">PrimaryKey or not</param>
            <returns>FieldDefinition</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.FieldDefinition.AccessLevel">
            <summary>
            Este enumerador é utilizado identificar o nível de acesso aos dados do campo.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.FieldDefinition.AccessLevel.Read">
            <summary>A definição permite apenas consulta.</summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.FieldDefinition.AccessLevel.Edit">
            <summary>A definição permite inclusão, consulta e alteração.</summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.FieldDefinition.AccessLevel.Insert">
            <summary>A definição permite inclusão e consulta.</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldDefinition.#ctor">
            <summary>Criado para o Sharepont conseguir serializar</summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.FieldDefinition.Title">
            <summary>
            Legenda do campo para interface de formulário
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.FieldDefinition.GridTitle">
            <summary>
            Legenda do campo para interface de Grid
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.FieldDefinition.FullTitle">
            <summary>
            Legenda do campo para interface de filtro
            </summary>
            <remarks>
            A legenda completa é usada para selecionar campos por legenda. Isto ocorre, por exemplo, nos filtros. Ela é necessária porque a legenda de formulário pode ser igual para dois campos, já que os campos podem estar dentro de grupos e tabs.
            </remarks>
        </member>
        <member name="P:Benner.Tecnologia.Common.FieldDefinition.DataAccessLevel">
            <summary>
            Indica o nível de acesso a dados.
            Esta propriedade é utilizada para o data binding dos componentes,
            influencia nos métodos de conversão de valor dos campos (From/ToUI)
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.FieldDefinition.DefaultValue">
            <summary>
            Valor padrão, campo assumir no Builder
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.FieldDefinition.Visible">
            <summary>
            Visibilidade do campo definida no Builder.
            Está propriedade não pode ser alterada.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.FieldDefinition.Tooltip">
            <summary>
            Campo Dica definido no Builder
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldDefinition.ToHttp(System.Object,System.Boolean)">
            <summary>
            Usado peloa api REST
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldDefinition.FromHttp(System.Object)">
            <summary>
            Usado peloa api REST
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldDefinition.ToDBValue(System.Object)">
            <summary>
            Converte para um tipo do Builder.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldDefinition.FromDBValue(System.Object)">
            <summary>
            Converte para um tipo do .NET.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldDefinition.ToUI(System.Object)">
            <summary>
            Converter para apresentação
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldDefinition.FromUI(System.String)">
            <summary>
            Converter do formato de apresentação para o tipo nativo
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldDefinition.GetNullValueForRunnerCompliant">
            <summary>
            Converte para o valor nulo default do Runner. Exemplo: Numerico é -1, string é string.empty, DateTime é 30/12/1899.
            </summary>
            <returns>Valor compatível com Runner</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldDefinition.FromWhereClause(System.Object)">
            <summary>
            Converter de uma cláusula where para um tipo .NET.
            </summary>
            <remarks>
            por padrão, utilizamos a mesma lógica do FromUI(), para casos especiais é necessário dar um override.
            </remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldDefinition.ToSearchParameter(System.String,System.String,System.String)">
            <summary>
            Este método gera um parâmetro de acordo com o tipo de campo, a partir de um texto de pesquisa, de um lookup, por exemplo.
            </summary>
            <param name="paramName">(obrigatório) Nome do parâmetro.</param>
            <param name="searchText">(obrigatório) Texto de pesquisa.</param>
            <param name="lookupSearchPattern">(obrigatório) searchPattern, por exemplo "{0}%".</param>
            <returns>Um parâmetro com as peculiaridades de acordo com cada tipo de campo.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldDefinition.IsNull(System.Object)">
            <summary>
            Verifica se o objeto é igual a null
            </summary>
            <param name="value">Valor a ser comparado</param>
            <returns>True or False</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldDefinition.IsDBValueField">
            <summary>
            Indica se um campo tem ou não valor fisicamente no BANCO DE DADOS.
            ATENÇÃO: Mesmo assim, ele poderá ter valor na ENTIDADE, no dicionário Fields. Veja o método IsValueField().
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldDefinition.IsDBValueField(Benner.Tecnologia.Common.FieldDefinition)">
            <summary>
            Indica se um campo tem ou não valor fisicamente no BANCO DE DADOS.
            ATENÇÃO: Mesmo assim, ele poderá ter valor na ENTIDADE, no dicionário Fields. Veja o método IsValueField().
            </summary>
            <param name="fieldDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldDefinition.IsValueField">
            <summary>
            Indica se um campo tem ou não valor na ENTIDADE, na lista Fields.
            ATENÇÃO: Para saber se o tipo de campo tem ou não valor no banco de dados, utilize o método IsDBValueField().
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldDefinition.IsValueField(Benner.Tecnologia.Common.FieldDefinition)">
            <summary>
            Indica se um campo tem ou não valor na ENTIDADE, na lista Fields.
            ATENÇÃO: Para saber se o tipo de campo tem ou não valor no banco de dados, utilize o método IsDBValueField().
            </summary>
            <param name="fieldDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldDefinition.IsLazyLoad">
            <summary>
            Indica se um campo tem ou não valor carregado dinamicamente do BANCO DE DADOS ao acessá-lo.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldDefinition.GetDataFormatString">
            <summary>
            Recupera o DataFormatString utilizado para propagar aos componentes de mercado o formato do binding.
            Atenção: Este formato poderá variar para alguns campos, caso a definição do campo esteja marcada como somente leitura.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldDefinition.GetDataFormatStringToView">
            <summary>
            Recupera o DataFormatString utilizado para propagar aos componentes de mercado o formato do binding, para o modo de VISUALIZAÇÃO de campos.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldDefinition.GetDataFormatStringToEdit">
            <summary>
            Recupera o DataFormatString utilizado para propagar aos componentes de mercado o formato do binding, para o modo de EDIÇÃO de campos.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldDefinition.ToPath">
            <summary>
            Nome da coluna do campo, também pode ser um caminho no formato CAMPO>TABELA.RESULTADO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldDefinition.GetDxColumnDefinition">
            <summary>
            Gera as definições as colunas do Dx
            </summary>
            <returns></returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.DataType">
            <summary>
            Especifica o tipo de dados utilizado pelo banco de dados.
            </summary>
            <remarks>Atualmente é utilizado para os parâmetros do Criteria e OutputParameters</remarks>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataType.String">
            <summary>
            O dado é do tipo string.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataType.Integer">
            <summary>
            O dado é do tipo inteiro de 32 bits.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataType.Decimal">
            <summary>
            O dado é do tipo decimal/double.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataType.DateTime">
            <summary>
            O dado é do tipo Data e hora.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataType.Binary">
            <summary>
            O dado é do tipo binário.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DataType.Boolean">
            <summary>
            O dado é do tipo Boolean
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.PasswordFieldDefinition.ToUI(System.Object)">
            <summary>Converter para apresentação</summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.PasswordFieldDefinition.FromUI(System.String)">
            <summary>Converter do formato de apresentação para o tipo nativo</summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.DefaultEntityActions">
            <summary>
            Enumerador de ações padrão de uma entidade.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DefaultEntityActions.VIEW">
            <summary>Ver - Indica que o usuário pode visualizar dados da entidade.</summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DefaultEntityActions.INSERT">
            <summary>Inserir - Indica que o usuário pode inserir novas instâncias da entidade.</summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DefaultEntityActions.UPDATE">
            <summary>Alterar - Indica que o usuário pode alterar instâncias da entidade.</summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DefaultEntityActions.DELETE">
            <summary>Excluir - Indica que o usuário pode excluir instâncias da entidade.</summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.DefaultEntityActions.VIEWLOOKUP">
            <summary>Ver resultados de lookup - Indica que o usuário pode visualizar resultados de lookup de instâncias da entidade.</summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.FieldDefinitionList">
            <summary>
            Representa a lista de definição de campos
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.FieldDefinitionList.Unique">
            <summary>
            [get/set] Identifica elementos únicos na lista
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.FieldDefinitionList.CaseInsensitive">
            <summary>
            [get/set] Quando 'true', ignora maiúsculas e minúsculas no nome dos campos
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.FieldDefinitionList.Count">
            <summary>
            [get] Retorna a quantidade de elementos presentes na lista
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.FieldDefinitionList.CaseComparer">
            <summary>
            Comparador interno (CaseInsensitive)
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldDefinitionList.#ctor">
            <summary>
            Construtor padrão (Unique = true)
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldDefinitionList.#ctor(System.Collections.Generic.IEnumerable{Benner.Tecnologia.Common.FieldDefinition})">
            <summary>
            Inicializa a lista com a coleção
            </summary>
            <param name="collection">Coleção para inicializar a lista</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldDefinitionList.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Configura a classe entre Unique e CaseInsensitive
            </summary>
            <param name="unique">True para elementos únicos</param>
            <param name="caseInsensitive">True para ignorar maiúsculas/minúsculas</param>
        </member>
        <member name="P:Benner.Tecnologia.Common.FieldDefinitionList.Item(System.Int32)">
            <summary>
            [get/set] Representa o elemento posicionado em 'index'
            </summary>
            <param name="index">Posição do elemento na lista</param>
            <returns>FieldDefinition</returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.FieldDefinitionList.Item(Benner.Tecnologia.Common.FieldDefinition)">
            <summary>
            [get/set] Representa o próprio elemento na lista 
            </summary>
            <param name="field">Elemento na lista</param>
            <returns>FieldDefinition</returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.FieldDefinitionList.Item(System.String)">
            <summary>
            [get/set] Representa o elemento na lista baseado no nome do campo
            </summary>
            <param name="fieldName">Nome do campo para ser pesquisado na lista</param>
            <returns>FieldDefinition</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldDefinitionList.Add(Benner.Tecnologia.Common.FieldDefinition)">
            <summary>
            Adiciona um novo campo na lista de definição
            </summary>
            <param name="field">Campo a ser adicionado</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldDefinitionList.AddRange(System.Collections.Generic.IEnumerable{Benner.Tecnologia.Common.FieldDefinition})">
            <summary>
            Adiciona uma coleção de elementos na lista
            </summary>
            <param name="collection">Coleção</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldDefinitionList.Clear">
            <summary>
            Limpa a lista
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldDefinitionList.Exists(Benner.Tecnologia.Common.FieldDefinition)">
            <summary>
            Verifica a existência de um elemento na lista
            </summary>
            <param name="field">Campo que servirá para busca</param>
            <returns>True/False</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldDefinitionList.Exists(System.String)">
            <summary>
            Verifica a existência de um elemento na lista baseado no nome do campo
            </summary>
            <param name="fieldName">Nome do campo</param>
            <returns>True/False</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldDefinitionList.Find(Benner.Tecnologia.Common.FieldDefinition)">
            <summary>
            Procura e retorna um elemento na lista
            </summary>
            <param name="field">Campo a ser procurado</param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldDefinitionList.Find(System.String)">
            <summary>
            Procura um campo pelo nome e retorna caso encontrar
            </summary>
            <param name="fieldName">Nome do campo</param>
            <returns>Campo encontrado ou 'null'</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldDefinitionList.IndexOf(Benner.Tecnologia.Common.FieldDefinition)">
            <summary>
            Verifica a posição de uma elemento na lista
            </summary>
            <param name="field">Campo a ser verificado</param>
            <returns>Posição na lista ou -1</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldDefinitionList.Insert(System.Int32,Benner.Tecnologia.Common.FieldDefinition)">
            <summary>
            Insere um elemento em uma determinada posição na lista
            </summary>
            <param name="index">Posição que será inserido</param>
            <param name="field">Campo a ser inserido</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldDefinitionList.Remove(System.String)">
            <summary>
            Remove um elemento na lista baseado no nome do campo
            </summary>
            <param name="fieldName">Nome do campo a ser removido</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldDefinitionList.Remove(Benner.Tecnologia.Common.FieldDefinition)">
            <summary>
            Remove um elemento na lista
            </summary>
            <param name="field">Campo a ser removido</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldDefinitionList.RemoveAt(System.Int32)">
            <summary>
            Remove um elemento da lista em uma determinada posição
            </summary>
            <param name="index">Posição a ser removida</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldDefinitionList.GetEnumerator">
            <summary>
            Retorna um enumerador dos elementos da lista
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.FieldDefinitionList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Retorna um enumerador dos elementos da lista
            </summary>
            <returns></returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.ParameterDirection">
            <summary>
            Especifica a direção do parâmetro.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.ParameterDirection.Input">
            <summary>
            O parâmetro é de entrada.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.ParameterDirection.Output">
            <summary>
            O parâmetro é de saída.
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.ParameterDirection.InputOutput">
            <summary>
            O parâmetro é de entrada e saída.
            </summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.StoredProcedureSource">
            <summary>
            Possibilita o uso de stored procedures como fonte de dados de entidades.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.StoredProcedureSource.Name">
            <summary>
            Nome da stored procedure.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.StoredProcedureSource.InSerializationTest">
            <summary>
            Para testes automatizados de serialização no bef
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.StoredProcedureSource.#ctor">
            <summary>
            Cria uma nova instância de StoredProcedureSource.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.StoredProcedureSource.#ctor(System.String)">
            <summary>
            Cria uma nova instância de StoredProcedureSource.
            </summary>
            <param name="name">Nome da stored procedure.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.StoredProcedureSource.#ctor(System.String,System.String)">
            <summary>
            Cria uma nova instância de StoredProcedureSource.
            </summary>
            <param name="systemInstanceName">Nome da instância do sistema</param>
            <param name="storedProcedureName">Nome da stored procedure.</param>
        </member>
        <member name="T:Benner.Tecnologia.Common.QuerySource">
            <summary>
            Possibilita o uso de comandos SQL como fonte de dados de entidades.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.QuerySource.CommandText">
            <summary>
            Comando SQL.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.QuerySource.Parameters">
            <summary>
            Lista de parametros do CommandText, utilizado apenas na geração de definição de entidade.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.QuerySource.InSerializationTest">
            <summary>
            Para testes automatizados de serialização no bef
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.QuerySource.#ctor">
            <summary>
            Cria uma instância de QuerySource.
            </summary>
            <overloads>
            Cria uma instância de QuerySource.
            </overloads>
        </member>
        <member name="M:Benner.Tecnologia.Common.QuerySource.#ctor(System.String)">
            <summary>
            Cria uma instância de QuerySource.
            </summary>
            <param name="commandText">Comando SQL.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.QuerySource.#ctor(System.String,System.String)">
            <summary>
            Cria uma instância de QuerySource.
            </summary>
            <param name="systemInstanceName">Nome da instância do sistema fonte dos dados.</param>
            <param name="commandText">Comando SQL.</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.QuerySource.ContainsCriterioSelecao">
            <summary>
            Indica se o comando SQL possui alguma função @CRITERIOSELECAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.QuerySource.ContainsParameters">
            <summary>
            Indica se o comando SQL possui algum parametro -> ":NOMEDOPARAMETRO"
            </summary>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.QuerySource.ContainsOrderBy">
            <summary>
            Indica se o comando SQL possui ORDER BY
            </summary>
            <returns></returns>
        </member>
        <member name="F:Benner.Tecnologia.Common.EntityViewRecordType.Dynamic">
            <summary>Indica uma visão que não é nem de formulário, nem de grid e nem nula.</summary>
        </member>
        <member name="T:Benner.Tecnologia.Common.Parameter">
            <summary>
            Representa um parâmetro de entrada ou saída.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Parameter.#ctor">
            <summary>
            Inicializa uma nova instância de parâmetro.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Parameter.#ctor(System.String,System.Object)">
            <summary>
            Inicializa uma nova instância de parâmetro.
            </summary>
            <param name="name">Nome do parâmetro.</param>
            <param name="value">Valor do parâmetro</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Parameter.#ctor(System.String,Benner.Tecnologia.Common.DataType,System.Object)">
            <summary>
            Inicializa uma nova instância de parâmetro.
            </summary>
            <param name="name">Nome do parâmetro.</param>
            <param name="dataType">Tipo do parâmetro</param>
            <param name="value">Valor do parâmetro</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Parameter.#ctor(System.String,Benner.Tecnologia.Common.DataType,Benner.Tecnologia.Common.ParameterDirection)">
            <summary>
            Inicializa uma nova instância de parâmetro.
            </summary>
            <param name="name">Nome do parâmetro.</param>
            <param name="dataType">Tipo do parâmetro.</param>
            <param name="direction">Direção do parâmetro (entrada, saída, ambos).</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Parameter.#ctor(System.String,Benner.Tecnologia.Common.DataType,Benner.Tecnologia.Common.ParameterDirection,System.Object)">
            <summary>
            Inicializa uma nova instância de parâmetro.
            </summary>
            <param name="name">Nome do parâmetro.</param>
            <param name="dataType">Tipo do parâmetro.</param>
            <param name="direction">Direção do parâmetro (entrada, saída, ambos).</param>
            <param name="value">Valor do parâmetro</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Parameter.#ctor(System.String,Benner.Tecnologia.Common.DataType,System.Int32,Benner.Tecnologia.Common.ParameterDirection,System.Object)">
            <summary>
            Inicializa uma nova instância de parâmetro.
            </summary>
            <param name="name">Nome do parâmetro.</param>
            <param name="dataType">Tipo do parâmetro.</param>
            <param name="size">Tamanho de um parâmetro do tipo DataType.String.</param>
            <param name="direction">Direção do parâmetro (entrada, saída, ambos).</param>
            <param name="value">Valor do parâmetro</param>
        </member>
        <member name="P:Benner.Tecnologia.Common.Parameter.Name">
            <summary>
            Retorna ou informa o nome do parâmetro.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Parameter.Value">
            <summary>
            Retorna ou informa o valor do parâmetro.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Parameter.Direction">
            <summary>
            Retorna ou informa a direção do parâmetro.
            </summary>
            <seealso cref="T:Benner.Tecnologia.Common.ParameterDirection"/>
        </member>
        <member name="P:Benner.Tecnologia.Common.Parameter.DataType">
            <summary>
            Retorna ou informa o tipo do parâmetro.
            </summary>
            <seealso cref="P:Benner.Tecnologia.Common.Parameter.DataType"/>
        </member>
        <member name="P:Benner.Tecnologia.Common.Parameter.Precision">
            <summary>
            Retorna ou informa a quantidade total de digitos em valores numéricos (Incluindo as casas decimais).
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Parameter.Scale">
            <summary>
            Retorna ou informa a quantidade de casas decimais em valores numéricos.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.Parameter.Size">
            <summary>
            Retorna ou informa número de caracteres de parâmetros do tipo DataType.String.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Parameter.GetHashCode">
            <summary>
            Retorna o código Hash da instância.
            </summary>
            <returns>Um número inteiro.</returns>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerPrincipal.HaveDeveloperRoleInDevelopmentEnv">
            <summary>
            Usuário possui flag de desenvolvedor (ou o papel W_DESENVOLVEDOR) e o ambiente é de desenvolvimento.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.BennerPrincipal.IsDeveloperRoleSelectedInDevelopmentEnv">
            <summary>
            Usuário está com W_DESENVOLVEDOR selecionado e o ambiente é de desenvolvimento.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.SecurityFactory.CreatePrincipal(System.String,System.String,Benner.Tecnologia.Common.BennerLogOnInfo,Benner.Tecnologia.Common.Handle)">
            <summary>
            Cria uma instância da classe BennerPrincipal com os devidos papéis atribuidos
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.SecurityFactory.CreatePrincipal(System.String,System.String,System.Guid)">
            <summary>
            Cria uma instância da classe BennerPrincipal com os devidos papéis atribuidos
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.SecurityFactory.CreatePrincipal(System.String,System.String,System.Guid,System.Boolean)">
            <summary>
            Cria uma instância da classe BennerPrincipal com os devidos papéis atribuidos
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.SecurityFactory.ValidateUserRoles">
            <summary>
            Faz validação dos papéis que devem estar contidos no Principal da Thread atual, quando a autorização está ativa.
            Força uma tentativa de recarregar os papéis caso o BennerPrincipal não tenha nenhum papel, antes de emitir exceção.
            Este método emite uma AuthenticationException caso o usuário não possua nenhum papel.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.SecurityFactory.ValidateUserRoles(Benner.Tecnologia.Common.BennerPrincipal)">
            <summary>
            Faz validação dos papéis que devem estar contidos no Principal quando a autorização está ativa.
            Força uma tentativa de recarregar os papéis caso o BennerPrincipal não tenha nenhum papel, antes de emitir exceção.
            Este método emite uma AuthenticationException caso o usuário não possua nenhum papel.
            </summary>
            <param name="principal">BennerPrincipal que deve ser validado.</param>
        </member>
        <member name="P:Benner.Tecnologia.Common.WesSiteMapNode.Entity">
            <summary>
            Propriedade do tipo BreadcrumbEntityHandle. Implementada para atender à interface IWesSiteMapNodeProxy. Só permite get.
            </summary>
        </member>
        <member name="P:Benner.Tecnologia.Common.WesSiteMapNode.BreadcrumbEntityHandle">
            <summary>
            Representa a informção de RecordHandleOfTable
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.WesSiteMapNode.GetBreadcrumbEntityHandles">
            <summary>
            Método utilitário que obtém a lista de RecordHandleOfTable de um sistema a partir das informações do breadcrumb 
            </summary>
            <param name="systemInstanceName">Nome da instância de sistema a ser coletado a lista de RecordHandleOfTable</param>
            <returns>Retorna a lista de RecordHandleOfTable onde o primeiro item da lista é o Root do breadcrumb.</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.RedirectUrlType">
            <summary>
            Tipo de URL de retorno
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.RedirectUrlType.DefaultURL">
            <summary>
            Retrieve default URL
            </summary>
        </member>
        <member name="F:Benner.Tecnologia.Common.RedirectUrlType.PageStateURL">
            <summary>
            Retrieve URL with page state key
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.WorkflowHelper.GetSqlWhereInbox">
            <summary>
            Método que monta a query da caixa de entrada("minhas tarefas") do Workflow
            </summary>
            <returns>Where Clause para apresentar registros da caixa de entrada.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.WorkflowHelper.GetSqlWhereCoordenacaoPapeis">
            <summary>
            Método que monta a query da coordenação por papéis.
            </summary>
            <returns>Where Clause para apresentar registros da lista de papéis.</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.WorkflowHelper.GetSqlWhereCoordenacaoPapeisTarefas">
            <summary>
            Método que monta a query para apresentar as tarefas do papel selecionado.
            </summary>
            <returns>Where Clause</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.WorkflowHelper.GetUsersReplaced">
            <summary>
            Método que retorna os usuários que são substituídos pelo usuário corrente (@USUARIO).
            </summary>
            <returns>Handle(s) do(s) usuário(s), seperados por vírgula, que são substituídos pelo usuário corrente (@USUARIO).</returns>
            <remarks>Este método está replicado na classe FormWorkflow, isto pq não achamos um local "comum" para deixa-lo compartilhado</remarks>
        </member>
        <member name="M:Benner.Tecnologia.Common.WorkflowHelper.ConcatSqlInOrEqual(System.String,System.String)">
            <summary>
            Método que retorna o campo passado por parâmetro concatenado com "= HANDLE" ou "IN(HANDLE's)"
            </summary>
            <param name="field">campo que será retornado na concatenação dos handles </param>
            <param name="handles">Lista de handle que será verificada e retornada na forma de: "= 1234" quando houver apenas um handle ou "IN(1234,9876)" quando houver mais de um handle</param>
            <returns>Retorna "field" concatenado com "=" ou "IN" e a lista de handle(s)</returns>
        </member>
        <member name="T:Benner.Tecnologia.Common.Workflow.WorkflowView">
            <summary>
            Responsável por fornecer as visões de formulário customizadas para uma atividade Tarefa do Workflow
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Common.Workflow.WorkflowView.Create(Benner.Tecnologia.Common.Components.FormDefinition,System.String)">
            <summary>
            Cria uma nova visão customizada na camada de workflow
            </summary>
            <param name="parentView">Definição de visão que será a base para a visão customizada. Geralmente é a visão consolidada.</param>
            <param name="identifier">Identificador único da atividade Tarefa</param>
            <returns>Retorna uma definição de visão da camada Workflow em modo de Inserção</returns>
        </member>
        <member name="M:Benner.Tecnologia.Common.Workflow.WorkflowView.Delete(System.String,System.String)">
            <summary>
            Exclui a visão customizada de uma determinada atividade Tarefa (identifier)
            </summary>
            <param name="systemInstanceName">Nome do sistema onde a visão é mantida</param>
            <param name="identifier">Identificador único da visão customizada</param>
        </member>
        <member name="M:Benner.Tecnologia.Common.Workflow.WorkflowView.Get(System.String,System.String,System.String)">
            <summary>
            Obtém a visão de formulário de uma determinada atividade Tarefa do fluxo (visão consolidada de workflow)
            </summary>
            <param name="systemInstanceName">Nome da instância do sistema na qual a visão está armazenada</param>
            <param name="viewName">Nome da visão</param>
            <param name="identifier">Identificador única da atividade Tarefa</param>
            <returns>Retorna uma definição de visão da camada Workflow em modo leitura. Retorna-rá nulo caso não encontre a visão pelo seu identificador.</returns>
        </member>
        <member name="T:Benner.Tecnologia.Business.AttachmentIndexer">
            <summary>
            Indexador de anexos.
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.Business.AttachmentIndexer.Search(System.String)">
            <summary>
            Busca de registros em anexos
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Benner.Tecnologia.Business.AttachmentIndexer.Ingest(System.String,System.String,System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{System.Tuple{System.Int64,System.Char}})">
            <summary>
            Ingerir anexos
            </summary>
            <param name="tableName"></param>
            <param name="fieldName"></param>
            <param name="lastIdexDateTime"></param>
            <param name="recordHandleToIngest"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Benner.Tecnologia.Business.AttachmentIndexer.Uningest(System.String,System.String,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Deleta arquivos excluídos
            </summary>
            <param name="tableName"></param>
            <param name="fieldName"></param>
            <param name="recordHandleToIngest"></param>
        </member>
        <member name="M:Benner.Tecnologia.BServer.Clients.BDocPoolManager.#cctor">
             <summary>
             Static constructor that gets 
            called only once during the application's lifetime.
             </summary>
        </member>
        <member name="P:Benner.Tecnologia.BServer.Clients.BDocPoolManager.Instance">
            <summary>
            Static property to retrieve the instance of the Pool Manager
            </summary>
        </member>
        <member name="M:Benner.Tecnologia.BServer.Clients.BDocPoolManager.ReleaseObject(Benner.Tecnologia.BServer.Clients.BDocPoolItem)">
            <summary>
            Releases an object from the pool
            </summary>
            <param name="obj">Object to remove from the pool</param>
            <returns>The object if success, null otherwise</returns>
        </member>
        <member name="M:Benner.Tecnologia.BServer.Clients.BDocPoolManager.RePopulate">
             <summary>
             Method that repopulates the 
            Queue after an object has been removed from the pool.
             This is done to make the queue 
            objects in sync with the objects in the hash table.
             </summary>
        </member>
        <member name="P:Benner.Tecnologia.BServer.Clients.BDocPoolManager.CurrentObjectsInPool">
            <summary>
            Property that represents the current no of objects in the pool
            </summary>
        </member>
    </members>
</doc>
